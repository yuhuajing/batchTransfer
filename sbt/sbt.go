// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package sbt

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// SBTTokenInfo is an auto generated low-level Go binding around an user-defined struct.
type SBTTokenInfo struct {
	Tokenid     *big.Int
	Minted      *big.Int
	Totalamount *big.Int
	Name        string
	Symbol      string
	Url         string
	Allow       *big.Int
}

// SbtMetaData contains all meta data concerning the Sbt contract.
var SbtMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TokenIDs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"receiver\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenid\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"batchmint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"closeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"getminted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"getname\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"getsymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"gettotalamount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"openMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalamount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"settokenIDInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIDInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalamount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"int256\",\"name\":\"allow\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIDs\",\"type\":\"uint256[]\"}],\"name\":\"tokenIDsInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalamount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"int256\",\"name\":\"allow\",\"type\":\"int256\"}],\"internalType\":\"structSBT.TokenInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"updateNameSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newowner\",\"type\":\"address\"}],\"name\":\"updateOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalamount\",\"type\":\"uint256\"}],\"name\":\"updateTotalAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"updateURL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60806040526040518060200160405280600081525062000025816200006d60201b60201c565b5033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620003e3565b80600290816200007e9190620002fc565b5050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200010457607f821691505b6020821081036200011a5762000119620000bc565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620001847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000145565b62000190868362000145565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620001dd620001d7620001d184620001a8565b620001b2565b620001a8565b9050919050565b6000819050919050565b620001f983620001bc565b620002116200020882620001e4565b84845462000152565b825550505050565b600090565b6200022862000219565b62000235818484620001ee565b505050565b5b818110156200025d57620002516000826200021e565b6001810190506200023b565b5050565b601f821115620002ac57620002768162000120565b620002818462000135565b8101602085101562000291578190505b620002a9620002a08562000135565b8301826200023a565b50505b505050565b600082821c905092915050565b6000620002d160001984600802620002b1565b1980831691505092915050565b6000620002ec8383620002be565b9150826002028217905092915050565b620003078262000082565b67ffffffffffffffff8111156200032357620003226200008d565b5b6200032f8254620000eb565b6200033c82828562000261565b600060209050601f8311600181146200037457600084156200035f578287015190505b6200036b8582620002de565b865550620003db565b601f198416620003848662000120565b60005b82811015620003ae5784890151825560018201915060208501945060208101905062000387565b86831015620003ce5784890151620003ca601f891682620002be565b8355505b6001600288020188555050505b505050505050565b613fdd80620003f36000396000f3fe608060405234801561001057600080fd5b506004361061018d5760003560e01c80635b5c45f3116100de578063b390c0ab11610097578063e144976e11610071578063e144976e146104cc578063e985e9c5146104e8578063f242432a14610518578063fa82aa5f146105345761018d565b8063b390c0ab14610464578063c68ac6b014610480578063cc9b13101461049c5761018d565b80635b5c45f3146103b8578063880cdc31146103d45780638da5cb5b146103f05780639465ffa91461040e578063a22cb4651461042a578063a3945ad3146104465761018d565b80631829f4561161014b5780633aa40d3e116101255780633aa40d3e14610306578063413f818b1461033c5780634287084f1461036c5780634e1273f4146103885761018d565b80631829f4561461029e5780632a6e10c8146102ba5780632eb2c2d6146102ea5761018d565b8062fdd58e1461019257806301ffc9a7146101c25780630202ace1146101f25780630e89341c14610222578063156e29f614610252578063163c63d11461026e575b600080fd5b6101ac60048036038101906101a79190612671565b610550565b6040516101b991906126c0565b60405180910390f35b6101dc60048036038101906101d79190612733565b6105aa565b6040516101e9919061277b565b60405180910390f35b61020c60048036038101906102079190612796565b61068c565b6040516102199190612853565b60405180910390f35b61023c60048036038101906102379190612796565b610734565b6040516102499190612853565b60405180910390f35b61026c60048036038101906102679190612875565b6107dc565b005b61028860048036038101906102839190612796565b6109f5565b60405161029591906126c0565b60405180910390f35b6102b860048036038101906102b391906129fd565b610a15565b005b6102d460048036038101906102cf9190612ae8565b610af2565b6040516102e19190612d13565b60405180910390f35b61030460048036038101906102ff9190612e99565b610dae565b005b610320600480360381019061031b9190612796565b610de9565b6040516103339796959493929190612f77565b60405180910390f35b61035660048036038101906103519190612796565b610fc3565b60405161036391906126c0565b60405180910390f35b61038660048036038101906103819190612796565b610fe3565b005b6103a2600480360381019061039d91906130be565b611092565b6040516103af91906131e5565b60405180910390f35b6103d260048036038101906103cd9190613207565b6111a1565b005b6103ee60048036038101906103e991906132d6565b611380565b005b6103f86114c3565b6040516104059190613312565b60405180910390f35b6104286004803603810190610423919061332d565b6114e9565b005b610444600480360381019061043f9190613400565b611789565b005b61044e6117c4565b60405161045b91906131e5565b60405180910390f35b61047e60048036038101906104799190613440565b61181c565b005b61049a60048036038101906104959190612796565b61182b565b005b6104b660048036038101906104b19190612796565b6118da565b6040516104c39190612853565b60405180910390f35b6104e660048036038101906104e19190613480565b611982565b005b61050260048036038101906104fd91906134dc565b611a3a565b60405161050f919061277b565b60405180910390f35b610532600480360381019061052d919061351c565b611a77565b005b61054e60048036038101906105499190613440565b611ab2565b005b600080600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061067557507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610685575061068482611bba565b5b9050919050565b60606004600083815260200190815260200160002060030180546106af906135e2565b80601f01602080910402602001604051908101604052809291908181526020018280546106db906135e2565b80156107285780601f106106fd57610100808354040283529160200191610728565b820191906000526020600020905b81548152906001019060200180831161070b57829003601f168201915b50505050509050919050565b6060600460008381526020019081526020016000206005018054610757906135e2565b80601f0160208091040260200160405190810160405280929190818152602001828054610783906135e2565b80156107d05780601f106107a5576101008083540402835291602001916107d0565b820191906000526020600020905b8154815290600101906020018083116107b357829003601f168201915b50505050509050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461086c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108639061365f565b60405180910390fd5b8160006004600083815260200190815260200160002060060154146108c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108bd906136f1565b60405180910390fd5b600060046000858152602001908152602001600020600101540361090e5760058390806001815401808255809150506001900390600052602060002001600090919091909150555b60006004600085815260200190815260200160002060020154146109a75760046000848152602001908152602001600020600201548260046000868152602001908152602001600020600101546109659190613740565b11156109a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099d906137c0565b60405180910390fd5b5b816004600085815260200190815260200160002060010160008282546109cd9190613740565b925050819055506109ef84848460405180602001604052806000815250611c24565b50505050565b600060046000838152602001908152602001600020600201549050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610aa5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9c9061365f565b60405180910390fd5b81600460008581526020019081526020016000206003019081610ac8919061398c565b5080600460008581526020019081526020016000206004019081610aec919061398c565b50505050565b606060008383905067ffffffffffffffff811115610b1357610b126128d2565b5b604051908082528060200260200182016040528015610b4c57816020015b610b3961258c565b815260200190600190039081610b315790505b50905060005b84849050811015610da35760046000868684818110610b7457610b73613a5e565b5b9050602002013581526020019081526020016000206040518060e0016040529081600082015481526020016001820154815260200160028201548152602001600382018054610bc2906135e2565b80601f0160208091040260200160405190810160405280929190818152602001828054610bee906135e2565b8015610c3b5780601f10610c1057610100808354040283529160200191610c3b565b820191906000526020600020905b815481529060010190602001808311610c1e57829003601f168201915b50505050508152602001600482018054610c54906135e2565b80601f0160208091040260200160405190810160405280929190818152602001828054610c80906135e2565b8015610ccd5780601f10610ca257610100808354040283529160200191610ccd565b820191906000526020600020905b815481529060010190602001808311610cb057829003601f168201915b50505050508152602001600582018054610ce6906135e2565b80601f0160208091040260200160405190810160405280929190818152602001828054610d12906135e2565b8015610d5f5780601f10610d3457610100808354040283529160200191610d5f565b820191906000526020600020905b815481529060010190602001808311610d4257829003601f168201915b50505050508152602001600682015481525050828281518110610d8557610d84613a5e565b5b60200260200101819052508080610d9b90613a8d565b915050610b52565b508091505092915050565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de090613b47565b60405180910390fd5b6004602052806000526040600020600091509050806000015490806001015490806002015490806003018054610e1e906135e2565b80601f0160208091040260200160405190810160405280929190818152602001828054610e4a906135e2565b8015610e975780601f10610e6c57610100808354040283529160200191610e97565b820191906000526020600020905b815481529060010190602001808311610e7a57829003601f168201915b505050505090806004018054610eac906135e2565b80601f0160208091040260200160405190810160405280929190818152602001828054610ed8906135e2565b8015610f255780601f10610efa57610100808354040283529160200191610f25565b820191906000526020600020905b815481529060010190602001808311610f0857829003601f168201915b505050505090806005018054610f3a906135e2565b80601f0160208091040260200160405190810160405280929190818152602001828054610f66906135e2565b8015610fb35780601f10610f8857610100808354040283529160200191610fb3565b820191906000526020600020905b815481529060010190602001808311610f9657829003601f168201915b5050505050908060060154905087565b600060046000838152602001908152602001600020600101549050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611073576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106a9061365f565b60405180910390fd5b6000600460008381526020019081526020016000206006018190555050565b606081518351146110de57815183516040517f5b0599910000000000000000000000000000000000000000000000000000000081526004016110d5929190613b67565b60405180910390fd5b6000835167ffffffffffffffff8111156110fb576110fa6128d2565b5b6040519080825280602002602001820160405280156111295781602001602082028036833780820191505090505b50905060005b84518110156111965761116661114e8287611cbd90919063ffffffff16565b6111618387611cd190919063ffffffff16565b610550565b82828151811061117957611178613a5e565b5b6020026020010181815250508061118f90613a8d565b905061112f565b508091505092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611231576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112289061365f565b60405180910390fd5b600084146112a9576004600086815260200190815260200160002060010154600460008781526020019081526020016000206002015410156112a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129f90613c02565b60405180910390fd5b5b60006040518060e0016040528087815260200160046000898152602001908152602001600020600101548152602001868152602001858152602001848152602001838152602001600081525090508060046000888152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301908161133e919061398c565b506080820151816004019081611354919061398c565b5060a082015181600501908161136a919061398c565b5060c08201518160060155905050505050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611410576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114079061365f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361147f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147690613c6e565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611579576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115709061365f565b60405180910390fd5b600083511415801561158c575080518351145b6115cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c290613cda565b60405180910390fd5b60018251036116535760005b835181101561164d5761163a8482815181106115f6576115f5613a5e565b5b60200260200101518460008151811061161257611611613a5e565b5b602002602001015184848151811061162d5761162c613a5e565b5b60200260200101516107dc565b808061164590613a8d565b9150506115d7565b50611784565b8151835114611697576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168e90613cda565b60405180910390fd5b60005b8351811015611782576000600460008584815181106116bc576116bb613a5e565b5b602002602001015181526020019081526020016000206006015403611716576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170d90613d46565b60405180910390fd5b61176f84828151811061172c5761172b613a5e565b5b602002602001015184838151811061174757611746613a5e565b5b602002602001015184848151811061176257611761613a5e565b5b60200260200101516107dc565b808061177a90613a8d565b91505061169a565b505b505050565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117bb90613b47565b60405180910390fd5b6060600580548060200260200160405190810160405280929190818152602001828054801561181257602002820191906000526020600020905b8154815260200190600101908083116117fe575b5050505050905090565b611827338383611ce5565b5050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146118bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118b29061365f565b60405180910390fd5b6001600460008381526020019081526020016000206006018190555050565b60606004600083815260200190815260200160002060040180546118fd906135e2565b80601f0160208091040260200160405190810160405280929190818152602001828054611929906135e2565b80156119765780601f1061194b57610100808354040283529160200191611976565b820191906000526020600020905b81548152906001019060200180831161195957829003601f168201915b50505050509050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611a12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a099061365f565b60405180910390fd5b80600460008481526020019081526020016000206005019081611a35919061398c565b505050565b60006040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a6e90613b47565b60405180910390fd5b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aa990613b47565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611b42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b399061365f565b60405180910390fd5b6004600083815260200190815260200160002060010154811015611b9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b9290613db2565b60405180910390fd5b8060046000848152602001908152602001600020600201819055505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611c965760006040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401611c8d9190613312565b60405180910390fd5b600080611ca38585611d8c565b91509150611cb5600087848487611dbc565b505050505050565b600060208202602084010151905092915050565b600060208202602084010151905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611d575760006040517f01a83514000000000000000000000000000000000000000000000000000000008152600401611d4e9190613312565b60405180910390fd5b600080611d648484611d8c565b91509150611d85856000848460405180602001604052806000815250611dbc565b5050505050565b60608060405191506001825283602083015260408201905060018152826020820152604081016040529250929050565b611dc885858585611e6e565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614611e67576000611e0661221c565b90506001845103611e56576000611e27600086611cd190919063ffffffff16565b90506000611e3f600086611cd190919063ffffffff16565b9050611e4f838989858589612224565b5050611e65565b611e648187878787876123d8565b5b505b5050505050565b8051825114611eb857815181516040517f5b059991000000000000000000000000000000000000000000000000000000008152600401611eaf929190613b67565b60405180910390fd5b6000611ec261221c565b905060005b83518110156120d7576000611ee58286611cd190919063ffffffff16565b90506000611efc8386611cd190919063ffffffff16565b9050600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161461202957600080600084815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611fd157888183856040517f03dee4c5000000000000000000000000000000000000000000000000000000008152600401611fc89493929190613dd2565b60405180910390fd5b81810360008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16146120c4578060008084815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546120bc9190613740565b925050819055505b5050806120d090613a8d565b9050611ec7565b5060018351036121965760006120f7600085611cd190919063ffffffff16565b9050600061210f600085611cd190919063ffffffff16565b90508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628585604051612187929190613b67565b60405180910390a45050612215565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb868660405161220c929190613e17565b60405180910390a45b5050505050565b600033905090565b60008473ffffffffffffffffffffffffffffffffffffffff163b11156123d0578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401612285959493929190613ea3565b6020604051808303816000875af19250505080156122c157506040513d601f19601f820116820180604052508101906122be9190613f12565b60015b612345573d80600081146122f1576040519150601f19603f3d011682016040523d82523d6000602084013e6122f6565b606091505b50600081510361233d57846040517f57f447ce0000000000000000000000000000000000000000000000000000000081526004016123349190613312565b60405180910390fd5b805181602001fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146123ce57846040517f57f447ce0000000000000000000000000000000000000000000000000000000081526004016123c59190613312565b60405180910390fd5b505b505050505050565b60008473ffffffffffffffffffffffffffffffffffffffff163b1115612584578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401612439959493929190613f3f565b6020604051808303816000875af192505050801561247557506040513d601f19601f820116820180604052508101906124729190613f12565b60015b6124f9573d80600081146124a5576040519150601f19603f3d011682016040523d82523d6000602084013e6124aa565b606091505b5060008151036124f157846040517f57f447ce0000000000000000000000000000000000000000000000000000000081526004016124e89190613312565b60405180910390fd5b805181602001fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461258257846040517f57f447ce0000000000000000000000000000000000000000000000000000000081526004016125799190613312565b60405180910390fd5b505b505050505050565b6040518060e00160405280600081526020016000815260200160008152602001606081526020016060815260200160608152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612608826125dd565b9050919050565b612618816125fd565b811461262357600080fd5b50565b6000813590506126358161260f565b92915050565b6000819050919050565b61264e8161263b565b811461265957600080fd5b50565b60008135905061266b81612645565b92915050565b60008060408385031215612688576126876125d3565b5b600061269685828601612626565b92505060206126a78582860161265c565b9150509250929050565b6126ba8161263b565b82525050565b60006020820190506126d560008301846126b1565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612710816126db565b811461271b57600080fd5b50565b60008135905061272d81612707565b92915050565b600060208284031215612749576127486125d3565b5b60006127578482850161271e565b91505092915050565b60008115159050919050565b61277581612760565b82525050565b6000602082019050612790600083018461276c565b92915050565b6000602082840312156127ac576127ab6125d3565b5b60006127ba8482850161265c565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156127fd5780820151818401526020810190506127e2565b60008484015250505050565b6000601f19601f8301169050919050565b6000612825826127c3565b61282f81856127ce565b935061283f8185602086016127df565b61284881612809565b840191505092915050565b6000602082019050818103600083015261286d818461281a565b905092915050565b60008060006060848603121561288e5761288d6125d3565b5b600061289c86828701612626565b93505060206128ad8682870161265c565b92505060406128be8682870161265c565b9150509250925092565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61290a82612809565b810181811067ffffffffffffffff82111715612929576129286128d2565b5b80604052505050565b600061293c6125c9565b90506129488282612901565b919050565b600067ffffffffffffffff821115612968576129676128d2565b5b61297182612809565b9050602081019050919050565b82818337600083830152505050565b60006129a061299b8461294d565b612932565b9050828152602081018484840111156129bc576129bb6128cd565b5b6129c784828561297e565b509392505050565b600082601f8301126129e4576129e36128c8565b5b81356129f484826020860161298d565b91505092915050565b600080600060608486031215612a1657612a156125d3565b5b6000612a248682870161265c565b935050602084013567ffffffffffffffff811115612a4557612a446125d8565b5b612a51868287016129cf565b925050604084013567ffffffffffffffff811115612a7257612a716125d8565b5b612a7e868287016129cf565b9150509250925092565b600080fd5b600080fd5b60008083601f840112612aa857612aa76128c8565b5b8235905067ffffffffffffffff811115612ac557612ac4612a88565b5b602083019150836020820283011115612ae157612ae0612a8d565b5b9250929050565b60008060208385031215612aff57612afe6125d3565b5b600083013567ffffffffffffffff811115612b1d57612b1c6125d8565b5b612b2985828601612a92565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612b6a8161263b565b82525050565b600082825260208201905092915050565b6000612b8c826127c3565b612b968185612b70565b9350612ba68185602086016127df565b612baf81612809565b840191505092915050565b6000819050919050565b612bcd81612bba565b82525050565b600060e083016000830151612beb6000860182612b61565b506020830151612bfe6020860182612b61565b506040830151612c116040860182612b61565b5060608301518482036060860152612c298282612b81565b91505060808301518482036080860152612c438282612b81565b91505060a083015184820360a0860152612c5d8282612b81565b91505060c0830151612c7260c0860182612bc4565b508091505092915050565b6000612c898383612bd3565b905092915050565b6000602082019050919050565b6000612ca982612b35565b612cb38185612b40565b935083602082028501612cc585612b51565b8060005b85811015612d015784840389528151612ce28582612c7d565b9450612ced83612c91565b925060208a01995050600181019050612cc9565b50829750879550505050505092915050565b60006020820190508181036000830152612d2d8184612c9e565b905092915050565b600067ffffffffffffffff821115612d5057612d4f6128d2565b5b602082029050602081019050919050565b6000612d74612d6f84612d35565b612932565b90508083825260208201905060208402830185811115612d9757612d96612a8d565b5b835b81811015612dc05780612dac888261265c565b845260208401935050602081019050612d99565b5050509392505050565b600082601f830112612ddf57612dde6128c8565b5b8135612def848260208601612d61565b91505092915050565b600067ffffffffffffffff821115612e1357612e126128d2565b5b612e1c82612809565b9050602081019050919050565b6000612e3c612e3784612df8565b612932565b905082815260208101848484011115612e5857612e576128cd565b5b612e6384828561297e565b509392505050565b600082601f830112612e8057612e7f6128c8565b5b8135612e90848260208601612e29565b91505092915050565b600080600080600060a08688031215612eb557612eb46125d3565b5b6000612ec388828901612626565b9550506020612ed488828901612626565b945050604086013567ffffffffffffffff811115612ef557612ef46125d8565b5b612f0188828901612dca565b935050606086013567ffffffffffffffff811115612f2257612f216125d8565b5b612f2e88828901612dca565b925050608086013567ffffffffffffffff811115612f4f57612f4e6125d8565b5b612f5b88828901612e6b565b9150509295509295909350565b612f7181612bba565b82525050565b600060e082019050612f8c600083018a6126b1565b612f9960208301896126b1565b612fa660408301886126b1565b8181036060830152612fb8818761281a565b90508181036080830152612fcc818661281a565b905081810360a0830152612fe0818561281a565b9050612fef60c0830184612f68565b98975050505050505050565b600067ffffffffffffffff821115613016576130156128d2565b5b602082029050602081019050919050565b600061303a61303584612ffb565b612932565b9050808382526020820190506020840283018581111561305d5761305c612a8d565b5b835b8181101561308657806130728882612626565b84526020840193505060208101905061305f565b5050509392505050565b600082601f8301126130a5576130a46128c8565b5b81356130b5848260208601613027565b91505092915050565b600080604083850312156130d5576130d46125d3565b5b600083013567ffffffffffffffff8111156130f3576130f26125d8565b5b6130ff85828601613090565b925050602083013567ffffffffffffffff8111156131205761311f6125d8565b5b61312c85828601612dca565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600061316e8383612b61565b60208301905092915050565b6000602082019050919050565b600061319282613136565b61319c8185613141565b93506131a783613152565b8060005b838110156131d85781516131bf8882613162565b97506131ca8361317a565b9250506001810190506131ab565b5085935050505092915050565b600060208201905081810360008301526131ff8184613187565b905092915050565b600080600080600060a08688031215613223576132226125d3565b5b60006132318882890161265c565b95505060206132428882890161265c565b945050604086013567ffffffffffffffff811115613263576132626125d8565b5b61326f888289016129cf565b935050606086013567ffffffffffffffff8111156132905761328f6125d8565b5b61329c888289016129cf565b925050608086013567ffffffffffffffff8111156132bd576132bc6125d8565b5b6132c9888289016129cf565b9150509295509295909350565b6000602082840312156132ec576132eb6125d3565b5b60006132fa84828501612626565b91505092915050565b61330c816125fd565b82525050565b60006020820190506133276000830184613303565b92915050565b600080600060608486031215613346576133456125d3565b5b600084013567ffffffffffffffff811115613364576133636125d8565b5b61337086828701613090565b935050602084013567ffffffffffffffff811115613391576133906125d8565b5b61339d86828701612dca565b925050604084013567ffffffffffffffff8111156133be576133bd6125d8565b5b6133ca86828701612dca565b9150509250925092565b6133dd81612760565b81146133e857600080fd5b50565b6000813590506133fa816133d4565b92915050565b60008060408385031215613417576134166125d3565b5b600061342585828601612626565b9250506020613436858286016133eb565b9150509250929050565b60008060408385031215613457576134566125d3565b5b60006134658582860161265c565b92505060206134768582860161265c565b9150509250929050565b60008060408385031215613497576134966125d3565b5b60006134a58582860161265c565b925050602083013567ffffffffffffffff8111156134c6576134c56125d8565b5b6134d2858286016129cf565b9150509250929050565b600080604083850312156134f3576134f26125d3565b5b600061350185828601612626565b925050602061351285828601612626565b9150509250929050565b600080600080600060a08688031215613538576135376125d3565b5b600061354688828901612626565b955050602061355788828901612626565b94505060406135688882890161265c565b93505060606135798882890161265c565b925050608086013567ffffffffffffffff81111561359a576135996125d8565b5b6135a688828901612e6b565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806135fa57607f821691505b60208210810361360d5761360c6135b3565b5b50919050565b7f4f6e6c79206f70657261746f722063616e206d696e74206e657720736f756c73600082015250565b60006136496020836127ce565b915061365482613613565b602082019050919050565b600060208201905081810360008301526136788161363c565b9050919050565b7f5468697320746f6b656e6964206576656e7420686173206265656e20636c6f7360008201527f6564000000000000000000000000000000000000000000000000000000000000602082015250565b60006136db6022836127ce565b91506136e68261367f565b604082019050919050565b6000602082019050818103600083015261370a816136ce565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061374b8261263b565b91506137568361263b565b925082820190508082111561376e5761376d613711565b5b92915050565b7f4e6f7420456e6f75676820546f6b656e4944206c656674000000000000000000600082015250565b60006137aa6017836127ce565b91506137b582613774565b602082019050919050565b600060208201905081810360008301526137d98161379d565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026138427fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613805565b61384c8683613805565b95508019841693508086168417925050509392505050565b6000819050919050565b600061388961388461387f8461263b565b613864565b61263b565b9050919050565b6000819050919050565b6138a38361386e565b6138b76138af82613890565b848454613812565b825550505050565b600090565b6138cc6138bf565b6138d781848461389a565b505050565b5b818110156138fb576138f06000826138c4565b6001810190506138dd565b5050565b601f82111561394057613911816137e0565b61391a846137f5565b81016020851015613929578190505b61393d613935856137f5565b8301826138dc565b50505b505050565b600082821c905092915050565b600061396360001984600802613945565b1980831691505092915050565b600061397c8383613952565b9150826002028217905092915050565b613995826127c3565b67ffffffffffffffff8111156139ae576139ad6128d2565b5b6139b882546135e2565b6139c38282856138ff565b600060209050601f8311600181146139f657600084156139e4578287015190505b6139ee8582613970565b865550613a56565b601f198416613a04866137e0565b60005b82811015613a2c57848901518255600182019150602085019450602081019050613a07565b86831015613a495784890151613a45601f891682613952565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000613a988261263b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613aca57613ac9613711565b5b600182019050919050565b7f5472616e73666572206e6f7420737570706f7274656420666f7220736f756c2060008201527f626f756e6420746f6b656e2e0000000000000000000000000000000000000000602082015250565b6000613b31602c836127ce565b9150613b3c82613ad5565b604082019050919050565b60006020820190508181036000830152613b6081613b24565b9050919050565b6000604082019050613b7c60008301856126b1565b613b8960208301846126b1565b9392505050565b7f546f74616c616d6f756e74206d757374206d6f7265207468616e206d696e746560008201527f6420616d6f756e74000000000000000000000000000000000000000000000000602082015250565b6000613bec6028836127ce565b9150613bf782613b90565b604082019050919050565b60006020820190508181036000830152613c1b81613bdf565b9050919050565b7f496e76616c6964204f776e657200000000000000000000000000000000000000600082015250565b6000613c58600d836127ce565b9150613c6382613c22565b602082019050919050565b60006020820190508181036000830152613c8781613c4b565b9050919050565b7f556e6d617463686564206c656e67746800000000000000000000000000000000600082015250565b6000613cc46010836127ce565b9150613ccf82613c8e565b602082019050919050565b60006020820190508181036000830152613cf381613cb7565b9050919050565b7f436c6f73656420746f6b656e6964000000000000000000000000000000000000600082015250565b6000613d30600e836127ce565b9150613d3b82613cfa565b602082019050919050565b60006020820190508181036000830152613d5f81613d23565b9050919050565b7f546f6b656e616d6f756e74206d757374206d6f7265207468616e203000000000600082015250565b6000613d9c601c836127ce565b9150613da782613d66565b602082019050919050565b60006020820190508181036000830152613dcb81613d8f565b9050919050565b6000608082019050613de76000830187613303565b613df460208301866126b1565b613e0160408301856126b1565b613e0e60608301846126b1565b95945050505050565b60006040820190508181036000830152613e318185613187565b90508181036020830152613e458184613187565b90509392505050565b600081519050919050565b600082825260208201905092915050565b6000613e7582613e4e565b613e7f8185613e59565b9350613e8f8185602086016127df565b613e9881612809565b840191505092915050565b600060a082019050613eb86000830188613303565b613ec56020830187613303565b613ed260408301866126b1565b613edf60608301856126b1565b8181036080830152613ef18184613e6a565b90509695505050505050565b600081519050613f0c81612707565b92915050565b600060208284031215613f2857613f276125d3565b5b6000613f3684828501613efd565b91505092915050565b600060a082019050613f546000830188613303565b613f616020830187613303565b8181036040830152613f738186613187565b90508181036060830152613f878185613187565b90508181036080830152613f9b8184613e6a565b9050969550505050505056fea26469706673582212207141744f6cc3168ae19360bb0fc8b210ac3c474f1d9fe39e63574bd43512a6bf64736f6c63430008140033",
}

// SbtABI is the input ABI used to generate the binding from.
// Deprecated: Use SbtMetaData.ABI instead.
var SbtABI = SbtMetaData.ABI

// SbtBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SbtMetaData.Bin instead.
var SbtBin = SbtMetaData.Bin

// DeploySbt deploys a new Ethereum contract, binding an instance of Sbt to it.
func DeploySbt(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Sbt, error) {
	parsed, err := SbtMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SbtBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Sbt{SbtCaller: SbtCaller{contract: contract}, SbtTransactor: SbtTransactor{contract: contract}, SbtFilterer: SbtFilterer{contract: contract}}, nil
}

// Sbt is an auto generated Go binding around an Ethereum contract.
type Sbt struct {
	SbtCaller     // Read-only binding to the contract
	SbtTransactor // Write-only binding to the contract
	SbtFilterer   // Log filterer for contract events
}

// SbtCaller is an auto generated read-only Go binding around an Ethereum contract.
type SbtCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SbtTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SbtTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SbtFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SbtFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SbtSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SbtSession struct {
	Contract     *Sbt              // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SbtCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SbtCallerSession struct {
	Contract *SbtCaller    // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// SbtTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SbtTransactorSession struct {
	Contract     *SbtTransactor    // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SbtRaw is an auto generated low-level Go binding around an Ethereum contract.
type SbtRaw struct {
	Contract *Sbt // Generic contract binding to access the raw methods on
}

// SbtCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SbtCallerRaw struct {
	Contract *SbtCaller // Generic read-only contract binding to access the raw methods on
}

// SbtTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SbtTransactorRaw struct {
	Contract *SbtTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSbt creates a new instance of Sbt, bound to a specific deployed contract.
func NewSbt(address common.Address, backend bind.ContractBackend) (*Sbt, error) {
	contract, err := bindSbt(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Sbt{SbtCaller: SbtCaller{contract: contract}, SbtTransactor: SbtTransactor{contract: contract}, SbtFilterer: SbtFilterer{contract: contract}}, nil
}

// NewSbtCaller creates a new read-only instance of Sbt, bound to a specific deployed contract.
func NewSbtCaller(address common.Address, caller bind.ContractCaller) (*SbtCaller, error) {
	contract, err := bindSbt(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SbtCaller{contract: contract}, nil
}

// NewSbtTransactor creates a new write-only instance of Sbt, bound to a specific deployed contract.
func NewSbtTransactor(address common.Address, transactor bind.ContractTransactor) (*SbtTransactor, error) {
	contract, err := bindSbt(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SbtTransactor{contract: contract}, nil
}

// NewSbtFilterer creates a new log filterer instance of Sbt, bound to a specific deployed contract.
func NewSbtFilterer(address common.Address, filterer bind.ContractFilterer) (*SbtFilterer, error) {
	contract, err := bindSbt(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SbtFilterer{contract: contract}, nil
}

// bindSbt binds a generic wrapper to an already deployed contract.
func bindSbt(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SbtMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Sbt *SbtRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Sbt.Contract.SbtCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Sbt *SbtRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Sbt.Contract.SbtTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Sbt *SbtRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Sbt.Contract.SbtTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Sbt *SbtCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Sbt.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Sbt *SbtTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Sbt.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Sbt *SbtTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Sbt.Contract.contract.Transact(opts, method, params...)
}

// TokenIDs is a free data retrieval call binding the contract method 0xa3945ad3.
//
// Solidity: function TokenIDs() view returns(uint256[])
func (_Sbt *SbtCaller) TokenIDs(opts *bind.CallOpts) ([]*big.Int, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "TokenIDs")

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// TokenIDs is a free data retrieval call binding the contract method 0xa3945ad3.
//
// Solidity: function TokenIDs() view returns(uint256[])
func (_Sbt *SbtSession) TokenIDs() ([]*big.Int, error) {
	return _Sbt.Contract.TokenIDs(&_Sbt.CallOpts)
}

// TokenIDs is a free data retrieval call binding the contract method 0xa3945ad3.
//
// Solidity: function TokenIDs() view returns(uint256[])
func (_Sbt *SbtCallerSession) TokenIDs() ([]*big.Int, error) {
	return _Sbt.Contract.TokenIDs(&_Sbt.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_Sbt *SbtCaller) BalanceOf(opts *bind.CallOpts, account common.Address, id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "balanceOf", account, id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_Sbt *SbtSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _Sbt.Contract.BalanceOf(&_Sbt.CallOpts, account, id)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_Sbt *SbtCallerSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _Sbt.Contract.BalanceOf(&_Sbt.CallOpts, account, id)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_Sbt *SbtCaller) BalanceOfBatch(opts *bind.CallOpts, accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "balanceOfBatch", accounts, ids)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_Sbt *SbtSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _Sbt.Contract.BalanceOfBatch(&_Sbt.CallOpts, accounts, ids)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_Sbt *SbtCallerSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _Sbt.Contract.BalanceOfBatch(&_Sbt.CallOpts, accounts, ids)
}

// Getminted is a free data retrieval call binding the contract method 0x413f818b.
//
// Solidity: function getminted(uint256 tokenid) view returns(uint256)
func (_Sbt *SbtCaller) Getminted(opts *bind.CallOpts, tokenid *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "getminted", tokenid)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Getminted is a free data retrieval call binding the contract method 0x413f818b.
//
// Solidity: function getminted(uint256 tokenid) view returns(uint256)
func (_Sbt *SbtSession) Getminted(tokenid *big.Int) (*big.Int, error) {
	return _Sbt.Contract.Getminted(&_Sbt.CallOpts, tokenid)
}

// Getminted is a free data retrieval call binding the contract method 0x413f818b.
//
// Solidity: function getminted(uint256 tokenid) view returns(uint256)
func (_Sbt *SbtCallerSession) Getminted(tokenid *big.Int) (*big.Int, error) {
	return _Sbt.Contract.Getminted(&_Sbt.CallOpts, tokenid)
}

// Getname is a free data retrieval call binding the contract method 0x0202ace1.
//
// Solidity: function getname(uint256 tokenid) view returns(string)
func (_Sbt *SbtCaller) Getname(opts *bind.CallOpts, tokenid *big.Int) (string, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "getname", tokenid)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Getname is a free data retrieval call binding the contract method 0x0202ace1.
//
// Solidity: function getname(uint256 tokenid) view returns(string)
func (_Sbt *SbtSession) Getname(tokenid *big.Int) (string, error) {
	return _Sbt.Contract.Getname(&_Sbt.CallOpts, tokenid)
}

// Getname is a free data retrieval call binding the contract method 0x0202ace1.
//
// Solidity: function getname(uint256 tokenid) view returns(string)
func (_Sbt *SbtCallerSession) Getname(tokenid *big.Int) (string, error) {
	return _Sbt.Contract.Getname(&_Sbt.CallOpts, tokenid)
}

// Getsymbol is a free data retrieval call binding the contract method 0xcc9b1310.
//
// Solidity: function getsymbol(uint256 tokenid) view returns(string)
func (_Sbt *SbtCaller) Getsymbol(opts *bind.CallOpts, tokenid *big.Int) (string, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "getsymbol", tokenid)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Getsymbol is a free data retrieval call binding the contract method 0xcc9b1310.
//
// Solidity: function getsymbol(uint256 tokenid) view returns(string)
func (_Sbt *SbtSession) Getsymbol(tokenid *big.Int) (string, error) {
	return _Sbt.Contract.Getsymbol(&_Sbt.CallOpts, tokenid)
}

// Getsymbol is a free data retrieval call binding the contract method 0xcc9b1310.
//
// Solidity: function getsymbol(uint256 tokenid) view returns(string)
func (_Sbt *SbtCallerSession) Getsymbol(tokenid *big.Int) (string, error) {
	return _Sbt.Contract.Getsymbol(&_Sbt.CallOpts, tokenid)
}

// Gettotalamount is a free data retrieval call binding the contract method 0x163c63d1.
//
// Solidity: function gettotalamount(uint256 tokenid) view returns(uint256)
func (_Sbt *SbtCaller) Gettotalamount(opts *bind.CallOpts, tokenid *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "gettotalamount", tokenid)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Gettotalamount is a free data retrieval call binding the contract method 0x163c63d1.
//
// Solidity: function gettotalamount(uint256 tokenid) view returns(uint256)
func (_Sbt *SbtSession) Gettotalamount(tokenid *big.Int) (*big.Int, error) {
	return _Sbt.Contract.Gettotalamount(&_Sbt.CallOpts, tokenid)
}

// Gettotalamount is a free data retrieval call binding the contract method 0x163c63d1.
//
// Solidity: function gettotalamount(uint256 tokenid) view returns(uint256)
func (_Sbt *SbtCallerSession) Gettotalamount(tokenid *big.Int) (*big.Int, error) {
	return _Sbt.Contract.Gettotalamount(&_Sbt.CallOpts, tokenid)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address , address ) view returns(bool)
func (_Sbt *SbtCaller) IsApprovedForAll(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (bool, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "isApprovedForAll", arg0, arg1)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address , address ) view returns(bool)
func (_Sbt *SbtSession) IsApprovedForAll(arg0 common.Address, arg1 common.Address) (bool, error) {
	return _Sbt.Contract.IsApprovedForAll(&_Sbt.CallOpts, arg0, arg1)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address , address ) view returns(bool)
func (_Sbt *SbtCallerSession) IsApprovedForAll(arg0 common.Address, arg1 common.Address) (bool, error) {
	return _Sbt.Contract.IsApprovedForAll(&_Sbt.CallOpts, arg0, arg1)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Sbt *SbtCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Sbt *SbtSession) Owner() (common.Address, error) {
	return _Sbt.Contract.Owner(&_Sbt.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Sbt *SbtCallerSession) Owner() (common.Address, error) {
	return _Sbt.Contract.Owner(&_Sbt.CallOpts)
}

// SafeTransferFrom is a free data retrieval call binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address , address , uint256 , uint256 , bytes ) pure returns()
func (_Sbt *SbtCaller) SafeTransferFrom(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) error {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "safeTransferFrom", arg0, arg1, arg2, arg3, arg4)

	if err != nil {
		return err
	}

	return err

}

// SafeTransferFrom is a free data retrieval call binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address , address , uint256 , uint256 , bytes ) pure returns()
func (_Sbt *SbtSession) SafeTransferFrom(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) error {
	return _Sbt.Contract.SafeTransferFrom(&_Sbt.CallOpts, arg0, arg1, arg2, arg3, arg4)
}

// SafeTransferFrom is a free data retrieval call binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address , address , uint256 , uint256 , bytes ) pure returns()
func (_Sbt *SbtCallerSession) SafeTransferFrom(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) error {
	return _Sbt.Contract.SafeTransferFrom(&_Sbt.CallOpts, arg0, arg1, arg2, arg3, arg4)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Sbt *SbtCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Sbt *SbtSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Sbt.Contract.SupportsInterface(&_Sbt.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Sbt *SbtCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Sbt.Contract.SupportsInterface(&_Sbt.CallOpts, interfaceId)
}

// TokenIDInfo is a free data retrieval call binding the contract method 0x3aa40d3e.
//
// Solidity: function tokenIDInfo(uint256 ) view returns(uint256 tokenid, uint256 minted, uint256 totalamount, string name, string symbol, string url, int256 allow)
func (_Sbt *SbtCaller) TokenIDInfo(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Tokenid     *big.Int
	Minted      *big.Int
	Totalamount *big.Int
	Name        string
	Symbol      string
	Url         string
	Allow       *big.Int
}, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "tokenIDInfo", arg0)

	outstruct := new(struct {
		Tokenid     *big.Int
		Minted      *big.Int
		Totalamount *big.Int
		Name        string
		Symbol      string
		Url         string
		Allow       *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Tokenid = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Minted = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Totalamount = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Name = *abi.ConvertType(out[3], new(string)).(*string)
	outstruct.Symbol = *abi.ConvertType(out[4], new(string)).(*string)
	outstruct.Url = *abi.ConvertType(out[5], new(string)).(*string)
	outstruct.Allow = *abi.ConvertType(out[6], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// TokenIDInfo is a free data retrieval call binding the contract method 0x3aa40d3e.
//
// Solidity: function tokenIDInfo(uint256 ) view returns(uint256 tokenid, uint256 minted, uint256 totalamount, string name, string symbol, string url, int256 allow)
func (_Sbt *SbtSession) TokenIDInfo(arg0 *big.Int) (struct {
	Tokenid     *big.Int
	Minted      *big.Int
	Totalamount *big.Int
	Name        string
	Symbol      string
	Url         string
	Allow       *big.Int
}, error) {
	return _Sbt.Contract.TokenIDInfo(&_Sbt.CallOpts, arg0)
}

// TokenIDInfo is a free data retrieval call binding the contract method 0x3aa40d3e.
//
// Solidity: function tokenIDInfo(uint256 ) view returns(uint256 tokenid, uint256 minted, uint256 totalamount, string name, string symbol, string url, int256 allow)
func (_Sbt *SbtCallerSession) TokenIDInfo(arg0 *big.Int) (struct {
	Tokenid     *big.Int
	Minted      *big.Int
	Totalamount *big.Int
	Name        string
	Symbol      string
	Url         string
	Allow       *big.Int
}, error) {
	return _Sbt.Contract.TokenIDInfo(&_Sbt.CallOpts, arg0)
}

// TokenIDsInfo is a free data retrieval call binding the contract method 0x2a6e10c8.
//
// Solidity: function tokenIDsInfo(uint256[] _tokenIDs) view returns((uint256,uint256,uint256,string,string,string,int256)[])
func (_Sbt *SbtCaller) TokenIDsInfo(opts *bind.CallOpts, _tokenIDs []*big.Int) ([]SBTTokenInfo, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "tokenIDsInfo", _tokenIDs)

	if err != nil {
		return *new([]SBTTokenInfo), err
	}

	out0 := *abi.ConvertType(out[0], new([]SBTTokenInfo)).(*[]SBTTokenInfo)

	return out0, err

}

// TokenIDsInfo is a free data retrieval call binding the contract method 0x2a6e10c8.
//
// Solidity: function tokenIDsInfo(uint256[] _tokenIDs) view returns((uint256,uint256,uint256,string,string,string,int256)[])
func (_Sbt *SbtSession) TokenIDsInfo(_tokenIDs []*big.Int) ([]SBTTokenInfo, error) {
	return _Sbt.Contract.TokenIDsInfo(&_Sbt.CallOpts, _tokenIDs)
}

// TokenIDsInfo is a free data retrieval call binding the contract method 0x2a6e10c8.
//
// Solidity: function tokenIDsInfo(uint256[] _tokenIDs) view returns((uint256,uint256,uint256,string,string,string,int256)[])
func (_Sbt *SbtCallerSession) TokenIDsInfo(_tokenIDs []*big.Int) ([]SBTTokenInfo, error) {
	return _Sbt.Contract.TokenIDsInfo(&_Sbt.CallOpts, _tokenIDs)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 tokenid) view returns(string)
func (_Sbt *SbtCaller) Uri(opts *bind.CallOpts, tokenid *big.Int) (string, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "uri", tokenid)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 tokenid) view returns(string)
func (_Sbt *SbtSession) Uri(tokenid *big.Int) (string, error) {
	return _Sbt.Contract.Uri(&_Sbt.CallOpts, tokenid)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 tokenid) view returns(string)
func (_Sbt *SbtCallerSession) Uri(tokenid *big.Int) (string, error) {
	return _Sbt.Contract.Uri(&_Sbt.CallOpts, tokenid)
}

// Batchmint is a paid mutator transaction binding the contract method 0x9465ffa9.
//
// Solidity: function batchmint(address[] receiver, uint256[] tokenid, uint256[] amount) returns()
func (_Sbt *SbtTransactor) Batchmint(opts *bind.TransactOpts, receiver []common.Address, tokenid []*big.Int, amount []*big.Int) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "batchmint", receiver, tokenid, amount)
}

// Batchmint is a paid mutator transaction binding the contract method 0x9465ffa9.
//
// Solidity: function batchmint(address[] receiver, uint256[] tokenid, uint256[] amount) returns()
func (_Sbt *SbtSession) Batchmint(receiver []common.Address, tokenid []*big.Int, amount []*big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.Batchmint(&_Sbt.TransactOpts, receiver, tokenid, amount)
}

// Batchmint is a paid mutator transaction binding the contract method 0x9465ffa9.
//
// Solidity: function batchmint(address[] receiver, uint256[] tokenid, uint256[] amount) returns()
func (_Sbt *SbtTransactorSession) Batchmint(receiver []common.Address, tokenid []*big.Int, amount []*big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.Batchmint(&_Sbt.TransactOpts, receiver, tokenid, amount)
}

// Burn is a paid mutator transaction binding the contract method 0xb390c0ab.
//
// Solidity: function burn(uint256 tokenid, uint256 amount) returns()
func (_Sbt *SbtTransactor) Burn(opts *bind.TransactOpts, tokenid *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "burn", tokenid, amount)
}

// Burn is a paid mutator transaction binding the contract method 0xb390c0ab.
//
// Solidity: function burn(uint256 tokenid, uint256 amount) returns()
func (_Sbt *SbtSession) Burn(tokenid *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.Burn(&_Sbt.TransactOpts, tokenid, amount)
}

// Burn is a paid mutator transaction binding the contract method 0xb390c0ab.
//
// Solidity: function burn(uint256 tokenid, uint256 amount) returns()
func (_Sbt *SbtTransactorSession) Burn(tokenid *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.Burn(&_Sbt.TransactOpts, tokenid, amount)
}

// CloseMint is a paid mutator transaction binding the contract method 0xc68ac6b0.
//
// Solidity: function closeMint(uint256 tokenid) returns()
func (_Sbt *SbtTransactor) CloseMint(opts *bind.TransactOpts, tokenid *big.Int) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "closeMint", tokenid)
}

// CloseMint is a paid mutator transaction binding the contract method 0xc68ac6b0.
//
// Solidity: function closeMint(uint256 tokenid) returns()
func (_Sbt *SbtSession) CloseMint(tokenid *big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.CloseMint(&_Sbt.TransactOpts, tokenid)
}

// CloseMint is a paid mutator transaction binding the contract method 0xc68ac6b0.
//
// Solidity: function closeMint(uint256 tokenid) returns()
func (_Sbt *SbtTransactorSession) CloseMint(tokenid *big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.CloseMint(&_Sbt.TransactOpts, tokenid)
}

// Mint is a paid mutator transaction binding the contract method 0x156e29f6.
//
// Solidity: function mint(address receiver, uint256 tokenid, uint256 amount) returns()
func (_Sbt *SbtTransactor) Mint(opts *bind.TransactOpts, receiver common.Address, tokenid *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "mint", receiver, tokenid, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x156e29f6.
//
// Solidity: function mint(address receiver, uint256 tokenid, uint256 amount) returns()
func (_Sbt *SbtSession) Mint(receiver common.Address, tokenid *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.Mint(&_Sbt.TransactOpts, receiver, tokenid, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x156e29f6.
//
// Solidity: function mint(address receiver, uint256 tokenid, uint256 amount) returns()
func (_Sbt *SbtTransactorSession) Mint(receiver common.Address, tokenid *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.Mint(&_Sbt.TransactOpts, receiver, tokenid, amount)
}

// OpenMint is a paid mutator transaction binding the contract method 0x4287084f.
//
// Solidity: function openMint(uint256 tokenid) returns()
func (_Sbt *SbtTransactor) OpenMint(opts *bind.TransactOpts, tokenid *big.Int) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "openMint", tokenid)
}

// OpenMint is a paid mutator transaction binding the contract method 0x4287084f.
//
// Solidity: function openMint(uint256 tokenid) returns()
func (_Sbt *SbtSession) OpenMint(tokenid *big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.OpenMint(&_Sbt.TransactOpts, tokenid)
}

// OpenMint is a paid mutator transaction binding the contract method 0x4287084f.
//
// Solidity: function openMint(uint256 tokenid) returns()
func (_Sbt *SbtTransactorSession) OpenMint(tokenid *big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.OpenMint(&_Sbt.TransactOpts, tokenid)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address , address , uint256[] , uint256[] , bytes ) returns()
func (_Sbt *SbtTransactor) SafeBatchTransferFrom(opts *bind.TransactOpts, arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "safeBatchTransferFrom", arg0, arg1, arg2, arg3, arg4)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address , address , uint256[] , uint256[] , bytes ) returns()
func (_Sbt *SbtSession) SafeBatchTransferFrom(arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) (*types.Transaction, error) {
	return _Sbt.Contract.SafeBatchTransferFrom(&_Sbt.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address , address , uint256[] , uint256[] , bytes ) returns()
func (_Sbt *SbtTransactorSession) SafeBatchTransferFrom(arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) (*types.Transaction, error) {
	return _Sbt.Contract.SafeBatchTransferFrom(&_Sbt.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address , bool ) returns()
func (_Sbt *SbtTransactor) SetApprovalForAll(opts *bind.TransactOpts, arg0 common.Address, arg1 bool) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "setApprovalForAll", arg0, arg1)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address , bool ) returns()
func (_Sbt *SbtSession) SetApprovalForAll(arg0 common.Address, arg1 bool) (*types.Transaction, error) {
	return _Sbt.Contract.SetApprovalForAll(&_Sbt.TransactOpts, arg0, arg1)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address , bool ) returns()
func (_Sbt *SbtTransactorSession) SetApprovalForAll(arg0 common.Address, arg1 bool) (*types.Transaction, error) {
	return _Sbt.Contract.SetApprovalForAll(&_Sbt.TransactOpts, arg0, arg1)
}

// SettokenIDInfo is a paid mutator transaction binding the contract method 0x5b5c45f3.
//
// Solidity: function settokenIDInfo(uint256 tokenid, uint256 totalamount, string name, string symbol, string url) returns()
func (_Sbt *SbtTransactor) SettokenIDInfo(opts *bind.TransactOpts, tokenid *big.Int, totalamount *big.Int, name string, symbol string, url string) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "settokenIDInfo", tokenid, totalamount, name, symbol, url)
}

// SettokenIDInfo is a paid mutator transaction binding the contract method 0x5b5c45f3.
//
// Solidity: function settokenIDInfo(uint256 tokenid, uint256 totalamount, string name, string symbol, string url) returns()
func (_Sbt *SbtSession) SettokenIDInfo(tokenid *big.Int, totalamount *big.Int, name string, symbol string, url string) (*types.Transaction, error) {
	return _Sbt.Contract.SettokenIDInfo(&_Sbt.TransactOpts, tokenid, totalamount, name, symbol, url)
}

// SettokenIDInfo is a paid mutator transaction binding the contract method 0x5b5c45f3.
//
// Solidity: function settokenIDInfo(uint256 tokenid, uint256 totalamount, string name, string symbol, string url) returns()
func (_Sbt *SbtTransactorSession) SettokenIDInfo(tokenid *big.Int, totalamount *big.Int, name string, symbol string, url string) (*types.Transaction, error) {
	return _Sbt.Contract.SettokenIDInfo(&_Sbt.TransactOpts, tokenid, totalamount, name, symbol, url)
}

// UpdateNameSymbol is a paid mutator transaction binding the contract method 0x1829f456.
//
// Solidity: function updateNameSymbol(uint256 tokenid, string name, string symbol) returns()
func (_Sbt *SbtTransactor) UpdateNameSymbol(opts *bind.TransactOpts, tokenid *big.Int, name string, symbol string) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "updateNameSymbol", tokenid, name, symbol)
}

// UpdateNameSymbol is a paid mutator transaction binding the contract method 0x1829f456.
//
// Solidity: function updateNameSymbol(uint256 tokenid, string name, string symbol) returns()
func (_Sbt *SbtSession) UpdateNameSymbol(tokenid *big.Int, name string, symbol string) (*types.Transaction, error) {
	return _Sbt.Contract.UpdateNameSymbol(&_Sbt.TransactOpts, tokenid, name, symbol)
}

// UpdateNameSymbol is a paid mutator transaction binding the contract method 0x1829f456.
//
// Solidity: function updateNameSymbol(uint256 tokenid, string name, string symbol) returns()
func (_Sbt *SbtTransactorSession) UpdateNameSymbol(tokenid *big.Int, name string, symbol string) (*types.Transaction, error) {
	return _Sbt.Contract.UpdateNameSymbol(&_Sbt.TransactOpts, tokenid, name, symbol)
}

// UpdateOwner is a paid mutator transaction binding the contract method 0x880cdc31.
//
// Solidity: function updateOwner(address newowner) returns()
func (_Sbt *SbtTransactor) UpdateOwner(opts *bind.TransactOpts, newowner common.Address) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "updateOwner", newowner)
}

// UpdateOwner is a paid mutator transaction binding the contract method 0x880cdc31.
//
// Solidity: function updateOwner(address newowner) returns()
func (_Sbt *SbtSession) UpdateOwner(newowner common.Address) (*types.Transaction, error) {
	return _Sbt.Contract.UpdateOwner(&_Sbt.TransactOpts, newowner)
}

// UpdateOwner is a paid mutator transaction binding the contract method 0x880cdc31.
//
// Solidity: function updateOwner(address newowner) returns()
func (_Sbt *SbtTransactorSession) UpdateOwner(newowner common.Address) (*types.Transaction, error) {
	return _Sbt.Contract.UpdateOwner(&_Sbt.TransactOpts, newowner)
}

// UpdateTotalAmount is a paid mutator transaction binding the contract method 0xfa82aa5f.
//
// Solidity: function updateTotalAmount(uint256 tokenid, uint256 totalamount) returns()
func (_Sbt *SbtTransactor) UpdateTotalAmount(opts *bind.TransactOpts, tokenid *big.Int, totalamount *big.Int) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "updateTotalAmount", tokenid, totalamount)
}

// UpdateTotalAmount is a paid mutator transaction binding the contract method 0xfa82aa5f.
//
// Solidity: function updateTotalAmount(uint256 tokenid, uint256 totalamount) returns()
func (_Sbt *SbtSession) UpdateTotalAmount(tokenid *big.Int, totalamount *big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.UpdateTotalAmount(&_Sbt.TransactOpts, tokenid, totalamount)
}

// UpdateTotalAmount is a paid mutator transaction binding the contract method 0xfa82aa5f.
//
// Solidity: function updateTotalAmount(uint256 tokenid, uint256 totalamount) returns()
func (_Sbt *SbtTransactorSession) UpdateTotalAmount(tokenid *big.Int, totalamount *big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.UpdateTotalAmount(&_Sbt.TransactOpts, tokenid, totalamount)
}

// UpdateURL is a paid mutator transaction binding the contract method 0xe144976e.
//
// Solidity: function updateURL(uint256 tokenid, string url) returns()
func (_Sbt *SbtTransactor) UpdateURL(opts *bind.TransactOpts, tokenid *big.Int, url string) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "updateURL", tokenid, url)
}

// UpdateURL is a paid mutator transaction binding the contract method 0xe144976e.
//
// Solidity: function updateURL(uint256 tokenid, string url) returns()
func (_Sbt *SbtSession) UpdateURL(tokenid *big.Int, url string) (*types.Transaction, error) {
	return _Sbt.Contract.UpdateURL(&_Sbt.TransactOpts, tokenid, url)
}

// UpdateURL is a paid mutator transaction binding the contract method 0xe144976e.
//
// Solidity: function updateURL(uint256 tokenid, string url) returns()
func (_Sbt *SbtTransactorSession) UpdateURL(tokenid *big.Int, url string) (*types.Transaction, error) {
	return _Sbt.Contract.UpdateURL(&_Sbt.TransactOpts, tokenid, url)
}

// SbtApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the Sbt contract.
type SbtApprovalForAllIterator struct {
	Event *SbtApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SbtApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SbtApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SbtApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SbtApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SbtApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SbtApprovalForAll represents a ApprovalForAll event raised by the Sbt contract.
type SbtApprovalForAll struct {
	Account  common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_Sbt *SbtFilterer) FilterApprovalForAll(opts *bind.FilterOpts, account []common.Address, operator []common.Address) (*SbtApprovalForAllIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Sbt.contract.FilterLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &SbtApprovalForAllIterator{contract: _Sbt.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_Sbt *SbtFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *SbtApprovalForAll, account []common.Address, operator []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Sbt.contract.WatchLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SbtApprovalForAll)
				if err := _Sbt.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_Sbt *SbtFilterer) ParseApprovalForAll(log types.Log) (*SbtApprovalForAll, error) {
	event := new(SbtApprovalForAll)
	if err := _Sbt.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SbtTransferBatchIterator is returned from FilterTransferBatch and is used to iterate over the raw logs and unpacked data for TransferBatch events raised by the Sbt contract.
type SbtTransferBatchIterator struct {
	Event *SbtTransferBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SbtTransferBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SbtTransferBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SbtTransferBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SbtTransferBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SbtTransferBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SbtTransferBatch represents a TransferBatch event raised by the Sbt contract.
type SbtTransferBatch struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Ids      []*big.Int
	Values   []*big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferBatch is a free log retrieval operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_Sbt *SbtFilterer) FilterTransferBatch(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*SbtTransferBatchIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Sbt.contract.FilterLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &SbtTransferBatchIterator{contract: _Sbt.contract, event: "TransferBatch", logs: logs, sub: sub}, nil
}

// WatchTransferBatch is a free log subscription operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_Sbt *SbtFilterer) WatchTransferBatch(opts *bind.WatchOpts, sink chan<- *SbtTransferBatch, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Sbt.contract.WatchLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SbtTransferBatch)
				if err := _Sbt.contract.UnpackLog(event, "TransferBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferBatch is a log parse operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_Sbt *SbtFilterer) ParseTransferBatch(log types.Log) (*SbtTransferBatch, error) {
	event := new(SbtTransferBatch)
	if err := _Sbt.contract.UnpackLog(event, "TransferBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SbtTransferSingleIterator is returned from FilterTransferSingle and is used to iterate over the raw logs and unpacked data for TransferSingle events raised by the Sbt contract.
type SbtTransferSingleIterator struct {
	Event *SbtTransferSingle // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SbtTransferSingleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SbtTransferSingle)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SbtTransferSingle)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SbtTransferSingleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SbtTransferSingleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SbtTransferSingle represents a TransferSingle event raised by the Sbt contract.
type SbtTransferSingle struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Id       *big.Int
	Value    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferSingle is a free log retrieval operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_Sbt *SbtFilterer) FilterTransferSingle(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*SbtTransferSingleIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Sbt.contract.FilterLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &SbtTransferSingleIterator{contract: _Sbt.contract, event: "TransferSingle", logs: logs, sub: sub}, nil
}

// WatchTransferSingle is a free log subscription operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_Sbt *SbtFilterer) WatchTransferSingle(opts *bind.WatchOpts, sink chan<- *SbtTransferSingle, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Sbt.contract.WatchLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SbtTransferSingle)
				if err := _Sbt.contract.UnpackLog(event, "TransferSingle", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferSingle is a log parse operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_Sbt *SbtFilterer) ParseTransferSingle(log types.Log) (*SbtTransferSingle, error) {
	event := new(SbtTransferSingle)
	if err := _Sbt.contract.UnpackLog(event, "TransferSingle", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SbtURIIterator is returned from FilterURI and is used to iterate over the raw logs and unpacked data for URI events raised by the Sbt contract.
type SbtURIIterator struct {
	Event *SbtURI // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SbtURIIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SbtURI)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SbtURI)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SbtURIIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SbtURIIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SbtURI represents a URI event raised by the Sbt contract.
type SbtURI struct {
	Value string
	Id    *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterURI is a free log retrieval operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_Sbt *SbtFilterer) FilterURI(opts *bind.FilterOpts, id []*big.Int) (*SbtURIIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _Sbt.contract.FilterLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return &SbtURIIterator{contract: _Sbt.contract, event: "URI", logs: logs, sub: sub}, nil
}

// WatchURI is a free log subscription operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_Sbt *SbtFilterer) WatchURI(opts *bind.WatchOpts, sink chan<- *SbtURI, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _Sbt.contract.WatchLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SbtURI)
				if err := _Sbt.contract.UnpackLog(event, "URI", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseURI is a log parse operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_Sbt *SbtFilterer) ParseURI(log types.Log) (*SbtURI, error) {
	event := new(SbtURI)
	if err := _Sbt.contract.UnpackLog(event, "URI", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
