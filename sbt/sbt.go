// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package sbt

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// SBTTokenInfo is an auto generated low-level Go binding around an user-defined struct.
type SBTTokenInfo struct {
	Tokenid     *big.Int
	Minted      *big.Int
	Totalamount *big.Int
	Name        string
	Symbol      string
	Url         string
	Allow       *big.Int
}

// SbtMetaData contains all meta data concerning the Sbt contract.
var SbtMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TokenIDs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"account\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"id\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"batchmint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"closeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"getminted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"getname\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"getsymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"gettotalamount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalamount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"settokenIDInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIDInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalamount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"int256\",\"name\":\"allow\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIDs\",\"type\":\"uint256[]\"}],\"name\":\"tokenIDsInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalamount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"int256\",\"name\":\"allow\",\"type\":\"int256\"}],\"internalType\":\"structSBT.TokenInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"updateNameSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newowner\",\"type\":\"address\"}],\"name\":\"updateOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalamount\",\"type\":\"uint256\"}],\"name\":\"updateTotalAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"updateURL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60806040526040518060200160405280600081525062000025816200006d60201b60201c565b5033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620003e3565b80600290816200007e9190620002fc565b5050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200010457607f821691505b6020821081036200011a5762000119620000bc565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620001847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000145565b62000190868362000145565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620001dd620001d7620001d184620001a8565b620001b2565b620001a8565b9050919050565b6000819050919050565b620001f983620001bc565b620002116200020882620001e4565b84845462000152565b825550505050565b600090565b6200022862000219565b62000235818484620001ee565b505050565b5b818110156200025d57620002516000826200021e565b6001810190506200023b565b5050565b601f821115620002ac57620002768162000120565b620002818462000135565b8101602085101562000291578190505b620002a9620002a08562000135565b8301826200023a565b50505b505050565b600082821c905092915050565b6000620002d160001984600802620002b1565b1980831691505092915050565b6000620002ec8383620002be565b9150826002028217905092915050565b620003078262000082565b67ffffffffffffffff8111156200032357620003226200008d565b5b6200032f8254620000eb565b6200033c82828562000261565b600060209050601f8311600181146200037457600084156200035f578287015190505b6200036b8582620002de565b865550620003db565b601f198416620003848662000120565b60005b82811015620003ae5784890151825560018201915060208501945060208101905062000387565b86831015620003ce5784890151620003ca601f891682620002be565b8355505b6001600288020188555050505b505050505050565b61411f80620003f36000396000f3fe608060405234801561001057600080fd5b50600436106101725760003560e01c80635b5c45f3116100de578063b390c0ab11610097578063e144976e11610071578063e144976e14610495578063e985e9c5146104b1578063f242432a146104e1578063fa82aa5f146104fd57610172565b8063b390c0ab1461042d578063c68ac6b014610449578063cc9b13101461046557610172565b80635b5c45f314610381578063880cdc311461039d5780638da5cb5b146103b95780639465ffa9146103d7578063a22cb465146103f3578063a3945ad31461040f57610172565b80631829f456116101305780631829f456146102835780632a6e10c81461029f5780632eb2c2d6146102cf5780633aa40d3e146102eb578063413f818b146103215780634e1273f41461035157610172565b8062fdd58e1461017757806301ffc9a7146101a75780630202ace1146101d75780630e89341c14610207578063156e29f614610237578063163c63d114610253575b600080fd5b610191600480360381019061018c91906126ed565b610519565b60405161019e919061273c565b60405180910390f35b6101c160048036038101906101bc91906127af565b610573565b6040516101ce91906127f7565b60405180910390f35b6101f160048036038101906101ec9190612812565b610655565b6040516101fe91906128cf565b60405180910390f35b610221600480360381019061021c9190612812565b6106fd565b60405161022e91906128cf565b60405180910390f35b610251600480360381019061024c91906128f1565b6107a5565b005b61026d60048036038101906102689190612812565b6109b0565b60405161027a919061273c565b60405180910390f35b61029d60048036038101906102989190612a79565b6109d0565b005b6102b960048036038101906102b49190612b64565b610b06565b6040516102c69190612d8f565b60405180910390f35b6102e960048036038101906102e49190612f15565b610dc2565b005b61030560048036038101906103009190612812565b610dfd565b6040516103189796959493929190612ff3565b60405180910390f35b61033b60048036038101906103369190612812565b610fd7565b604051610348919061273c565b60405180910390f35b61036b6004803603810190610366919061313a565b610ff7565b6040516103789190613261565b60405180910390f35b61039b60048036038101906103969190613283565b611106565b005b6103b760048036038101906103b29190613352565b6112da565b005b6103c161141d565b6040516103ce919061338e565b60405180910390f35b6103f160048036038101906103ec91906133a9565b611443565b005b61040d6004803603810190610408919061347c565b6116e3565b005b61041761171e565b6040516104249190613261565b60405180910390f35b610447600480360381019061044291906134bc565b611776565b005b610463600480360381019061045e9190612812565b6117b2565b005b61047f600480360381019061047a9190612812565b6118ba565b60405161048c91906128cf565b60405180910390f35b6104af60048036038101906104aa91906134fc565b611962565b005b6104cb60048036038101906104c69190613558565b611a73565b6040516104d891906127f7565b60405180910390f35b6104fb60048036038101906104f69190613598565b611ab0565b005b610517600480360381019061051291906134bc565b611aeb565b005b600080600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061063e57507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061064e575061064d82611c36565b5b9050919050565b60606004600083815260200190815260200160002060030180546106789061365e565b80601f01602080910402602001604051908101604052809291908181526020018280546106a49061365e565b80156106f15780601f106106c6576101008083540402835291602001916106f1565b820191906000526020600020905b8154815290600101906020018083116106d457829003601f168201915b50505050509050919050565b60606004600083815260200190815260200160002060050180546107209061365e565b80601f016020809104026020016040519081016040528092919081815260200182805461074c9061365e565b80156107995780601f1061076e57610100808354040283529160200191610799565b820191906000526020600020905b81548152906001019060200180831161077c57829003601f168201915b50505050509050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610835576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082c906136db565b60405180910390fd5b81600060046000838152602001908152602001600020600601540361088f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108869061376d565b60405180910390fd5b60006004600085815260200190815260200160002060020154036108e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108df906137d9565b60405180910390fd5b60046000848152602001908152602001600020600201548260046000868152602001908152602001600020600101546109219190613828565b1115610962576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610959906138a8565b60405180910390fd5b816004600085815260200190815260200160002060010160008282546109889190613828565b925050819055506109aa84848460405180602001604052806000815250611ca0565b50505050565b600060046000838152602001908152602001600020600201549050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a57906136db565b60405180910390fd5b6000600460008581526020019081526020016000206002015403610ab9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab0906137d9565b60405180910390fd5b81600460008581526020019081526020016000206003019081610adc9190613a74565b5080600460008581526020019081526020016000206004019081610b009190613a74565b50505050565b606060008383905067ffffffffffffffff811115610b2757610b2661294e565b5b604051908082528060200260200182016040528015610b6057816020015b610b4d612608565b815260200190600190039081610b455790505b50905060005b84849050811015610db75760046000868684818110610b8857610b87613b46565b5b9050602002013581526020019081526020016000206040518060e0016040529081600082015481526020016001820154815260200160028201548152602001600382018054610bd69061365e565b80601f0160208091040260200160405190810160405280929190818152602001828054610c029061365e565b8015610c4f5780601f10610c2457610100808354040283529160200191610c4f565b820191906000526020600020905b815481529060010190602001808311610c3257829003601f168201915b50505050508152602001600482018054610c689061365e565b80601f0160208091040260200160405190810160405280929190818152602001828054610c949061365e565b8015610ce15780601f10610cb657610100808354040283529160200191610ce1565b820191906000526020600020905b815481529060010190602001808311610cc457829003601f168201915b50505050508152602001600582018054610cfa9061365e565b80601f0160208091040260200160405190810160405280929190818152602001828054610d269061365e565b8015610d735780601f10610d4857610100808354040283529160200191610d73565b820191906000526020600020905b815481529060010190602001808311610d5657829003601f168201915b50505050508152602001600682015481525050828281518110610d9957610d98613b46565b5b60200260200101819052508080610daf90613b75565b915050610b66565b508091505092915050565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df490613c2f565b60405180910390fd5b6004602052806000526040600020600091509050806000015490806001015490806002015490806003018054610e329061365e565b80601f0160208091040260200160405190810160405280929190818152602001828054610e5e9061365e565b8015610eab5780601f10610e8057610100808354040283529160200191610eab565b820191906000526020600020905b815481529060010190602001808311610e8e57829003601f168201915b505050505090806004018054610ec09061365e565b80601f0160208091040260200160405190810160405280929190818152602001828054610eec9061365e565b8015610f395780601f10610f0e57610100808354040283529160200191610f39565b820191906000526020600020905b815481529060010190602001808311610f1c57829003601f168201915b505050505090806005018054610f4e9061365e565b80601f0160208091040260200160405190810160405280929190818152602001828054610f7a9061365e565b8015610fc75780601f10610f9c57610100808354040283529160200191610fc7565b820191906000526020600020905b815481529060010190602001808311610faa57829003601f168201915b5050505050908060060154905087565b600060046000838152602001908152602001600020600101549050919050565b6060815183511461104357815183516040517f5b05999100000000000000000000000000000000000000000000000000000000815260040161103a929190613c4f565b60405180910390fd5b6000835167ffffffffffffffff8111156110605761105f61294e565b5b60405190808252806020026020018201604052801561108e5781602001602082028036833780820191505090505b50905060005b84518110156110fb576110cb6110b38287611d3990919063ffffffff16565b6110c68387611d4d90919063ffffffff16565b610519565b8282815181106110de576110dd613b46565b5b602002602001018181525050806110f490613b75565b9050611094565b508091505092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611196576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118d906136db565b60405180910390fd5b60006004600087815260200190815260200160002060020154146111ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e690613cc4565b60405180910390fd5b60006040518060e0016040528087815260200160008152602001868152602001858152602001848152602001838152602001600181525090508060046000888152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301908161126f9190613a74565b5060808201518160040190816112859190613a74565b5060a082015181600501908161129b9190613a74565b5060c082015181600601559050506005869080600181540180825580915050600190039060005260206000200160009091909190915055505050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461136a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611361906136db565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036113d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d090613d30565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146114d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ca906136db565b60405180910390fd5b60008351141580156114e6575080518351145b611525576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151c90613dc2565b60405180910390fd5b60018251036115ad5760005b83518110156115a7576115948482815181106115505761154f613b46565b5b60200260200101518460008151811061156c5761156b613b46565b5b602002602001015184848151811061158757611586613b46565b5b60200260200101516107a5565b808061159f90613b75565b915050611531565b506116de565b81518351146115f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115e890613e54565b60405180910390fd5b60005b83518110156116dc5760006004600085848151811061161657611615613b46565b5b602002602001015181526020019081526020016000206006015403611670576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116679061376d565b60405180910390fd5b6116c984828151811061168657611685613b46565b5b60200260200101518483815181106116a1576116a0613b46565b5b60200260200101518484815181106116bc576116bb613b46565b5b60200260200101516107a5565b80806116d490613b75565b9150506115f4565b505b505050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171590613c2f565b60405180910390fd5b6060600580548060200260200160405190810160405280929190818152602001828054801561176c57602002820191906000526020600020905b815481526020019060010190808311611758575b5050505050905090565b8060046000848152602001908152602001600020600101600082825461179c9190613e74565b925050819055506117ae338383611d61565b5050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611842576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611839906136db565b60405180910390fd5b600060046000838152602001908152602001600020600201540361189b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611892906137d9565b60405180910390fd5b6000600460008381526020019081526020016000206006018190555050565b60606004600083815260200190815260200160002060040180546118dd9061365e565b80601f01602080910402602001604051908101604052809291908181526020018280546119099061365e565b80156119565780601f1061192b57610100808354040283529160200191611956565b820191906000526020600020905b81548152906001019060200180831161193957829003601f168201915b50505050509050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146119f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119e9906136db565b60405180910390fd5b6000600460008481526020019081526020016000206002015403611a4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a42906137d9565b60405180910390fd5b80600460008481526020019081526020016000206005019081611a6e9190613a74565b505050565b60006040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aa790613c2f565b60405180910390fd5b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ae290613c2f565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611b7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b72906136db565b60405180910390fd5b6000600460008481526020019081526020016000206002015403611bd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bcb906137d9565b60405180910390fd5b60008103611c17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c0e90613ef4565b60405180910390fd5b8060046000848152602001908152602001600020600201819055505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611d125760006040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401611d09919061338e565b60405180910390fd5b600080611d1f8585611e08565b91509150611d31600087848487611e38565b505050505050565b600060208202602084010151905092915050565b600060208202602084010151905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611dd35760006040517f01a83514000000000000000000000000000000000000000000000000000000008152600401611dca919061338e565b60405180910390fd5b600080611de08484611e08565b91509150611e01856000848460405180602001604052806000815250611e38565b5050505050565b60608060405191506001825283602083015260408201905060018152826020820152604081016040529250929050565b611e4485858585611eea565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614611ee3576000611e82612298565b90506001845103611ed2576000611ea3600086611d4d90919063ffffffff16565b90506000611ebb600086611d4d90919063ffffffff16565b9050611ecb8389898585896122a0565b5050611ee1565b611ee0818787878787612454565b5b505b5050505050565b8051825114611f3457815181516040517f5b059991000000000000000000000000000000000000000000000000000000008152600401611f2b929190613c4f565b60405180910390fd5b6000611f3e612298565b905060005b8351811015612153576000611f618286611d4d90919063ffffffff16565b90506000611f788386611d4d90919063ffffffff16565b9050600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16146120a557600080600084815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561204d57888183856040517f03dee4c50000000000000000000000000000000000000000000000000000000081526004016120449493929190613f14565b60405180910390fd5b81810360008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614612140578060008084815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546121389190613828565b925050819055505b50508061214c90613b75565b9050611f43565b506001835103612212576000612173600085611d4d90919063ffffffff16565b9050600061218b600085611d4d90919063ffffffff16565b90508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628585604051612203929190613c4f565b60405180910390a45050612291565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051612288929190613f59565b60405180910390a45b5050505050565b600033905090565b60008473ffffffffffffffffffffffffffffffffffffffff163b111561244c578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401612301959493929190613fe5565b6020604051808303816000875af192505050801561233d57506040513d601f19601f8201168201806040525081019061233a9190614054565b60015b6123c1573d806000811461236d576040519150601f19603f3d011682016040523d82523d6000602084013e612372565b606091505b5060008151036123b957846040517f57f447ce0000000000000000000000000000000000000000000000000000000081526004016123b0919061338e565b60405180910390fd5b805181602001fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461244a57846040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401612441919061338e565b60405180910390fd5b505b505050505050565b60008473ffffffffffffffffffffffffffffffffffffffff163b1115612600578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b81526004016124b5959493929190614081565b6020604051808303816000875af19250505080156124f157506040513d601f19601f820116820180604052508101906124ee9190614054565b60015b612575573d8060008114612521576040519150601f19603f3d011682016040523d82523d6000602084013e612526565b606091505b50600081510361256d57846040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401612564919061338e565b60405180910390fd5b805181602001fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146125fe57846040517f57f447ce0000000000000000000000000000000000000000000000000000000081526004016125f5919061338e565b60405180910390fd5b505b505050505050565b6040518060e00160405280600081526020016000815260200160008152602001606081526020016060815260200160608152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061268482612659565b9050919050565b61269481612679565b811461269f57600080fd5b50565b6000813590506126b18161268b565b92915050565b6000819050919050565b6126ca816126b7565b81146126d557600080fd5b50565b6000813590506126e7816126c1565b92915050565b600080604083850312156127045761270361264f565b5b6000612712858286016126a2565b9250506020612723858286016126d8565b9150509250929050565b612736816126b7565b82525050565b6000602082019050612751600083018461272d565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61278c81612757565b811461279757600080fd5b50565b6000813590506127a981612783565b92915050565b6000602082840312156127c5576127c461264f565b5b60006127d38482850161279a565b91505092915050565b60008115159050919050565b6127f1816127dc565b82525050565b600060208201905061280c60008301846127e8565b92915050565b6000602082840312156128285761282761264f565b5b6000612836848285016126d8565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561287957808201518184015260208101905061285e565b60008484015250505050565b6000601f19601f8301169050919050565b60006128a18261283f565b6128ab818561284a565b93506128bb81856020860161285b565b6128c481612885565b840191505092915050565b600060208201905081810360008301526128e98184612896565b905092915050565b60008060006060848603121561290a5761290961264f565b5b6000612918868287016126a2565b9350506020612929868287016126d8565b925050604061293a868287016126d8565b9150509250925092565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61298682612885565b810181811067ffffffffffffffff821117156129a5576129a461294e565b5b80604052505050565b60006129b8612645565b90506129c4828261297d565b919050565b600067ffffffffffffffff8211156129e4576129e361294e565b5b6129ed82612885565b9050602081019050919050565b82818337600083830152505050565b6000612a1c612a17846129c9565b6129ae565b905082815260208101848484011115612a3857612a37612949565b5b612a438482856129fa565b509392505050565b600082601f830112612a6057612a5f612944565b5b8135612a70848260208601612a09565b91505092915050565b600080600060608486031215612a9257612a9161264f565b5b6000612aa0868287016126d8565b935050602084013567ffffffffffffffff811115612ac157612ac0612654565b5b612acd86828701612a4b565b925050604084013567ffffffffffffffff811115612aee57612aed612654565b5b612afa86828701612a4b565b9150509250925092565b600080fd5b600080fd5b60008083601f840112612b2457612b23612944565b5b8235905067ffffffffffffffff811115612b4157612b40612b04565b5b602083019150836020820283011115612b5d57612b5c612b09565b5b9250929050565b60008060208385031215612b7b57612b7a61264f565b5b600083013567ffffffffffffffff811115612b9957612b98612654565b5b612ba585828601612b0e565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612be6816126b7565b82525050565b600082825260208201905092915050565b6000612c088261283f565b612c128185612bec565b9350612c2281856020860161285b565b612c2b81612885565b840191505092915050565b6000819050919050565b612c4981612c36565b82525050565b600060e083016000830151612c676000860182612bdd565b506020830151612c7a6020860182612bdd565b506040830151612c8d6040860182612bdd565b5060608301518482036060860152612ca58282612bfd565b91505060808301518482036080860152612cbf8282612bfd565b91505060a083015184820360a0860152612cd98282612bfd565b91505060c0830151612cee60c0860182612c40565b508091505092915050565b6000612d058383612c4f565b905092915050565b6000602082019050919050565b6000612d2582612bb1565b612d2f8185612bbc565b935083602082028501612d4185612bcd565b8060005b85811015612d7d5784840389528151612d5e8582612cf9565b9450612d6983612d0d565b925060208a01995050600181019050612d45565b50829750879550505050505092915050565b60006020820190508181036000830152612da98184612d1a565b905092915050565b600067ffffffffffffffff821115612dcc57612dcb61294e565b5b602082029050602081019050919050565b6000612df0612deb84612db1565b6129ae565b90508083825260208201905060208402830185811115612e1357612e12612b09565b5b835b81811015612e3c5780612e2888826126d8565b845260208401935050602081019050612e15565b5050509392505050565b600082601f830112612e5b57612e5a612944565b5b8135612e6b848260208601612ddd565b91505092915050565b600067ffffffffffffffff821115612e8f57612e8e61294e565b5b612e9882612885565b9050602081019050919050565b6000612eb8612eb384612e74565b6129ae565b905082815260208101848484011115612ed457612ed3612949565b5b612edf8482856129fa565b509392505050565b600082601f830112612efc57612efb612944565b5b8135612f0c848260208601612ea5565b91505092915050565b600080600080600060a08688031215612f3157612f3061264f565b5b6000612f3f888289016126a2565b9550506020612f50888289016126a2565b945050604086013567ffffffffffffffff811115612f7157612f70612654565b5b612f7d88828901612e46565b935050606086013567ffffffffffffffff811115612f9e57612f9d612654565b5b612faa88828901612e46565b925050608086013567ffffffffffffffff811115612fcb57612fca612654565b5b612fd788828901612ee7565b9150509295509295909350565b612fed81612c36565b82525050565b600060e082019050613008600083018a61272d565b613015602083018961272d565b613022604083018861272d565b81810360608301526130348187612896565b905081810360808301526130488186612896565b905081810360a083015261305c8185612896565b905061306b60c0830184612fe4565b98975050505050505050565b600067ffffffffffffffff8211156130925761309161294e565b5b602082029050602081019050919050565b60006130b66130b184613077565b6129ae565b905080838252602082019050602084028301858111156130d9576130d8612b09565b5b835b8181101561310257806130ee88826126a2565b8452602084019350506020810190506130db565b5050509392505050565b600082601f83011261312157613120612944565b5b81356131318482602086016130a3565b91505092915050565b600080604083850312156131515761315061264f565b5b600083013567ffffffffffffffff81111561316f5761316e612654565b5b61317b8582860161310c565b925050602083013567ffffffffffffffff81111561319c5761319b612654565b5b6131a885828601612e46565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006131ea8383612bdd565b60208301905092915050565b6000602082019050919050565b600061320e826131b2565b61321881856131bd565b9350613223836131ce565b8060005b8381101561325457815161323b88826131de565b9750613246836131f6565b925050600181019050613227565b5085935050505092915050565b6000602082019050818103600083015261327b8184613203565b905092915050565b600080600080600060a0868803121561329f5761329e61264f565b5b60006132ad888289016126d8565b95505060206132be888289016126d8565b945050604086013567ffffffffffffffff8111156132df576132de612654565b5b6132eb88828901612a4b565b935050606086013567ffffffffffffffff81111561330c5761330b612654565b5b61331888828901612a4b565b925050608086013567ffffffffffffffff81111561333957613338612654565b5b61334588828901612a4b565b9150509295509295909350565b6000602082840312156133685761336761264f565b5b6000613376848285016126a2565b91505092915050565b61338881612679565b82525050565b60006020820190506133a3600083018461337f565b92915050565b6000806000606084860312156133c2576133c161264f565b5b600084013567ffffffffffffffff8111156133e0576133df612654565b5b6133ec8682870161310c565b935050602084013567ffffffffffffffff81111561340d5761340c612654565b5b61341986828701612e46565b925050604084013567ffffffffffffffff81111561343a57613439612654565b5b61344686828701612e46565b9150509250925092565b613459816127dc565b811461346457600080fd5b50565b60008135905061347681613450565b92915050565b600080604083850312156134935761349261264f565b5b60006134a1858286016126a2565b92505060206134b285828601613467565b9150509250929050565b600080604083850312156134d3576134d261264f565b5b60006134e1858286016126d8565b92505060206134f2858286016126d8565b9150509250929050565b600080604083850312156135135761351261264f565b5b6000613521858286016126d8565b925050602083013567ffffffffffffffff81111561354257613541612654565b5b61354e85828601612a4b565b9150509250929050565b6000806040838503121561356f5761356e61264f565b5b600061357d858286016126a2565b925050602061358e858286016126a2565b9150509250929050565b600080600080600060a086880312156135b4576135b361264f565b5b60006135c2888289016126a2565b95505060206135d3888289016126a2565b94505060406135e4888289016126d8565b93505060606135f5888289016126d8565b925050608086013567ffffffffffffffff81111561361657613615612654565b5b61362288828901612ee7565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061367657607f821691505b6020821081036136895761368861362f565b5b50919050565b7f4f6e6c79206f70657261746f722063616e206d696e74206e657720736f756c73600082015250565b60006136c560208361284a565b91506136d08261368f565b602082019050919050565b600060208201905081810360008301526136f4816136b8565b9050919050565b7f5468697320746f6b656e6964206576656e7420686173206265656e20636c6f7360008201527f6564000000000000000000000000000000000000000000000000000000000000602082015250565b600061375760228361284a565b9150613762826136fb565b604082019050919050565b600060208201905081810360008301526137868161374a565b9050919050565b7f546f6b656e4944206e6f7420496e697469616c697a6564000000000000000000600082015250565b60006137c360178361284a565b91506137ce8261378d565b602082019050919050565b600060208201905081810360008301526137f2816137b6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613833826126b7565b915061383e836126b7565b9250828201905080821115613856576138556137f9565b5b92915050565b7f4e6f7420456e6f75676820546f6b656e4944206c656674000000000000000000600082015250565b600061389260178361284a565b915061389d8261385c565b602082019050919050565b600060208201905081810360008301526138c181613885565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261392a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826138ed565b61393486836138ed565b95508019841693508086168417925050509392505050565b6000819050919050565b600061397161396c613967846126b7565b61394c565b6126b7565b9050919050565b6000819050919050565b61398b83613956565b61399f61399782613978565b8484546138fa565b825550505050565b600090565b6139b46139a7565b6139bf818484613982565b505050565b5b818110156139e3576139d86000826139ac565b6001810190506139c5565b5050565b601f821115613a28576139f9816138c8565b613a02846138dd565b81016020851015613a11578190505b613a25613a1d856138dd565b8301826139c4565b50505b505050565b600082821c905092915050565b6000613a4b60001984600802613a2d565b1980831691505092915050565b6000613a648383613a3a565b9150826002028217905092915050565b613a7d8261283f565b67ffffffffffffffff811115613a9657613a9561294e565b5b613aa0825461365e565b613aab8282856139e7565b600060209050601f831160018114613ade5760008415613acc578287015190505b613ad68582613a58565b865550613b3e565b601f198416613aec866138c8565b60005b82811015613b1457848901518255600182019150602085019450602081019050613aef565b86831015613b315784890151613b2d601f891682613a3a565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000613b80826126b7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613bb257613bb16137f9565b5b600182019050919050565b7f5472616e73666572206e6f7420737570706f7274656420666f7220736f756c2060008201527f626f756e6420746f6b656e2e0000000000000000000000000000000000000000602082015250565b6000613c19602c8361284a565b9150613c2482613bbd565b604082019050919050565b60006020820190508181036000830152613c4881613c0c565b9050919050565b6000604082019050613c64600083018561272d565b613c71602083018461272d565b9392505050565b7f546f6b656e494420616c726561647920496e697469616c697a65640000000000600082015250565b6000613cae601b8361284a565b9150613cb982613c78565b602082019050919050565b60006020820190508181036000830152613cdd81613ca1565b9050919050565b7f496e76616c6964204f776e657200000000000000000000000000000000000000600082015250565b6000613d1a600d8361284a565b9150613d2582613ce4565b602082019050919050565b60006020820190508181036000830152613d4981613d0d565b9050919050565b7f4e6565642076616c6964206163636f756e742f616d6f756e74206c697374206160008201527f6e6420457175616c206c656e6774680000000000000000000000000000000000602082015250565b6000613dac602f8361284a565b9150613db782613d50565b604082019050919050565b60006020820190508181036000830152613ddb81613d9f565b9050919050565b7f4e6565642076616c6964206163636f756e742f616d6f756e742f6964206c697360008201527f7420616e6420457175616c206c656e6774680000000000000000000000000000602082015250565b6000613e3e60328361284a565b9150613e4982613de2565b604082019050919050565b60006020820190508181036000830152613e6d81613e31565b9050919050565b6000613e7f826126b7565b9150613e8a836126b7565b9250828203905081811115613ea257613ea16137f9565b5b92915050565b7f546f6b656e616d6f756e74206d757374206d6f7265207468616e203000000000600082015250565b6000613ede601c8361284a565b9150613ee982613ea8565b602082019050919050565b60006020820190508181036000830152613f0d81613ed1565b9050919050565b6000608082019050613f29600083018761337f565b613f36602083018661272d565b613f43604083018561272d565b613f50606083018461272d565b95945050505050565b60006040820190508181036000830152613f738185613203565b90508181036020830152613f878184613203565b90509392505050565b600081519050919050565b600082825260208201905092915050565b6000613fb782613f90565b613fc18185613f9b565b9350613fd181856020860161285b565b613fda81612885565b840191505092915050565b600060a082019050613ffa600083018861337f565b614007602083018761337f565b614014604083018661272d565b614021606083018561272d565b81810360808301526140338184613fac565b90509695505050505050565b60008151905061404e81612783565b92915050565b60006020828403121561406a5761406961264f565b5b60006140788482850161403f565b91505092915050565b600060a082019050614096600083018861337f565b6140a3602083018761337f565b81810360408301526140b58186613203565b905081810360608301526140c98185613203565b905081810360808301526140dd8184613fac565b9050969550505050505056fea264697066735822122076a2e6994a2e56b109121ce2de4d5c0e39856ee5788cd26b44fe176d14ee247f64736f6c63430008140033",
}

// SbtABI is the input ABI used to generate the binding from.
// Deprecated: Use SbtMetaData.ABI instead.
var SbtABI = SbtMetaData.ABI

// SbtBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SbtMetaData.Bin instead.
var SbtBin = SbtMetaData.Bin

// DeploySbt deploys a new Ethereum contract, binding an instance of Sbt to it.
func DeploySbt(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Sbt, error) {
	parsed, err := SbtMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SbtBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Sbt{SbtCaller: SbtCaller{contract: contract}, SbtTransactor: SbtTransactor{contract: contract}, SbtFilterer: SbtFilterer{contract: contract}}, nil
}

// Sbt is an auto generated Go binding around an Ethereum contract.
type Sbt struct {
	SbtCaller     // Read-only binding to the contract
	SbtTransactor // Write-only binding to the contract
	SbtFilterer   // Log filterer for contract events
}

// SbtCaller is an auto generated read-only Go binding around an Ethereum contract.
type SbtCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SbtTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SbtTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SbtFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SbtFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SbtSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SbtSession struct {
	Contract     *Sbt              // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SbtCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SbtCallerSession struct {
	Contract *SbtCaller    // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// SbtTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SbtTransactorSession struct {
	Contract     *SbtTransactor    // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SbtRaw is an auto generated low-level Go binding around an Ethereum contract.
type SbtRaw struct {
	Contract *Sbt // Generic contract binding to access the raw methods on
}

// SbtCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SbtCallerRaw struct {
	Contract *SbtCaller // Generic read-only contract binding to access the raw methods on
}

// SbtTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SbtTransactorRaw struct {
	Contract *SbtTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSbt creates a new instance of Sbt, bound to a specific deployed contract.
func NewSbt(address common.Address, backend bind.ContractBackend) (*Sbt, error) {
	contract, err := bindSbt(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Sbt{SbtCaller: SbtCaller{contract: contract}, SbtTransactor: SbtTransactor{contract: contract}, SbtFilterer: SbtFilterer{contract: contract}}, nil
}

// NewSbtCaller creates a new read-only instance of Sbt, bound to a specific deployed contract.
func NewSbtCaller(address common.Address, caller bind.ContractCaller) (*SbtCaller, error) {
	contract, err := bindSbt(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SbtCaller{contract: contract}, nil
}

// NewSbtTransactor creates a new write-only instance of Sbt, bound to a specific deployed contract.
func NewSbtTransactor(address common.Address, transactor bind.ContractTransactor) (*SbtTransactor, error) {
	contract, err := bindSbt(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SbtTransactor{contract: contract}, nil
}

// NewSbtFilterer creates a new log filterer instance of Sbt, bound to a specific deployed contract.
func NewSbtFilterer(address common.Address, filterer bind.ContractFilterer) (*SbtFilterer, error) {
	contract, err := bindSbt(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SbtFilterer{contract: contract}, nil
}

// bindSbt binds a generic wrapper to an already deployed contract.
func bindSbt(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SbtMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Sbt *SbtRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Sbt.Contract.SbtCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Sbt *SbtRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Sbt.Contract.SbtTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Sbt *SbtRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Sbt.Contract.SbtTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Sbt *SbtCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Sbt.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Sbt *SbtTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Sbt.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Sbt *SbtTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Sbt.Contract.contract.Transact(opts, method, params...)
}

// TokenIDs is a free data retrieval call binding the contract method 0xa3945ad3.
//
// Solidity: function TokenIDs() view returns(uint256[])
func (_Sbt *SbtCaller) TokenIDs(opts *bind.CallOpts) ([]*big.Int, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "TokenIDs")

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// TokenIDs is a free data retrieval call binding the contract method 0xa3945ad3.
//
// Solidity: function TokenIDs() view returns(uint256[])
func (_Sbt *SbtSession) TokenIDs() ([]*big.Int, error) {
	return _Sbt.Contract.TokenIDs(&_Sbt.CallOpts)
}

// TokenIDs is a free data retrieval call binding the contract method 0xa3945ad3.
//
// Solidity: function TokenIDs() view returns(uint256[])
func (_Sbt *SbtCallerSession) TokenIDs() ([]*big.Int, error) {
	return _Sbt.Contract.TokenIDs(&_Sbt.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_Sbt *SbtCaller) BalanceOf(opts *bind.CallOpts, account common.Address, id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "balanceOf", account, id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_Sbt *SbtSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _Sbt.Contract.BalanceOf(&_Sbt.CallOpts, account, id)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_Sbt *SbtCallerSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _Sbt.Contract.BalanceOf(&_Sbt.CallOpts, account, id)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_Sbt *SbtCaller) BalanceOfBatch(opts *bind.CallOpts, accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "balanceOfBatch", accounts, ids)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_Sbt *SbtSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _Sbt.Contract.BalanceOfBatch(&_Sbt.CallOpts, accounts, ids)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_Sbt *SbtCallerSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _Sbt.Contract.BalanceOfBatch(&_Sbt.CallOpts, accounts, ids)
}

// Getminted is a free data retrieval call binding the contract method 0x413f818b.
//
// Solidity: function getminted(uint256 tokenid) view returns(uint256)
func (_Sbt *SbtCaller) Getminted(opts *bind.CallOpts, tokenid *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "getminted", tokenid)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Getminted is a free data retrieval call binding the contract method 0x413f818b.
//
// Solidity: function getminted(uint256 tokenid) view returns(uint256)
func (_Sbt *SbtSession) Getminted(tokenid *big.Int) (*big.Int, error) {
	return _Sbt.Contract.Getminted(&_Sbt.CallOpts, tokenid)
}

// Getminted is a free data retrieval call binding the contract method 0x413f818b.
//
// Solidity: function getminted(uint256 tokenid) view returns(uint256)
func (_Sbt *SbtCallerSession) Getminted(tokenid *big.Int) (*big.Int, error) {
	return _Sbt.Contract.Getminted(&_Sbt.CallOpts, tokenid)
}

// Getname is a free data retrieval call binding the contract method 0x0202ace1.
//
// Solidity: function getname(uint256 tokenid) view returns(string)
func (_Sbt *SbtCaller) Getname(opts *bind.CallOpts, tokenid *big.Int) (string, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "getname", tokenid)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Getname is a free data retrieval call binding the contract method 0x0202ace1.
//
// Solidity: function getname(uint256 tokenid) view returns(string)
func (_Sbt *SbtSession) Getname(tokenid *big.Int) (string, error) {
	return _Sbt.Contract.Getname(&_Sbt.CallOpts, tokenid)
}

// Getname is a free data retrieval call binding the contract method 0x0202ace1.
//
// Solidity: function getname(uint256 tokenid) view returns(string)
func (_Sbt *SbtCallerSession) Getname(tokenid *big.Int) (string, error) {
	return _Sbt.Contract.Getname(&_Sbt.CallOpts, tokenid)
}

// Getsymbol is a free data retrieval call binding the contract method 0xcc9b1310.
//
// Solidity: function getsymbol(uint256 tokenid) view returns(string)
func (_Sbt *SbtCaller) Getsymbol(opts *bind.CallOpts, tokenid *big.Int) (string, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "getsymbol", tokenid)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Getsymbol is a free data retrieval call binding the contract method 0xcc9b1310.
//
// Solidity: function getsymbol(uint256 tokenid) view returns(string)
func (_Sbt *SbtSession) Getsymbol(tokenid *big.Int) (string, error) {
	return _Sbt.Contract.Getsymbol(&_Sbt.CallOpts, tokenid)
}

// Getsymbol is a free data retrieval call binding the contract method 0xcc9b1310.
//
// Solidity: function getsymbol(uint256 tokenid) view returns(string)
func (_Sbt *SbtCallerSession) Getsymbol(tokenid *big.Int) (string, error) {
	return _Sbt.Contract.Getsymbol(&_Sbt.CallOpts, tokenid)
}

// Gettotalamount is a free data retrieval call binding the contract method 0x163c63d1.
//
// Solidity: function gettotalamount(uint256 tokenid) view returns(uint256)
func (_Sbt *SbtCaller) Gettotalamount(opts *bind.CallOpts, tokenid *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "gettotalamount", tokenid)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Gettotalamount is a free data retrieval call binding the contract method 0x163c63d1.
//
// Solidity: function gettotalamount(uint256 tokenid) view returns(uint256)
func (_Sbt *SbtSession) Gettotalamount(tokenid *big.Int) (*big.Int, error) {
	return _Sbt.Contract.Gettotalamount(&_Sbt.CallOpts, tokenid)
}

// Gettotalamount is a free data retrieval call binding the contract method 0x163c63d1.
//
// Solidity: function gettotalamount(uint256 tokenid) view returns(uint256)
func (_Sbt *SbtCallerSession) Gettotalamount(tokenid *big.Int) (*big.Int, error) {
	return _Sbt.Contract.Gettotalamount(&_Sbt.CallOpts, tokenid)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address , address ) view returns(bool)
func (_Sbt *SbtCaller) IsApprovedForAll(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (bool, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "isApprovedForAll", arg0, arg1)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address , address ) view returns(bool)
func (_Sbt *SbtSession) IsApprovedForAll(arg0 common.Address, arg1 common.Address) (bool, error) {
	return _Sbt.Contract.IsApprovedForAll(&_Sbt.CallOpts, arg0, arg1)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address , address ) view returns(bool)
func (_Sbt *SbtCallerSession) IsApprovedForAll(arg0 common.Address, arg1 common.Address) (bool, error) {
	return _Sbt.Contract.IsApprovedForAll(&_Sbt.CallOpts, arg0, arg1)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Sbt *SbtCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Sbt *SbtSession) Owner() (common.Address, error) {
	return _Sbt.Contract.Owner(&_Sbt.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Sbt *SbtCallerSession) Owner() (common.Address, error) {
	return _Sbt.Contract.Owner(&_Sbt.CallOpts)
}

// SafeTransferFrom is a free data retrieval call binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address , address , uint256 , uint256 , bytes ) pure returns()
func (_Sbt *SbtCaller) SafeTransferFrom(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) error {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "safeTransferFrom", arg0, arg1, arg2, arg3, arg4)

	if err != nil {
		return err
	}

	return err

}

// SafeTransferFrom is a free data retrieval call binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address , address , uint256 , uint256 , bytes ) pure returns()
func (_Sbt *SbtSession) SafeTransferFrom(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) error {
	return _Sbt.Contract.SafeTransferFrom(&_Sbt.CallOpts, arg0, arg1, arg2, arg3, arg4)
}

// SafeTransferFrom is a free data retrieval call binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address , address , uint256 , uint256 , bytes ) pure returns()
func (_Sbt *SbtCallerSession) SafeTransferFrom(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) error {
	return _Sbt.Contract.SafeTransferFrom(&_Sbt.CallOpts, arg0, arg1, arg2, arg3, arg4)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Sbt *SbtCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Sbt *SbtSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Sbt.Contract.SupportsInterface(&_Sbt.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Sbt *SbtCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Sbt.Contract.SupportsInterface(&_Sbt.CallOpts, interfaceId)
}

// TokenIDInfo is a free data retrieval call binding the contract method 0x3aa40d3e.
//
// Solidity: function tokenIDInfo(uint256 ) view returns(uint256 tokenid, uint256 minted, uint256 totalamount, string name, string symbol, string url, int256 allow)
func (_Sbt *SbtCaller) TokenIDInfo(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Tokenid     *big.Int
	Minted      *big.Int
	Totalamount *big.Int
	Name        string
	Symbol      string
	Url         string
	Allow       *big.Int
}, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "tokenIDInfo", arg0)

	outstruct := new(struct {
		Tokenid     *big.Int
		Minted      *big.Int
		Totalamount *big.Int
		Name        string
		Symbol      string
		Url         string
		Allow       *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Tokenid = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Minted = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Totalamount = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Name = *abi.ConvertType(out[3], new(string)).(*string)
	outstruct.Symbol = *abi.ConvertType(out[4], new(string)).(*string)
	outstruct.Url = *abi.ConvertType(out[5], new(string)).(*string)
	outstruct.Allow = *abi.ConvertType(out[6], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// TokenIDInfo is a free data retrieval call binding the contract method 0x3aa40d3e.
//
// Solidity: function tokenIDInfo(uint256 ) view returns(uint256 tokenid, uint256 minted, uint256 totalamount, string name, string symbol, string url, int256 allow)
func (_Sbt *SbtSession) TokenIDInfo(arg0 *big.Int) (struct {
	Tokenid     *big.Int
	Minted      *big.Int
	Totalamount *big.Int
	Name        string
	Symbol      string
	Url         string
	Allow       *big.Int
}, error) {
	return _Sbt.Contract.TokenIDInfo(&_Sbt.CallOpts, arg0)
}

// TokenIDInfo is a free data retrieval call binding the contract method 0x3aa40d3e.
//
// Solidity: function tokenIDInfo(uint256 ) view returns(uint256 tokenid, uint256 minted, uint256 totalamount, string name, string symbol, string url, int256 allow)
func (_Sbt *SbtCallerSession) TokenIDInfo(arg0 *big.Int) (struct {
	Tokenid     *big.Int
	Minted      *big.Int
	Totalamount *big.Int
	Name        string
	Symbol      string
	Url         string
	Allow       *big.Int
}, error) {
	return _Sbt.Contract.TokenIDInfo(&_Sbt.CallOpts, arg0)
}

// TokenIDsInfo is a free data retrieval call binding the contract method 0x2a6e10c8.
//
// Solidity: function tokenIDsInfo(uint256[] _tokenIDs) view returns((uint256,uint256,uint256,string,string,string,int256)[])
func (_Sbt *SbtCaller) TokenIDsInfo(opts *bind.CallOpts, _tokenIDs []*big.Int) ([]SBTTokenInfo, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "tokenIDsInfo", _tokenIDs)

	if err != nil {
		return *new([]SBTTokenInfo), err
	}

	out0 := *abi.ConvertType(out[0], new([]SBTTokenInfo)).(*[]SBTTokenInfo)

	return out0, err

}

// TokenIDsInfo is a free data retrieval call binding the contract method 0x2a6e10c8.
//
// Solidity: function tokenIDsInfo(uint256[] _tokenIDs) view returns((uint256,uint256,uint256,string,string,string,int256)[])
func (_Sbt *SbtSession) TokenIDsInfo(_tokenIDs []*big.Int) ([]SBTTokenInfo, error) {
	return _Sbt.Contract.TokenIDsInfo(&_Sbt.CallOpts, _tokenIDs)
}

// TokenIDsInfo is a free data retrieval call binding the contract method 0x2a6e10c8.
//
// Solidity: function tokenIDsInfo(uint256[] _tokenIDs) view returns((uint256,uint256,uint256,string,string,string,int256)[])
func (_Sbt *SbtCallerSession) TokenIDsInfo(_tokenIDs []*big.Int) ([]SBTTokenInfo, error) {
	return _Sbt.Contract.TokenIDsInfo(&_Sbt.CallOpts, _tokenIDs)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 id) view returns(string)
func (_Sbt *SbtCaller) Uri(opts *bind.CallOpts, id *big.Int) (string, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "uri", id)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 id) view returns(string)
func (_Sbt *SbtSession) Uri(id *big.Int) (string, error) {
	return _Sbt.Contract.Uri(&_Sbt.CallOpts, id)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 id) view returns(string)
func (_Sbt *SbtCallerSession) Uri(id *big.Int) (string, error) {
	return _Sbt.Contract.Uri(&_Sbt.CallOpts, id)
}

// Batchmint is a paid mutator transaction binding the contract method 0x9465ffa9.
//
// Solidity: function batchmint(address[] account, uint256[] id, uint256[] amount) returns()
func (_Sbt *SbtTransactor) Batchmint(opts *bind.TransactOpts, account []common.Address, id []*big.Int, amount []*big.Int) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "batchmint", account, id, amount)
}

// Batchmint is a paid mutator transaction binding the contract method 0x9465ffa9.
//
// Solidity: function batchmint(address[] account, uint256[] id, uint256[] amount) returns()
func (_Sbt *SbtSession) Batchmint(account []common.Address, id []*big.Int, amount []*big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.Batchmint(&_Sbt.TransactOpts, account, id, amount)
}

// Batchmint is a paid mutator transaction binding the contract method 0x9465ffa9.
//
// Solidity: function batchmint(address[] account, uint256[] id, uint256[] amount) returns()
func (_Sbt *SbtTransactorSession) Batchmint(account []common.Address, id []*big.Int, amount []*big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.Batchmint(&_Sbt.TransactOpts, account, id, amount)
}

// Burn is a paid mutator transaction binding the contract method 0xb390c0ab.
//
// Solidity: function burn(uint256 id, uint256 value) returns()
func (_Sbt *SbtTransactor) Burn(opts *bind.TransactOpts, id *big.Int, value *big.Int) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "burn", id, value)
}

// Burn is a paid mutator transaction binding the contract method 0xb390c0ab.
//
// Solidity: function burn(uint256 id, uint256 value) returns()
func (_Sbt *SbtSession) Burn(id *big.Int, value *big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.Burn(&_Sbt.TransactOpts, id, value)
}

// Burn is a paid mutator transaction binding the contract method 0xb390c0ab.
//
// Solidity: function burn(uint256 id, uint256 value) returns()
func (_Sbt *SbtTransactorSession) Burn(id *big.Int, value *big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.Burn(&_Sbt.TransactOpts, id, value)
}

// CloseMint is a paid mutator transaction binding the contract method 0xc68ac6b0.
//
// Solidity: function closeMint(uint256 tokenid) returns()
func (_Sbt *SbtTransactor) CloseMint(opts *bind.TransactOpts, tokenid *big.Int) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "closeMint", tokenid)
}

// CloseMint is a paid mutator transaction binding the contract method 0xc68ac6b0.
//
// Solidity: function closeMint(uint256 tokenid) returns()
func (_Sbt *SbtSession) CloseMint(tokenid *big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.CloseMint(&_Sbt.TransactOpts, tokenid)
}

// CloseMint is a paid mutator transaction binding the contract method 0xc68ac6b0.
//
// Solidity: function closeMint(uint256 tokenid) returns()
func (_Sbt *SbtTransactorSession) CloseMint(tokenid *big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.CloseMint(&_Sbt.TransactOpts, tokenid)
}

// Mint is a paid mutator transaction binding the contract method 0x156e29f6.
//
// Solidity: function mint(address account, uint256 id, uint256 amount) returns()
func (_Sbt *SbtTransactor) Mint(opts *bind.TransactOpts, account common.Address, id *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "mint", account, id, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x156e29f6.
//
// Solidity: function mint(address account, uint256 id, uint256 amount) returns()
func (_Sbt *SbtSession) Mint(account common.Address, id *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.Mint(&_Sbt.TransactOpts, account, id, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x156e29f6.
//
// Solidity: function mint(address account, uint256 id, uint256 amount) returns()
func (_Sbt *SbtTransactorSession) Mint(account common.Address, id *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.Mint(&_Sbt.TransactOpts, account, id, amount)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address , address , uint256[] , uint256[] , bytes ) returns()
func (_Sbt *SbtTransactor) SafeBatchTransferFrom(opts *bind.TransactOpts, arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "safeBatchTransferFrom", arg0, arg1, arg2, arg3, arg4)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address , address , uint256[] , uint256[] , bytes ) returns()
func (_Sbt *SbtSession) SafeBatchTransferFrom(arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) (*types.Transaction, error) {
	return _Sbt.Contract.SafeBatchTransferFrom(&_Sbt.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address , address , uint256[] , uint256[] , bytes ) returns()
func (_Sbt *SbtTransactorSession) SafeBatchTransferFrom(arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) (*types.Transaction, error) {
	return _Sbt.Contract.SafeBatchTransferFrom(&_Sbt.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address , bool ) returns()
func (_Sbt *SbtTransactor) SetApprovalForAll(opts *bind.TransactOpts, arg0 common.Address, arg1 bool) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "setApprovalForAll", arg0, arg1)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address , bool ) returns()
func (_Sbt *SbtSession) SetApprovalForAll(arg0 common.Address, arg1 bool) (*types.Transaction, error) {
	return _Sbt.Contract.SetApprovalForAll(&_Sbt.TransactOpts, arg0, arg1)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address , bool ) returns()
func (_Sbt *SbtTransactorSession) SetApprovalForAll(arg0 common.Address, arg1 bool) (*types.Transaction, error) {
	return _Sbt.Contract.SetApprovalForAll(&_Sbt.TransactOpts, arg0, arg1)
}

// SettokenIDInfo is a paid mutator transaction binding the contract method 0x5b5c45f3.
//
// Solidity: function settokenIDInfo(uint256 tokenid, uint256 totalamount, string name, string symbol, string url) returns()
func (_Sbt *SbtTransactor) SettokenIDInfo(opts *bind.TransactOpts, tokenid *big.Int, totalamount *big.Int, name string, symbol string, url string) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "settokenIDInfo", tokenid, totalamount, name, symbol, url)
}

// SettokenIDInfo is a paid mutator transaction binding the contract method 0x5b5c45f3.
//
// Solidity: function settokenIDInfo(uint256 tokenid, uint256 totalamount, string name, string symbol, string url) returns()
func (_Sbt *SbtSession) SettokenIDInfo(tokenid *big.Int, totalamount *big.Int, name string, symbol string, url string) (*types.Transaction, error) {
	return _Sbt.Contract.SettokenIDInfo(&_Sbt.TransactOpts, tokenid, totalamount, name, symbol, url)
}

// SettokenIDInfo is a paid mutator transaction binding the contract method 0x5b5c45f3.
//
// Solidity: function settokenIDInfo(uint256 tokenid, uint256 totalamount, string name, string symbol, string url) returns()
func (_Sbt *SbtTransactorSession) SettokenIDInfo(tokenid *big.Int, totalamount *big.Int, name string, symbol string, url string) (*types.Transaction, error) {
	return _Sbt.Contract.SettokenIDInfo(&_Sbt.TransactOpts, tokenid, totalamount, name, symbol, url)
}

// UpdateNameSymbol is a paid mutator transaction binding the contract method 0x1829f456.
//
// Solidity: function updateNameSymbol(uint256 tokenid, string name, string symbol) returns()
func (_Sbt *SbtTransactor) UpdateNameSymbol(opts *bind.TransactOpts, tokenid *big.Int, name string, symbol string) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "updateNameSymbol", tokenid, name, symbol)
}

// UpdateNameSymbol is a paid mutator transaction binding the contract method 0x1829f456.
//
// Solidity: function updateNameSymbol(uint256 tokenid, string name, string symbol) returns()
func (_Sbt *SbtSession) UpdateNameSymbol(tokenid *big.Int, name string, symbol string) (*types.Transaction, error) {
	return _Sbt.Contract.UpdateNameSymbol(&_Sbt.TransactOpts, tokenid, name, symbol)
}

// UpdateNameSymbol is a paid mutator transaction binding the contract method 0x1829f456.
//
// Solidity: function updateNameSymbol(uint256 tokenid, string name, string symbol) returns()
func (_Sbt *SbtTransactorSession) UpdateNameSymbol(tokenid *big.Int, name string, symbol string) (*types.Transaction, error) {
	return _Sbt.Contract.UpdateNameSymbol(&_Sbt.TransactOpts, tokenid, name, symbol)
}

// UpdateOwner is a paid mutator transaction binding the contract method 0x880cdc31.
//
// Solidity: function updateOwner(address newowner) returns()
func (_Sbt *SbtTransactor) UpdateOwner(opts *bind.TransactOpts, newowner common.Address) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "updateOwner", newowner)
}

// UpdateOwner is a paid mutator transaction binding the contract method 0x880cdc31.
//
// Solidity: function updateOwner(address newowner) returns()
func (_Sbt *SbtSession) UpdateOwner(newowner common.Address) (*types.Transaction, error) {
	return _Sbt.Contract.UpdateOwner(&_Sbt.TransactOpts, newowner)
}

// UpdateOwner is a paid mutator transaction binding the contract method 0x880cdc31.
//
// Solidity: function updateOwner(address newowner) returns()
func (_Sbt *SbtTransactorSession) UpdateOwner(newowner common.Address) (*types.Transaction, error) {
	return _Sbt.Contract.UpdateOwner(&_Sbt.TransactOpts, newowner)
}

// UpdateTotalAmount is a paid mutator transaction binding the contract method 0xfa82aa5f.
//
// Solidity: function updateTotalAmount(uint256 tokenid, uint256 totalamount) returns()
func (_Sbt *SbtTransactor) UpdateTotalAmount(opts *bind.TransactOpts, tokenid *big.Int, totalamount *big.Int) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "updateTotalAmount", tokenid, totalamount)
}

// UpdateTotalAmount is a paid mutator transaction binding the contract method 0xfa82aa5f.
//
// Solidity: function updateTotalAmount(uint256 tokenid, uint256 totalamount) returns()
func (_Sbt *SbtSession) UpdateTotalAmount(tokenid *big.Int, totalamount *big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.UpdateTotalAmount(&_Sbt.TransactOpts, tokenid, totalamount)
}

// UpdateTotalAmount is a paid mutator transaction binding the contract method 0xfa82aa5f.
//
// Solidity: function updateTotalAmount(uint256 tokenid, uint256 totalamount) returns()
func (_Sbt *SbtTransactorSession) UpdateTotalAmount(tokenid *big.Int, totalamount *big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.UpdateTotalAmount(&_Sbt.TransactOpts, tokenid, totalamount)
}

// UpdateURL is a paid mutator transaction binding the contract method 0xe144976e.
//
// Solidity: function updateURL(uint256 tokenid, string url) returns()
func (_Sbt *SbtTransactor) UpdateURL(opts *bind.TransactOpts, tokenid *big.Int, url string) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "updateURL", tokenid, url)
}

// UpdateURL is a paid mutator transaction binding the contract method 0xe144976e.
//
// Solidity: function updateURL(uint256 tokenid, string url) returns()
func (_Sbt *SbtSession) UpdateURL(tokenid *big.Int, url string) (*types.Transaction, error) {
	return _Sbt.Contract.UpdateURL(&_Sbt.TransactOpts, tokenid, url)
}

// UpdateURL is a paid mutator transaction binding the contract method 0xe144976e.
//
// Solidity: function updateURL(uint256 tokenid, string url) returns()
func (_Sbt *SbtTransactorSession) UpdateURL(tokenid *big.Int, url string) (*types.Transaction, error) {
	return _Sbt.Contract.UpdateURL(&_Sbt.TransactOpts, tokenid, url)
}

// SbtApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the Sbt contract.
type SbtApprovalForAllIterator struct {
	Event *SbtApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SbtApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SbtApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SbtApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SbtApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SbtApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SbtApprovalForAll represents a ApprovalForAll event raised by the Sbt contract.
type SbtApprovalForAll struct {
	Account  common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_Sbt *SbtFilterer) FilterApprovalForAll(opts *bind.FilterOpts, account []common.Address, operator []common.Address) (*SbtApprovalForAllIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Sbt.contract.FilterLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &SbtApprovalForAllIterator{contract: _Sbt.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_Sbt *SbtFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *SbtApprovalForAll, account []common.Address, operator []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Sbt.contract.WatchLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SbtApprovalForAll)
				if err := _Sbt.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_Sbt *SbtFilterer) ParseApprovalForAll(log types.Log) (*SbtApprovalForAll, error) {
	event := new(SbtApprovalForAll)
	if err := _Sbt.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SbtTransferBatchIterator is returned from FilterTransferBatch and is used to iterate over the raw logs and unpacked data for TransferBatch events raised by the Sbt contract.
type SbtTransferBatchIterator struct {
	Event *SbtTransferBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SbtTransferBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SbtTransferBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SbtTransferBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SbtTransferBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SbtTransferBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SbtTransferBatch represents a TransferBatch event raised by the Sbt contract.
type SbtTransferBatch struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Ids      []*big.Int
	Values   []*big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferBatch is a free log retrieval operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_Sbt *SbtFilterer) FilterTransferBatch(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*SbtTransferBatchIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Sbt.contract.FilterLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &SbtTransferBatchIterator{contract: _Sbt.contract, event: "TransferBatch", logs: logs, sub: sub}, nil
}

// WatchTransferBatch is a free log subscription operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_Sbt *SbtFilterer) WatchTransferBatch(opts *bind.WatchOpts, sink chan<- *SbtTransferBatch, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Sbt.contract.WatchLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SbtTransferBatch)
				if err := _Sbt.contract.UnpackLog(event, "TransferBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferBatch is a log parse operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_Sbt *SbtFilterer) ParseTransferBatch(log types.Log) (*SbtTransferBatch, error) {
	event := new(SbtTransferBatch)
	if err := _Sbt.contract.UnpackLog(event, "TransferBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SbtTransferSingleIterator is returned from FilterTransferSingle and is used to iterate over the raw logs and unpacked data for TransferSingle events raised by the Sbt contract.
type SbtTransferSingleIterator struct {
	Event *SbtTransferSingle // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SbtTransferSingleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SbtTransferSingle)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SbtTransferSingle)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SbtTransferSingleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SbtTransferSingleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SbtTransferSingle represents a TransferSingle event raised by the Sbt contract.
type SbtTransferSingle struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Id       *big.Int
	Value    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferSingle is a free log retrieval operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_Sbt *SbtFilterer) FilterTransferSingle(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*SbtTransferSingleIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Sbt.contract.FilterLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &SbtTransferSingleIterator{contract: _Sbt.contract, event: "TransferSingle", logs: logs, sub: sub}, nil
}

// WatchTransferSingle is a free log subscription operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_Sbt *SbtFilterer) WatchTransferSingle(opts *bind.WatchOpts, sink chan<- *SbtTransferSingle, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Sbt.contract.WatchLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SbtTransferSingle)
				if err := _Sbt.contract.UnpackLog(event, "TransferSingle", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferSingle is a log parse operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_Sbt *SbtFilterer) ParseTransferSingle(log types.Log) (*SbtTransferSingle, error) {
	event := new(SbtTransferSingle)
	if err := _Sbt.contract.UnpackLog(event, "TransferSingle", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SbtURIIterator is returned from FilterURI and is used to iterate over the raw logs and unpacked data for URI events raised by the Sbt contract.
type SbtURIIterator struct {
	Event *SbtURI // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SbtURIIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SbtURI)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SbtURI)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SbtURIIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SbtURIIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SbtURI represents a URI event raised by the Sbt contract.
type SbtURI struct {
	Value string
	Id    *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterURI is a free log retrieval operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_Sbt *SbtFilterer) FilterURI(opts *bind.FilterOpts, id []*big.Int) (*SbtURIIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _Sbt.contract.FilterLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return &SbtURIIterator{contract: _Sbt.contract, event: "URI", logs: logs, sub: sub}, nil
}

// WatchURI is a free log subscription operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_Sbt *SbtFilterer) WatchURI(opts *bind.WatchOpts, sink chan<- *SbtURI, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _Sbt.contract.WatchLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SbtURI)
				if err := _Sbt.contract.UnpackLog(event, "URI", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseURI is a log parse operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_Sbt *SbtFilterer) ParseURI(log types.Log) (*SbtURI, error) {
	event := new(SbtURI)
	if err := _Sbt.contract.UnpackLog(event, "URI", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
