// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package sbt

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// SbtMetaData contains all meta data concerning the Sbt contract.
var SbtMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"account\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"id\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"batchmint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalamount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"settokenIDInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"updateNameSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newowner\",\"type\":\"address\"}],\"name\":\"updateOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalamount\",\"type\":\"uint256\"}],\"name\":\"updateTotalAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"updateURL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"getminted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"getname\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"getsymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"gettotalamount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60806040526040518060200160405280600081525062000025816200006d60201b60201c565b5033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620003e3565b80600290816200007e9190620002fc565b5050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200010457607f821691505b6020821081036200011a5762000119620000bc565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620001847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000145565b62000190868362000145565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620001dd620001d7620001d184620001a8565b620001b2565b620001a8565b9050919050565b6000819050919050565b620001f983620001bc565b620002116200020882620001e4565b84845462000152565b825550505050565b600090565b6200022862000219565b62000235818484620001ee565b505050565b5b818110156200025d57620002516000826200021e565b6001810190506200023b565b5050565b601f821115620002ac57620002768162000120565b620002818462000135565b8101602085101562000291578190505b620002a9620002a08562000135565b8301826200023a565b50505b505050565b600082821c905092915050565b6000620002d160001984600802620002b1565b1980831691505092915050565b6000620002ec8383620002be565b9150826002028217905092915050565b620003078262000082565b67ffffffffffffffff8111156200032357620003226200008d565b5b6200032f8254620000eb565b6200033c82828562000261565b600060209050601f8311600181146200037457600084156200035f578287015190505b6200036b8582620002de565b865550620003db565b601f198416620003848662000120565b60005b82811015620003ae5784890151825560018201915060208501945060208101905062000387565b86831015620003ce5784890151620003ca601f891682620002be565b8355505b6001600288020188555050505b505050505050565b61349b80620003f36000396000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c80635b5c45f3116100b8578063b390c0ab1161007c578063b390c0ab1461036d578063cc9b131014610389578063e144976e146103b9578063e985e9c5146103d5578063f242432a14610405578063fa82aa5f1461042157610136565b80635b5c45f3146102df578063880cdc31146102fb5780638da5cb5b146103175780639465ffa914610335578063a22cb4651461035157610136565b8063163c63d1116100ff578063163c63d1146102175780631829f456146102475780632eb2c2d614610263578063413f818b1461027f5780634e1273f4146102af57610136565b8062fdd58e1461013b57806301ffc9a71461016b5780630202ace11461019b5780630e89341c146101cb578063156e29f6146101fb575b600080fd5b61015560048036038101906101509190611e93565b61043d565b6040516101629190611ee2565b60405180910390f35b61018560048036038101906101809190611f55565b610497565b6040516101929190611f9d565b60405180910390f35b6101b560048036038101906101b09190611fb8565b610579565b6040516101c29190612075565b60405180910390f35b6101e560048036038101906101e09190611fb8565b610621565b6040516101f29190612075565b60405180910390f35b61021560048036038101906102109190612097565b6106c9565b005b610231600480360381019061022c9190611fb8565b610879565b60405161023e9190611ee2565b60405180910390f35b610261600480360381019061025c919061221f565b610899565b005b61027d60048036038101906102789190612413565b6109cf565b005b61029960048036038101906102949190611fb8565b610a0a565b6040516102a69190611ee2565b60405180910390f35b6102c960048036038101906102c491906125a5565b610a2a565b6040516102d691906126db565b60405180910390f35b6102f960048036038101906102f491906126fd565b610b39565b005b610315600480360381019061031091906127cc565b610cd3565b005b61031f610e16565b60405161032c9190612808565b60405180910390f35b61034f600480360381019061034a9190612823565b610e3c565b005b61036b600480360381019061036691906128f6565b611069565b005b61038760048036038101906103829190612936565b6110a4565b005b6103a3600480360381019061039e9190611fb8565b6110e0565b6040516103b09190612075565b60405180910390f35b6103d360048036038101906103ce9190612976565b611188565b005b6103ef60048036038101906103ea91906129d2565b611299565b6040516103fc9190611f9d565b60405180910390f35b61041f600480360381019061041a9190612a12565b6112d6565b005b61043b60048036038101906104369190612936565b611311565b005b600080600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061056257507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610572575061057182611419565b5b9050919050565b606060046000838152602001908152602001600020600301805461059c90612ad8565b80601f01602080910402602001604051908101604052809291908181526020018280546105c890612ad8565b80156106155780601f106105ea57610100808354040283529160200191610615565b820191906000526020600020905b8154815290600101906020018083116105f857829003601f168201915b50505050509050919050565b606060046000838152602001908152602001600020600501805461064490612ad8565b80601f016020809104026020016040519081016040528092919081815260200182805461067090612ad8565b80156106bd5780601f10610692576101008083540402835291602001916106bd565b820191906000526020600020905b8154815290600101906020018083116106a057829003601f168201915b50505050509050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610759576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075090612b55565b60405180910390fd5b60006004600084815260200190815260200160002060020154036107b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a990612bc1565b60405180910390fd5b60046000838152602001908152602001600020600201548160046000858152602001908152602001600020600101546107eb9190612c10565b111561082c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082390612c90565b60405180910390fd5b806004600084815260200190815260200160002060010160008282546108529190612c10565b9250508190555061087483838360405180602001604052806000815250611483565b505050565b600060046000838152602001908152602001600020600201549050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610929576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092090612b55565b60405180910390fd5b6000600460008581526020019081526020016000206002015403610982576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097990612bc1565b60405180910390fd5b816004600085815260200190815260200160002060030190816109a59190612e5c565b50806004600085815260200190815260200160002060040190816109c99190612e5c565b50505050565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0190612fa0565b60405180910390fd5b600060046000838152602001908152602001600020600101549050919050565b60608151835114610a7657815183516040517f5b059991000000000000000000000000000000000000000000000000000000008152600401610a6d929190612fc0565b60405180910390fd5b6000835167ffffffffffffffff811115610a9357610a926120f4565b5b604051908082528060200260200182016040528015610ac15781602001602082028036833780820191505090505b50905060005b8451811015610b2e57610afe610ae6828761151c90919063ffffffff16565b610af9838761153090919063ffffffff16565b61043d565b828281518110610b1157610b10612fe9565b5b60200260200101818152505080610b2790613018565b9050610ac7565b508091505092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610bc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc090612b55565b60405180910390fd5b6000600460008781526020019081526020016000206002015414610c22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c19906130ac565b60405180910390fd5b60006040518060c001604052808781526020016000815260200186815260200185815260200184815260200183815250905080600460008881526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003019081610c9b9190612e5c565b506080820151816004019081610cb19190612e5c565b5060a0820151816005019081610cc79190612e5c565b50905050505050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5a90612b55565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610dd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc990613118565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ecc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec390612b55565b60405180910390fd5b6000835114158015610edf575080518351145b610f1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f15906131aa565b60405180910390fd5b6001825103610fa65760005b8351811015610fa057610f8d848281518110610f4957610f48612fe9565b5b602002602001015184600081518110610f6557610f64612fe9565b5b6020026020010151848481518110610f8057610f7f612fe9565b5b60200260200101516106c9565b8080610f9890613018565b915050610f2a565b50611064565b8151835114610fea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe19061323c565b60405180910390fd5b60005b83518110156110625761104f84828151811061100c5761100b612fe9565b5b602002602001015184838151811061102757611026612fe9565b5b602002602001015184848151811061104257611041612fe9565b5b60200260200101516106c9565b808061105a90613018565b915050610fed565b505b505050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109b90612fa0565b60405180910390fd5b806004600084815260200190815260200160002060010160008282546110ca919061325c565b925050819055506110dc338383611544565b5050565b606060046000838152602001908152602001600020600401805461110390612ad8565b80601f016020809104026020016040519081016040528092919081815260200182805461112f90612ad8565b801561117c5780601f106111515761010080835404028352916020019161117c565b820191906000526020600020905b81548152906001019060200180831161115f57829003601f168201915b50505050509050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611218576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120f90612b55565b60405180910390fd5b6000600460008481526020019081526020016000206002015403611271576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126890612bc1565b60405180910390fd5b806004600084815260200190815260200160002060050190816112949190612e5c565b505050565b60006040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112cd90612fa0565b60405180910390fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161130890612fa0565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146113a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139890612b55565b60405180910390fd5b60006004600084815260200190815260200160002060020154036113fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113f190612bc1565b60405180910390fd5b8060046000848152602001908152602001600020600201819055505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036114f55760006040517f57f447ce0000000000000000000000000000000000000000000000000000000081526004016114ec9190612808565b60405180910390fd5b60008061150285856115eb565b9150915061151460008784848761161b565b505050505050565b600060208202602084010151905092915050565b600060208202602084010151905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036115b65760006040517f01a835140000000000000000000000000000000000000000000000000000000081526004016115ad9190612808565b60405180910390fd5b6000806115c384846115eb565b915091506115e485600084846040518060200160405280600081525061161b565b5050505050565b60608060405191506001825283602083015260408201905060018152826020820152604081016040529250929050565b611627858585856116cd565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146116c6576000611665611a7b565b905060018451036116b557600061168660008661153090919063ffffffff16565b9050600061169e60008661153090919063ffffffff16565b90506116ae838989858589611a83565b50506116c4565b6116c3818787878787611c37565b5b505b5050505050565b805182511461171757815181516040517f5b05999100000000000000000000000000000000000000000000000000000000815260040161170e929190612fc0565b60405180910390fd5b6000611721611a7b565b905060005b8351811015611936576000611744828661153090919063ffffffff16565b9050600061175b838661153090919063ffffffff16565b9050600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161461188857600080600084815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561183057888183856040517f03dee4c50000000000000000000000000000000000000000000000000000000081526004016118279493929190613290565b60405180910390fd5b81810360008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614611923578060008084815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461191b9190612c10565b925050819055505b50508061192f90613018565b9050611726565b5060018351036119f557600061195660008561153090919063ffffffff16565b9050600061196e60008561153090919063ffffffff16565b90508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6285856040516119e6929190612fc0565b60405180910390a45050611a74565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611a6b9291906132d5565b60405180910390a45b5050505050565b600033905090565b60008473ffffffffffffffffffffffffffffffffffffffff163b1115611c2f578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401611ae4959493929190613361565b6020604051808303816000875af1925050508015611b2057506040513d601f19601f82011682018060405250810190611b1d91906133d0565b60015b611ba4573d8060008114611b50576040519150601f19603f3d011682016040523d82523d6000602084013e611b55565b606091505b506000815103611b9c57846040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401611b939190612808565b60405180910390fd5b805181602001fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611c2d57846040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401611c249190612808565b60405180910390fd5b505b505050505050565b60008473ffffffffffffffffffffffffffffffffffffffff163b1115611de3578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401611c989594939291906133fd565b6020604051808303816000875af1925050508015611cd457506040513d601f19601f82011682018060405250810190611cd191906133d0565b60015b611d58573d8060008114611d04576040519150601f19603f3d011682016040523d82523d6000602084013e611d09565b606091505b506000815103611d5057846040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401611d479190612808565b60405180910390fd5b805181602001fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611de157846040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401611dd89190612808565b60405180910390fd5b505b505050505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611e2a82611dff565b9050919050565b611e3a81611e1f565b8114611e4557600080fd5b50565b600081359050611e5781611e31565b92915050565b6000819050919050565b611e7081611e5d565b8114611e7b57600080fd5b50565b600081359050611e8d81611e67565b92915050565b60008060408385031215611eaa57611ea9611df5565b5b6000611eb885828601611e48565b9250506020611ec985828601611e7e565b9150509250929050565b611edc81611e5d565b82525050565b6000602082019050611ef76000830184611ed3565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611f3281611efd565b8114611f3d57600080fd5b50565b600081359050611f4f81611f29565b92915050565b600060208284031215611f6b57611f6a611df5565b5b6000611f7984828501611f40565b91505092915050565b60008115159050919050565b611f9781611f82565b82525050565b6000602082019050611fb26000830184611f8e565b92915050565b600060208284031215611fce57611fcd611df5565b5b6000611fdc84828501611e7e565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561201f578082015181840152602081019050612004565b60008484015250505050565b6000601f19601f8301169050919050565b600061204782611fe5565b6120518185611ff0565b9350612061818560208601612001565b61206a8161202b565b840191505092915050565b6000602082019050818103600083015261208f818461203c565b905092915050565b6000806000606084860312156120b0576120af611df5565b5b60006120be86828701611e48565b93505060206120cf86828701611e7e565b92505060406120e086828701611e7e565b9150509250925092565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61212c8261202b565b810181811067ffffffffffffffff8211171561214b5761214a6120f4565b5b80604052505050565b600061215e611deb565b905061216a8282612123565b919050565b600067ffffffffffffffff82111561218a576121896120f4565b5b6121938261202b565b9050602081019050919050565b82818337600083830152505050565b60006121c26121bd8461216f565b612154565b9050828152602081018484840111156121de576121dd6120ef565b5b6121e98482856121a0565b509392505050565b600082601f830112612206576122056120ea565b5b81356122168482602086016121af565b91505092915050565b60008060006060848603121561223857612237611df5565b5b600061224686828701611e7e565b935050602084013567ffffffffffffffff81111561226757612266611dfa565b5b612273868287016121f1565b925050604084013567ffffffffffffffff81111561229457612293611dfa565b5b6122a0868287016121f1565b9150509250925092565b600067ffffffffffffffff8211156122c5576122c46120f4565b5b602082029050602081019050919050565b600080fd5b60006122ee6122e9846122aa565b612154565b90508083825260208201905060208402830185811115612311576123106122d6565b5b835b8181101561233a57806123268882611e7e565b845260208401935050602081019050612313565b5050509392505050565b600082601f830112612359576123586120ea565b5b81356123698482602086016122db565b91505092915050565b600067ffffffffffffffff82111561238d5761238c6120f4565b5b6123968261202b565b9050602081019050919050565b60006123b66123b184612372565b612154565b9050828152602081018484840111156123d2576123d16120ef565b5b6123dd8482856121a0565b509392505050565b600082601f8301126123fa576123f96120ea565b5b813561240a8482602086016123a3565b91505092915050565b600080600080600060a0868803121561242f5761242e611df5565b5b600061243d88828901611e48565b955050602061244e88828901611e48565b945050604086013567ffffffffffffffff81111561246f5761246e611dfa565b5b61247b88828901612344565b935050606086013567ffffffffffffffff81111561249c5761249b611dfa565b5b6124a888828901612344565b925050608086013567ffffffffffffffff8111156124c9576124c8611dfa565b5b6124d5888289016123e5565b9150509295509295909350565b600067ffffffffffffffff8211156124fd576124fc6120f4565b5b602082029050602081019050919050565b600061252161251c846124e2565b612154565b90508083825260208201905060208402830185811115612544576125436122d6565b5b835b8181101561256d57806125598882611e48565b845260208401935050602081019050612546565b5050509392505050565b600082601f83011261258c5761258b6120ea565b5b813561259c84826020860161250e565b91505092915050565b600080604083850312156125bc576125bb611df5565b5b600083013567ffffffffffffffff8111156125da576125d9611dfa565b5b6125e685828601612577565b925050602083013567ffffffffffffffff81111561260757612606611dfa565b5b61261385828601612344565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61265281611e5d565b82525050565b60006126648383612649565b60208301905092915050565b6000602082019050919050565b60006126888261261d565b6126928185612628565b935061269d83612639565b8060005b838110156126ce5781516126b58882612658565b97506126c083612670565b9250506001810190506126a1565b5085935050505092915050565b600060208201905081810360008301526126f5818461267d565b905092915050565b600080600080600060a0868803121561271957612718611df5565b5b600061272788828901611e7e565b955050602061273888828901611e7e565b945050604086013567ffffffffffffffff81111561275957612758611dfa565b5b612765888289016121f1565b935050606086013567ffffffffffffffff81111561278657612785611dfa565b5b612792888289016121f1565b925050608086013567ffffffffffffffff8111156127b3576127b2611dfa565b5b6127bf888289016121f1565b9150509295509295909350565b6000602082840312156127e2576127e1611df5565b5b60006127f084828501611e48565b91505092915050565b61280281611e1f565b82525050565b600060208201905061281d60008301846127f9565b92915050565b60008060006060848603121561283c5761283b611df5565b5b600084013567ffffffffffffffff81111561285a57612859611dfa565b5b61286686828701612577565b935050602084013567ffffffffffffffff81111561288757612886611dfa565b5b61289386828701612344565b925050604084013567ffffffffffffffff8111156128b4576128b3611dfa565b5b6128c086828701612344565b9150509250925092565b6128d381611f82565b81146128de57600080fd5b50565b6000813590506128f0816128ca565b92915050565b6000806040838503121561290d5761290c611df5565b5b600061291b85828601611e48565b925050602061292c858286016128e1565b9150509250929050565b6000806040838503121561294d5761294c611df5565b5b600061295b85828601611e7e565b925050602061296c85828601611e7e565b9150509250929050565b6000806040838503121561298d5761298c611df5565b5b600061299b85828601611e7e565b925050602083013567ffffffffffffffff8111156129bc576129bb611dfa565b5b6129c8858286016121f1565b9150509250929050565b600080604083850312156129e9576129e8611df5565b5b60006129f785828601611e48565b9250506020612a0885828601611e48565b9150509250929050565b600080600080600060a08688031215612a2e57612a2d611df5565b5b6000612a3c88828901611e48565b9550506020612a4d88828901611e48565b9450506040612a5e88828901611e7e565b9350506060612a6f88828901611e7e565b925050608086013567ffffffffffffffff811115612a9057612a8f611dfa565b5b612a9c888289016123e5565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612af057607f821691505b602082108103612b0357612b02612aa9565b5b50919050565b7f4f6e6c79206f70657261746f722063616e206d696e74206e657720736f756c73600082015250565b6000612b3f602083611ff0565b9150612b4a82612b09565b602082019050919050565b60006020820190508181036000830152612b6e81612b32565b9050919050565b7f546f6b656e4944206e6f7420496e697469616c697a6564000000000000000000600082015250565b6000612bab601783611ff0565b9150612bb682612b75565b602082019050919050565b60006020820190508181036000830152612bda81612b9e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612c1b82611e5d565b9150612c2683611e5d565b9250828201905080821115612c3e57612c3d612be1565b5b92915050565b7f4e6f7420456e6f75676820546f6b656e4944206c656674000000000000000000600082015250565b6000612c7a601783611ff0565b9150612c8582612c44565b602082019050919050565b60006020820190508181036000830152612ca981612c6d565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612d127fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612cd5565b612d1c8683612cd5565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612d59612d54612d4f84611e5d565b612d34565b611e5d565b9050919050565b6000819050919050565b612d7383612d3e565b612d87612d7f82612d60565b848454612ce2565b825550505050565b600090565b612d9c612d8f565b612da7818484612d6a565b505050565b5b81811015612dcb57612dc0600082612d94565b600181019050612dad565b5050565b601f821115612e1057612de181612cb0565b612dea84612cc5565b81016020851015612df9578190505b612e0d612e0585612cc5565b830182612dac565b50505b505050565b600082821c905092915050565b6000612e3360001984600802612e15565b1980831691505092915050565b6000612e4c8383612e22565b9150826002028217905092915050565b612e6582611fe5565b67ffffffffffffffff811115612e7e57612e7d6120f4565b5b612e888254612ad8565b612e93828285612dcf565b600060209050601f831160018114612ec65760008415612eb4578287015190505b612ebe8582612e40565b865550612f26565b601f198416612ed486612cb0565b60005b82811015612efc57848901518255600182019150602085019450602081019050612ed7565b86831015612f195784890151612f15601f891682612e22565b8355505b6001600288020188555050505b505050505050565b7f5472616e73666572206e6f7420737570706f7274656420666f7220736f756c2060008201527f626f756e6420746f6b656e2e0000000000000000000000000000000000000000602082015250565b6000612f8a602c83611ff0565b9150612f9582612f2e565b604082019050919050565b60006020820190508181036000830152612fb981612f7d565b9050919050565b6000604082019050612fd56000830185611ed3565b612fe26020830184611ed3565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061302382611e5d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361305557613054612be1565b5b600182019050919050565b7f546f6b656e494420616c726561647920496e697469616c697a65640000000000600082015250565b6000613096601b83611ff0565b91506130a182613060565b602082019050919050565b600060208201905081810360008301526130c581613089565b9050919050565b7f496e76616c6964204f776e657200000000000000000000000000000000000000600082015250565b6000613102600d83611ff0565b915061310d826130cc565b602082019050919050565b60006020820190508181036000830152613131816130f5565b9050919050565b7f4e6565642076616c6964206163636f756e742f616d6f756e74206c697374206160008201527f6e6420457175616c206c656e6774680000000000000000000000000000000000602082015250565b6000613194602f83611ff0565b915061319f82613138565b604082019050919050565b600060208201905081810360008301526131c381613187565b9050919050565b7f4e6565642076616c6964206163636f756e742f616d6f756e742f6964206c697360008201527f7420616e6420457175616c206c656e6774680000000000000000000000000000602082015250565b6000613226603283611ff0565b9150613231826131ca565b604082019050919050565b6000602082019050818103600083015261325581613219565b9050919050565b600061326782611e5d565b915061327283611e5d565b925082820390508181111561328a57613289612be1565b5b92915050565b60006080820190506132a560008301876127f9565b6132b26020830186611ed3565b6132bf6040830185611ed3565b6132cc6060830184611ed3565b95945050505050565b600060408201905081810360008301526132ef818561267d565b90508181036020830152613303818461267d565b90509392505050565b600081519050919050565b600082825260208201905092915050565b60006133338261330c565b61333d8185613317565b935061334d818560208601612001565b6133568161202b565b840191505092915050565b600060a08201905061337660008301886127f9565b61338360208301876127f9565b6133906040830186611ed3565b61339d6060830185611ed3565b81810360808301526133af8184613328565b90509695505050505050565b6000815190506133ca81611f29565b92915050565b6000602082840312156133e6576133e5611df5565b5b60006133f4848285016133bb565b91505092915050565b600060a08201905061341260008301886127f9565b61341f60208301876127f9565b8181036040830152613431818661267d565b90508181036060830152613445818561267d565b905081810360808301526134598184613328565b9050969550505050505056fea2646970667358221220557456753179f3e5c9536c3a04b76e29ef6fbe0a6e70ae9afe8c703b8bb1bf2164736f6c63430008140033",
}

// SbtABI is the input ABI used to generate the binding from.
// Deprecated: Use SbtMetaData.ABI instead.
var SbtABI = SbtMetaData.ABI

// SbtBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SbtMetaData.Bin instead.
var SbtBin = SbtMetaData.Bin

// DeploySbt deploys a new Ethereum contract, binding an instance of Sbt to it.
func DeploySbt(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Sbt, error) {
	parsed, err := SbtMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SbtBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Sbt{SbtCaller: SbtCaller{contract: contract}, SbtTransactor: SbtTransactor{contract: contract}, SbtFilterer: SbtFilterer{contract: contract}}, nil
}

// Sbt is an auto generated Go binding around an Ethereum contract.
type Sbt struct {
	SbtCaller     // Read-only binding to the contract
	SbtTransactor // Write-only binding to the contract
	SbtFilterer   // Log filterer for contract events
}

// SbtCaller is an auto generated read-only Go binding around an Ethereum contract.
type SbtCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SbtTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SbtTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SbtFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SbtFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SbtSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SbtSession struct {
	Contract     *Sbt              // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SbtCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SbtCallerSession struct {
	Contract *SbtCaller    // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// SbtTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SbtTransactorSession struct {
	Contract     *SbtTransactor    // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SbtRaw is an auto generated low-level Go binding around an Ethereum contract.
type SbtRaw struct {
	Contract *Sbt // Generic contract binding to access the raw methods on
}

// SbtCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SbtCallerRaw struct {
	Contract *SbtCaller // Generic read-only contract binding to access the raw methods on
}

// SbtTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SbtTransactorRaw struct {
	Contract *SbtTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSbt creates a new instance of Sbt, bound to a specific deployed contract.
func NewSbt(address common.Address, backend bind.ContractBackend) (*Sbt, error) {
	contract, err := bindSbt(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Sbt{SbtCaller: SbtCaller{contract: contract}, SbtTransactor: SbtTransactor{contract: contract}, SbtFilterer: SbtFilterer{contract: contract}}, nil
}

// NewSbtCaller creates a new read-only instance of Sbt, bound to a specific deployed contract.
func NewSbtCaller(address common.Address, caller bind.ContractCaller) (*SbtCaller, error) {
	contract, err := bindSbt(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SbtCaller{contract: contract}, nil
}

// NewSbtTransactor creates a new write-only instance of Sbt, bound to a specific deployed contract.
func NewSbtTransactor(address common.Address, transactor bind.ContractTransactor) (*SbtTransactor, error) {
	contract, err := bindSbt(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SbtTransactor{contract: contract}, nil
}

// NewSbtFilterer creates a new log filterer instance of Sbt, bound to a specific deployed contract.
func NewSbtFilterer(address common.Address, filterer bind.ContractFilterer) (*SbtFilterer, error) {
	contract, err := bindSbt(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SbtFilterer{contract: contract}, nil
}

// bindSbt binds a generic wrapper to an already deployed contract.
func bindSbt(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SbtMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Sbt *SbtRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Sbt.Contract.SbtCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Sbt *SbtRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Sbt.Contract.SbtTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Sbt *SbtRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Sbt.Contract.SbtTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Sbt *SbtCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Sbt.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Sbt *SbtTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Sbt.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Sbt *SbtTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Sbt.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_Sbt *SbtCaller) BalanceOf(opts *bind.CallOpts, account common.Address, id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "balanceOf", account, id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_Sbt *SbtSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _Sbt.Contract.BalanceOf(&_Sbt.CallOpts, account, id)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_Sbt *SbtCallerSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _Sbt.Contract.BalanceOf(&_Sbt.CallOpts, account, id)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_Sbt *SbtCaller) BalanceOfBatch(opts *bind.CallOpts, accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "balanceOfBatch", accounts, ids)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_Sbt *SbtSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _Sbt.Contract.BalanceOfBatch(&_Sbt.CallOpts, accounts, ids)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_Sbt *SbtCallerSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _Sbt.Contract.BalanceOfBatch(&_Sbt.CallOpts, accounts, ids)
}

// Getminted is a free data retrieval call binding the contract method 0x413f818b.
//
// Solidity: function getminted(uint256 tokenid) view returns(uint256)
func (_Sbt *SbtCaller) Getminted(opts *bind.CallOpts, tokenid *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "getminted", tokenid)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Getminted is a free data retrieval call binding the contract method 0x413f818b.
//
// Solidity: function getminted(uint256 tokenid) view returns(uint256)
func (_Sbt *SbtSession) Getminted(tokenid *big.Int) (*big.Int, error) {
	return _Sbt.Contract.Getminted(&_Sbt.CallOpts, tokenid)
}

// Getminted is a free data retrieval call binding the contract method 0x413f818b.
//
// Solidity: function getminted(uint256 tokenid) view returns(uint256)
func (_Sbt *SbtCallerSession) Getminted(tokenid *big.Int) (*big.Int, error) {
	return _Sbt.Contract.Getminted(&_Sbt.CallOpts, tokenid)
}

// Getname is a free data retrieval call binding the contract method 0x0202ace1.
//
// Solidity: function getname(uint256 tokenid) view returns(string)
func (_Sbt *SbtCaller) Getname(opts *bind.CallOpts, tokenid *big.Int) (string, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "getname", tokenid)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Getname is a free data retrieval call binding the contract method 0x0202ace1.
//
// Solidity: function getname(uint256 tokenid) view returns(string)
func (_Sbt *SbtSession) Getname(tokenid *big.Int) (string, error) {
	return _Sbt.Contract.Getname(&_Sbt.CallOpts, tokenid)
}

// Getname is a free data retrieval call binding the contract method 0x0202ace1.
//
// Solidity: function getname(uint256 tokenid) view returns(string)
func (_Sbt *SbtCallerSession) Getname(tokenid *big.Int) (string, error) {
	return _Sbt.Contract.Getname(&_Sbt.CallOpts, tokenid)
}

// Getsymbol is a free data retrieval call binding the contract method 0xcc9b1310.
//
// Solidity: function getsymbol(uint256 tokenid) view returns(string)
func (_Sbt *SbtCaller) Getsymbol(opts *bind.CallOpts, tokenid *big.Int) (string, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "getsymbol", tokenid)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Getsymbol is a free data retrieval call binding the contract method 0xcc9b1310.
//
// Solidity: function getsymbol(uint256 tokenid) view returns(string)
func (_Sbt *SbtSession) Getsymbol(tokenid *big.Int) (string, error) {
	return _Sbt.Contract.Getsymbol(&_Sbt.CallOpts, tokenid)
}

// Getsymbol is a free data retrieval call binding the contract method 0xcc9b1310.
//
// Solidity: function getsymbol(uint256 tokenid) view returns(string)
func (_Sbt *SbtCallerSession) Getsymbol(tokenid *big.Int) (string, error) {
	return _Sbt.Contract.Getsymbol(&_Sbt.CallOpts, tokenid)
}

// Gettotalamount is a free data retrieval call binding the contract method 0x163c63d1.
//
// Solidity: function gettotalamount(uint256 tokenid) view returns(uint256)
func (_Sbt *SbtCaller) Gettotalamount(opts *bind.CallOpts, tokenid *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "gettotalamount", tokenid)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Gettotalamount is a free data retrieval call binding the contract method 0x163c63d1.
//
// Solidity: function gettotalamount(uint256 tokenid) view returns(uint256)
func (_Sbt *SbtSession) Gettotalamount(tokenid *big.Int) (*big.Int, error) {
	return _Sbt.Contract.Gettotalamount(&_Sbt.CallOpts, tokenid)
}

// Gettotalamount is a free data retrieval call binding the contract method 0x163c63d1.
//
// Solidity: function gettotalamount(uint256 tokenid) view returns(uint256)
func (_Sbt *SbtCallerSession) Gettotalamount(tokenid *big.Int) (*big.Int, error) {
	return _Sbt.Contract.Gettotalamount(&_Sbt.CallOpts, tokenid)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address , address ) view returns(bool)
func (_Sbt *SbtCaller) IsApprovedForAll(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (bool, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "isApprovedForAll", arg0, arg1)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address , address ) view returns(bool)
func (_Sbt *SbtSession) IsApprovedForAll(arg0 common.Address, arg1 common.Address) (bool, error) {
	return _Sbt.Contract.IsApprovedForAll(&_Sbt.CallOpts, arg0, arg1)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address , address ) view returns(bool)
func (_Sbt *SbtCallerSession) IsApprovedForAll(arg0 common.Address, arg1 common.Address) (bool, error) {
	return _Sbt.Contract.IsApprovedForAll(&_Sbt.CallOpts, arg0, arg1)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Sbt *SbtCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Sbt *SbtSession) Owner() (common.Address, error) {
	return _Sbt.Contract.Owner(&_Sbt.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Sbt *SbtCallerSession) Owner() (common.Address, error) {
	return _Sbt.Contract.Owner(&_Sbt.CallOpts)
}

// SafeTransferFrom is a free data retrieval call binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address , address , uint256 , uint256 , bytes ) pure returns()
func (_Sbt *SbtCaller) SafeTransferFrom(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) error {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "safeTransferFrom", arg0, arg1, arg2, arg3, arg4)

	if err != nil {
		return err
	}

	return err

}

// SafeTransferFrom is a free data retrieval call binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address , address , uint256 , uint256 , bytes ) pure returns()
func (_Sbt *SbtSession) SafeTransferFrom(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) error {
	return _Sbt.Contract.SafeTransferFrom(&_Sbt.CallOpts, arg0, arg1, arg2, arg3, arg4)
}

// SafeTransferFrom is a free data retrieval call binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address , address , uint256 , uint256 , bytes ) pure returns()
func (_Sbt *SbtCallerSession) SafeTransferFrom(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) error {
	return _Sbt.Contract.SafeTransferFrom(&_Sbt.CallOpts, arg0, arg1, arg2, arg3, arg4)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Sbt *SbtCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Sbt *SbtSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Sbt.Contract.SupportsInterface(&_Sbt.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Sbt *SbtCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Sbt.Contract.SupportsInterface(&_Sbt.CallOpts, interfaceId)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 id) view returns(string)
func (_Sbt *SbtCaller) Uri(opts *bind.CallOpts, id *big.Int) (string, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "uri", id)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 id) view returns(string)
func (_Sbt *SbtSession) Uri(id *big.Int) (string, error) {
	return _Sbt.Contract.Uri(&_Sbt.CallOpts, id)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 id) view returns(string)
func (_Sbt *SbtCallerSession) Uri(id *big.Int) (string, error) {
	return _Sbt.Contract.Uri(&_Sbt.CallOpts, id)
}

// Batchmint is a paid mutator transaction binding the contract method 0x9465ffa9.
//
// Solidity: function batchmint(address[] account, uint256[] id, uint256[] amount) returns()
func (_Sbt *SbtTransactor) Batchmint(opts *bind.TransactOpts, account []common.Address, id []*big.Int, amount []*big.Int) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "batchmint", account, id, amount)
}

// Batchmint is a paid mutator transaction binding the contract method 0x9465ffa9.
//
// Solidity: function batchmint(address[] account, uint256[] id, uint256[] amount) returns()
func (_Sbt *SbtSession) Batchmint(account []common.Address, id []*big.Int, amount []*big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.Batchmint(&_Sbt.TransactOpts, account, id, amount)
}

// Batchmint is a paid mutator transaction binding the contract method 0x9465ffa9.
//
// Solidity: function batchmint(address[] account, uint256[] id, uint256[] amount) returns()
func (_Sbt *SbtTransactorSession) Batchmint(account []common.Address, id []*big.Int, amount []*big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.Batchmint(&_Sbt.TransactOpts, account, id, amount)
}

// Burn is a paid mutator transaction binding the contract method 0xb390c0ab.
//
// Solidity: function burn(uint256 id, uint256 value) returns()
func (_Sbt *SbtTransactor) Burn(opts *bind.TransactOpts, id *big.Int, value *big.Int) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "burn", id, value)
}

// Burn is a paid mutator transaction binding the contract method 0xb390c0ab.
//
// Solidity: function burn(uint256 id, uint256 value) returns()
func (_Sbt *SbtSession) Burn(id *big.Int, value *big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.Burn(&_Sbt.TransactOpts, id, value)
}

// Burn is a paid mutator transaction binding the contract method 0xb390c0ab.
//
// Solidity: function burn(uint256 id, uint256 value) returns()
func (_Sbt *SbtTransactorSession) Burn(id *big.Int, value *big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.Burn(&_Sbt.TransactOpts, id, value)
}

// Mint is a paid mutator transaction binding the contract method 0x156e29f6.
//
// Solidity: function mint(address account, uint256 id, uint256 amount) returns()
func (_Sbt *SbtTransactor) Mint(opts *bind.TransactOpts, account common.Address, id *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "mint", account, id, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x156e29f6.
//
// Solidity: function mint(address account, uint256 id, uint256 amount) returns()
func (_Sbt *SbtSession) Mint(account common.Address, id *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.Mint(&_Sbt.TransactOpts, account, id, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x156e29f6.
//
// Solidity: function mint(address account, uint256 id, uint256 amount) returns()
func (_Sbt *SbtTransactorSession) Mint(account common.Address, id *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.Mint(&_Sbt.TransactOpts, account, id, amount)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address , address , uint256[] , uint256[] , bytes ) returns()
func (_Sbt *SbtTransactor) SafeBatchTransferFrom(opts *bind.TransactOpts, arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "safeBatchTransferFrom", arg0, arg1, arg2, arg3, arg4)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address , address , uint256[] , uint256[] , bytes ) returns()
func (_Sbt *SbtSession) SafeBatchTransferFrom(arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) (*types.Transaction, error) {
	return _Sbt.Contract.SafeBatchTransferFrom(&_Sbt.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address , address , uint256[] , uint256[] , bytes ) returns()
func (_Sbt *SbtTransactorSession) SafeBatchTransferFrom(arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) (*types.Transaction, error) {
	return _Sbt.Contract.SafeBatchTransferFrom(&_Sbt.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address , bool ) returns()
func (_Sbt *SbtTransactor) SetApprovalForAll(opts *bind.TransactOpts, arg0 common.Address, arg1 bool) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "setApprovalForAll", arg0, arg1)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address , bool ) returns()
func (_Sbt *SbtSession) SetApprovalForAll(arg0 common.Address, arg1 bool) (*types.Transaction, error) {
	return _Sbt.Contract.SetApprovalForAll(&_Sbt.TransactOpts, arg0, arg1)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address , bool ) returns()
func (_Sbt *SbtTransactorSession) SetApprovalForAll(arg0 common.Address, arg1 bool) (*types.Transaction, error) {
	return _Sbt.Contract.SetApprovalForAll(&_Sbt.TransactOpts, arg0, arg1)
}

// SettokenIDInfo is a paid mutator transaction binding the contract method 0x5b5c45f3.
//
// Solidity: function settokenIDInfo(uint256 tokenid, uint256 totalamount, string name, string symbol, string url) returns()
func (_Sbt *SbtTransactor) SettokenIDInfo(opts *bind.TransactOpts, tokenid *big.Int, totalamount *big.Int, name string, symbol string, url string) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "settokenIDInfo", tokenid, totalamount, name, symbol, url)
}

// SettokenIDInfo is a paid mutator transaction binding the contract method 0x5b5c45f3.
//
// Solidity: function settokenIDInfo(uint256 tokenid, uint256 totalamount, string name, string symbol, string url) returns()
func (_Sbt *SbtSession) SettokenIDInfo(tokenid *big.Int, totalamount *big.Int, name string, symbol string, url string) (*types.Transaction, error) {
	return _Sbt.Contract.SettokenIDInfo(&_Sbt.TransactOpts, tokenid, totalamount, name, symbol, url)
}

// SettokenIDInfo is a paid mutator transaction binding the contract method 0x5b5c45f3.
//
// Solidity: function settokenIDInfo(uint256 tokenid, uint256 totalamount, string name, string symbol, string url) returns()
func (_Sbt *SbtTransactorSession) SettokenIDInfo(tokenid *big.Int, totalamount *big.Int, name string, symbol string, url string) (*types.Transaction, error) {
	return _Sbt.Contract.SettokenIDInfo(&_Sbt.TransactOpts, tokenid, totalamount, name, symbol, url)
}

// UpdateNameSymbol is a paid mutator transaction binding the contract method 0x1829f456.
//
// Solidity: function updateNameSymbol(uint256 tokenid, string name, string symbol) returns()
func (_Sbt *SbtTransactor) UpdateNameSymbol(opts *bind.TransactOpts, tokenid *big.Int, name string, symbol string) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "updateNameSymbol", tokenid, name, symbol)
}

// UpdateNameSymbol is a paid mutator transaction binding the contract method 0x1829f456.
//
// Solidity: function updateNameSymbol(uint256 tokenid, string name, string symbol) returns()
func (_Sbt *SbtSession) UpdateNameSymbol(tokenid *big.Int, name string, symbol string) (*types.Transaction, error) {
	return _Sbt.Contract.UpdateNameSymbol(&_Sbt.TransactOpts, tokenid, name, symbol)
}

// UpdateNameSymbol is a paid mutator transaction binding the contract method 0x1829f456.
//
// Solidity: function updateNameSymbol(uint256 tokenid, string name, string symbol) returns()
func (_Sbt *SbtTransactorSession) UpdateNameSymbol(tokenid *big.Int, name string, symbol string) (*types.Transaction, error) {
	return _Sbt.Contract.UpdateNameSymbol(&_Sbt.TransactOpts, tokenid, name, symbol)
}

// UpdateOwner is a paid mutator transaction binding the contract method 0x880cdc31.
//
// Solidity: function updateOwner(address newowner) returns()
func (_Sbt *SbtTransactor) UpdateOwner(opts *bind.TransactOpts, newowner common.Address) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "updateOwner", newowner)
}

// UpdateOwner is a paid mutator transaction binding the contract method 0x880cdc31.
//
// Solidity: function updateOwner(address newowner) returns()
func (_Sbt *SbtSession) UpdateOwner(newowner common.Address) (*types.Transaction, error) {
	return _Sbt.Contract.UpdateOwner(&_Sbt.TransactOpts, newowner)
}

// UpdateOwner is a paid mutator transaction binding the contract method 0x880cdc31.
//
// Solidity: function updateOwner(address newowner) returns()
func (_Sbt *SbtTransactorSession) UpdateOwner(newowner common.Address) (*types.Transaction, error) {
	return _Sbt.Contract.UpdateOwner(&_Sbt.TransactOpts, newowner)
}

// UpdateTotalAmount is a paid mutator transaction binding the contract method 0xfa82aa5f.
//
// Solidity: function updateTotalAmount(uint256 tokenid, uint256 totalamount) returns()
func (_Sbt *SbtTransactor) UpdateTotalAmount(opts *bind.TransactOpts, tokenid *big.Int, totalamount *big.Int) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "updateTotalAmount", tokenid, totalamount)
}

// UpdateTotalAmount is a paid mutator transaction binding the contract method 0xfa82aa5f.
//
// Solidity: function updateTotalAmount(uint256 tokenid, uint256 totalamount) returns()
func (_Sbt *SbtSession) UpdateTotalAmount(tokenid *big.Int, totalamount *big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.UpdateTotalAmount(&_Sbt.TransactOpts, tokenid, totalamount)
}

// UpdateTotalAmount is a paid mutator transaction binding the contract method 0xfa82aa5f.
//
// Solidity: function updateTotalAmount(uint256 tokenid, uint256 totalamount) returns()
func (_Sbt *SbtTransactorSession) UpdateTotalAmount(tokenid *big.Int, totalamount *big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.UpdateTotalAmount(&_Sbt.TransactOpts, tokenid, totalamount)
}

// UpdateURL is a paid mutator transaction binding the contract method 0xe144976e.
//
// Solidity: function updateURL(uint256 tokenid, string url) returns()
func (_Sbt *SbtTransactor) UpdateURL(opts *bind.TransactOpts, tokenid *big.Int, url string) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "updateURL", tokenid, url)
}

// UpdateURL is a paid mutator transaction binding the contract method 0xe144976e.
//
// Solidity: function updateURL(uint256 tokenid, string url) returns()
func (_Sbt *SbtSession) UpdateURL(tokenid *big.Int, url string) (*types.Transaction, error) {
	return _Sbt.Contract.UpdateURL(&_Sbt.TransactOpts, tokenid, url)
}

// UpdateURL is a paid mutator transaction binding the contract method 0xe144976e.
//
// Solidity: function updateURL(uint256 tokenid, string url) returns()
func (_Sbt *SbtTransactorSession) UpdateURL(tokenid *big.Int, url string) (*types.Transaction, error) {
	return _Sbt.Contract.UpdateURL(&_Sbt.TransactOpts, tokenid, url)
}

// SbtApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the Sbt contract.
type SbtApprovalForAllIterator struct {
	Event *SbtApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SbtApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SbtApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SbtApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SbtApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SbtApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SbtApprovalForAll represents a ApprovalForAll event raised by the Sbt contract.
type SbtApprovalForAll struct {
	Account  common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_Sbt *SbtFilterer) FilterApprovalForAll(opts *bind.FilterOpts, account []common.Address, operator []common.Address) (*SbtApprovalForAllIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Sbt.contract.FilterLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &SbtApprovalForAllIterator{contract: _Sbt.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_Sbt *SbtFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *SbtApprovalForAll, account []common.Address, operator []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Sbt.contract.WatchLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SbtApprovalForAll)
				if err := _Sbt.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_Sbt *SbtFilterer) ParseApprovalForAll(log types.Log) (*SbtApprovalForAll, error) {
	event := new(SbtApprovalForAll)
	if err := _Sbt.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SbtTransferBatchIterator is returned from FilterTransferBatch and is used to iterate over the raw logs and unpacked data for TransferBatch events raised by the Sbt contract.
type SbtTransferBatchIterator struct {
	Event *SbtTransferBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SbtTransferBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SbtTransferBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SbtTransferBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SbtTransferBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SbtTransferBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SbtTransferBatch represents a TransferBatch event raised by the Sbt contract.
type SbtTransferBatch struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Ids      []*big.Int
	Values   []*big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferBatch is a free log retrieval operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_Sbt *SbtFilterer) FilterTransferBatch(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*SbtTransferBatchIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Sbt.contract.FilterLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &SbtTransferBatchIterator{contract: _Sbt.contract, event: "TransferBatch", logs: logs, sub: sub}, nil
}

// WatchTransferBatch is a free log subscription operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_Sbt *SbtFilterer) WatchTransferBatch(opts *bind.WatchOpts, sink chan<- *SbtTransferBatch, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Sbt.contract.WatchLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SbtTransferBatch)
				if err := _Sbt.contract.UnpackLog(event, "TransferBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferBatch is a log parse operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_Sbt *SbtFilterer) ParseTransferBatch(log types.Log) (*SbtTransferBatch, error) {
	event := new(SbtTransferBatch)
	if err := _Sbt.contract.UnpackLog(event, "TransferBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SbtTransferSingleIterator is returned from FilterTransferSingle and is used to iterate over the raw logs and unpacked data for TransferSingle events raised by the Sbt contract.
type SbtTransferSingleIterator struct {
	Event *SbtTransferSingle // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SbtTransferSingleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SbtTransferSingle)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SbtTransferSingle)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SbtTransferSingleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SbtTransferSingleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SbtTransferSingle represents a TransferSingle event raised by the Sbt contract.
type SbtTransferSingle struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Id       *big.Int
	Value    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferSingle is a free log retrieval operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_Sbt *SbtFilterer) FilterTransferSingle(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*SbtTransferSingleIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Sbt.contract.FilterLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &SbtTransferSingleIterator{contract: _Sbt.contract, event: "TransferSingle", logs: logs, sub: sub}, nil
}

// WatchTransferSingle is a free log subscription operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_Sbt *SbtFilterer) WatchTransferSingle(opts *bind.WatchOpts, sink chan<- *SbtTransferSingle, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Sbt.contract.WatchLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SbtTransferSingle)
				if err := _Sbt.contract.UnpackLog(event, "TransferSingle", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferSingle is a log parse operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_Sbt *SbtFilterer) ParseTransferSingle(log types.Log) (*SbtTransferSingle, error) {
	event := new(SbtTransferSingle)
	if err := _Sbt.contract.UnpackLog(event, "TransferSingle", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SbtURIIterator is returned from FilterURI and is used to iterate over the raw logs and unpacked data for URI events raised by the Sbt contract.
type SbtURIIterator struct {
	Event *SbtURI // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SbtURIIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SbtURI)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SbtURI)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SbtURIIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SbtURIIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SbtURI represents a URI event raised by the Sbt contract.
type SbtURI struct {
	Value string
	Id    *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterURI is a free log retrieval operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_Sbt *SbtFilterer) FilterURI(opts *bind.FilterOpts, id []*big.Int) (*SbtURIIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _Sbt.contract.FilterLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return &SbtURIIterator{contract: _Sbt.contract, event: "URI", logs: logs, sub: sub}, nil
}

// WatchURI is a free log subscription operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_Sbt *SbtFilterer) WatchURI(opts *bind.WatchOpts, sink chan<- *SbtURI, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _Sbt.contract.WatchLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SbtURI)
				if err := _Sbt.contract.UnpackLog(event, "URI", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseURI is a log parse operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_Sbt *SbtFilterer) ParseURI(log types.Log) (*SbtURI, error) {
	event := new(SbtURI)
	if err := _Sbt.contract.UnpackLog(event, "URI", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
