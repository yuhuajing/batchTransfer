// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package sbt

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// SbtMetaData contains all meta data concerning the Sbt contract.
var SbtMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"account\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"id\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"batchmint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalamount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"settokenIDInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"updateNameSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newowner\",\"type\":\"address\"}],\"name\":\"updateOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalamount\",\"type\":\"uint256\"}],\"name\":\"updateTotalAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"updateURL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"getminted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"getname\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"getsymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"gettotalamount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506040518060200160405280600081525062000033816200007b60201b60201c565b5033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620003f1565b80600290816200008c91906200030a565b5050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200011257607f821691505b602082108103620001285762000127620000ca565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620001927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000153565b6200019e868362000153565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620001eb620001e5620001df84620001b6565b620001c0565b620001b6565b9050919050565b6000819050919050565b6200020783620001ca565b6200021f6200021682620001f2565b84845462000160565b825550505050565b600090565b6200023662000227565b62000243818484620001fc565b505050565b5b818110156200026b576200025f6000826200022c565b60018101905062000249565b5050565b601f821115620002ba5762000284816200012e565b6200028f8462000143565b810160208510156200029f578190505b620002b7620002ae8562000143565b83018262000248565b50505b505050565b600082821c905092915050565b6000620002df60001984600802620002bf565b1980831691505092915050565b6000620002fa8383620002cc565b9150826002028217905092915050565b620003158262000090565b67ffffffffffffffff8111156200033157620003306200009b565b5b6200033d8254620000f9565b6200034a8282856200026f565b600060209050601f8311600181146200038257600084156200036d578287015190505b620003798582620002ec565b865550620003e9565b601f19841662000392866200012e565b60005b82811015620003bc5784890151825560018201915060208501945060208101905062000395565b86831015620003dc5784890151620003d8601f891682620002cc565b8355505b6001600288020188555050505b505050505050565b61344b80620004016000396000f3fe608060405234801561001057600080fd5b506004361061012b5760003560e01c80635b5c45f3116100ad578063cc9b131011610071578063cc9b131014610360578063e144976e14610390578063e985e9c5146103ac578063f242432a146103dc578063fa82aa5f146103f85761012b565b80635b5c45f3146102d4578063880cdc31146102f05780639465ffa91461030c578063a22cb46514610328578063b390c0ab146103445761012b565b8063163c63d1116100f4578063163c63d11461020c5780631829f4561461023c5780632eb2c2d614610258578063413f818b146102745780634e1273f4146102a45761012b565b8062fdd58e1461013057806301ffc9a7146101605780630202ace1146101905780630e89341c146101c0578063156e29f6146101f0575b600080fd5b61014a60048036038101906101459190611e43565b610414565b6040516101579190611e92565b60405180910390f35b61017a60048036038101906101759190611f05565b61046e565b6040516101879190611f4d565b60405180910390f35b6101aa60048036038101906101a59190611f68565b610550565b6040516101b79190612025565b60405180910390f35b6101da60048036038101906101d59190611f68565b6105f8565b6040516101e79190612025565b60405180910390f35b61020a60048036038101906102059190612047565b6106a0565b005b61022660048036038101906102219190611f68565b610850565b6040516102339190611e92565b60405180910390f35b610256600480360381019061025191906121cf565b610870565b005b610272600480360381019061026d91906123c3565b6109a6565b005b61028e60048036038101906102899190611f68565b6109e1565b60405161029b9190611e92565b60405180910390f35b6102be60048036038101906102b99190612555565b610a01565b6040516102cb919061268b565b60405180910390f35b6102ee60048036038101906102e991906126ad565b610b10565b005b61030a6004803603810190610305919061277c565b610caa565b005b610326600480360381019061032191906127a9565b610ded565b005b610342600480360381019061033d919061287c565b611019565b005b61035e600480360381019061035991906128bc565b611054565b005b61037a60048036038101906103759190611f68565b611090565b6040516103879190612025565b60405180910390f35b6103aa60048036038101906103a591906128fc565b611138565b005b6103c660048036038101906103c19190612958565b611249565b6040516103d39190611f4d565b60405180910390f35b6103f660048036038101906103f19190612998565b611286565b005b610412600480360381019061040d91906128bc565b6112c1565b005b600080600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061053957507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806105495750610548826113c9565b5b9050919050565b606060046000838152602001908152602001600020600301805461057390612a5e565b80601f016020809104026020016040519081016040528092919081815260200182805461059f90612a5e565b80156105ec5780601f106105c1576101008083540402835291602001916105ec565b820191906000526020600020905b8154815290600101906020018083116105cf57829003601f168201915b50505050509050919050565b606060046000838152602001908152602001600020600501805461061b90612a5e565b80601f016020809104026020016040519081016040528092919081815260200182805461064790612a5e565b80156106945780601f1061066957610100808354040283529160200191610694565b820191906000526020600020905b81548152906001019060200180831161067757829003601f168201915b50505050509050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610730576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072790612adb565b60405180910390fd5b6000600460008481526020019081526020016000206002015411610789576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078090612b47565b60405180910390fd5b60046000838152602001908152602001600020600201548160046000858152602001908152602001600020600101546107c29190612b96565b1115610803576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fa90612c16565b60405180910390fd5b806004600084815260200190815260200160002060010160008282546108299190612b96565b9250508190555061084b83838360405180602001604052806000815250611433565b505050565b600060046000838152602001908152602001600020600201549050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610900576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f790612adb565b60405180910390fd5b6000600460008581526020019081526020016000206002015411610959576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095090612b47565b60405180910390fd5b8160046000858152602001908152602001600020600301908161097c9190612de2565b50806004600085815260200190815260200160002060040190816109a09190612de2565b50505050565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d890612f26565b60405180910390fd5b600060046000838152602001908152602001600020600101549050919050565b60608151835114610a4d57815183516040517f5b059991000000000000000000000000000000000000000000000000000000008152600401610a44929190612f46565b60405180910390fd5b6000835167ffffffffffffffff811115610a6a57610a696120a4565b5b604051908082528060200260200182016040528015610a985781602001602082028036833780820191505090505b50905060005b8451811015610b0557610ad5610abd82876114cc90919063ffffffff16565b610ad083876114e090919063ffffffff16565b610414565b828281518110610ae857610ae7612f6f565b5b60200260200101818152505080610afe90612f9e565b9050610a9e565b508091505092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ba0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9790612adb565b60405180910390fd5b6000600460008781526020019081526020016000206002015414610bf9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf090613032565b60405180910390fd5b60006040518060c001604052808781526020016000815260200186815260200185815260200184815260200183815250905080600460008881526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003019081610c729190612de2565b506080820151816004019081610c889190612de2565b5060a0820151816005019081610c9e9190612de2565b50905050505050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3190612adb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610da9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da09061309e565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7490612adb565b60405180910390fd5b60008351118015610e8f575080518351145b610ece576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec590613130565b60405180910390fd5b6001825103610f565760005b8351811015610f5057610f3d848281518110610ef957610ef8612f6f565b5b602002602001015184600081518110610f1557610f14612f6f565b5b6020026020010151848481518110610f3057610f2f612f6f565b5b60200260200101516106a0565b8080610f4890612f9e565b915050610eda565b50611014565b8151835114610f9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f91906131c2565b60405180910390fd5b60005b835181101561101257610fff848281518110610fbc57610fbb612f6f565b5b6020026020010151848381518110610fd757610fd6612f6f565b5b6020026020010151848481518110610ff257610ff1612f6f565b5b60200260200101516106a0565b808061100a90612f9e565b915050610f9d565b505b505050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104b90612f26565b60405180910390fd5b8060046000848152602001908152602001600020600101600082825461107a91906131e2565b9250508190555061108c3383836114f4565b5050565b60606004600083815260200190815260200160002060040180546110b390612a5e565b80601f01602080910402602001604051908101604052809291908181526020018280546110df90612a5e565b801561112c5780601f106111015761010080835404028352916020019161112c565b820191906000526020600020905b81548152906001019060200180831161110f57829003601f168201915b50505050509050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146111c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111bf90612adb565b60405180910390fd5b6000600460008481526020019081526020016000206002015411611221576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121890612b47565b60405180910390fd5b806004600084815260200190815260200160002060050190816112449190612de2565b505050565b60006040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127d90612f26565b60405180910390fd5b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b890612f26565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611351576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134890612adb565b60405180910390fd5b60006004600084815260200190815260200160002060020154116113aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113a190612b47565b60405180910390fd5b8060046000848152602001908152602001600020600201819055505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036114a55760006040517f57f447ce00000000000000000000000000000000000000000000000000000000815260040161149c9190613225565b60405180910390fd5b6000806114b2858561159b565b915091506114c46000878484876115cb565b505050505050565b600060208202602084010151905092915050565b600060208202602084010151905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036115665760006040517f01a8351400000000000000000000000000000000000000000000000000000000815260040161155d9190613225565b60405180910390fd5b600080611573848461159b565b915091506115948560008484604051806020016040528060008152506115cb565b5050505050565b60608060405191506001825283602083015260408201905060018152826020820152604081016040529250929050565b6115d78585858561167d565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614611676576000611615611a2b565b905060018451036116655760006116366000866114e090919063ffffffff16565b9050600061164e6000866114e090919063ffffffff16565b905061165e838989858589611a33565b5050611674565b611673818787878787611be7565b5b505b5050505050565b80518251146116c757815181516040517f5b0599910000000000000000000000000000000000000000000000000000000081526004016116be929190612f46565b60405180910390fd5b60006116d1611a2b565b905060005b83518110156118e65760006116f482866114e090919063ffffffff16565b9050600061170b83866114e090919063ffffffff16565b9050600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161461183857600080600084815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156117e057888183856040517f03dee4c50000000000000000000000000000000000000000000000000000000081526004016117d79493929190613240565b60405180910390fd5b81810360008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16146118d3578060008084815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546118cb9190612b96565b925050819055505b5050806118df90612f9e565b90506116d6565b5060018351036119a55760006119066000856114e090919063ffffffff16565b9050600061191e6000856114e090919063ffffffff16565b90508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628585604051611996929190612f46565b60405180910390a45050611a24565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611a1b929190613285565b60405180910390a45b5050505050565b600033905090565b60008473ffffffffffffffffffffffffffffffffffffffff163b1115611bdf578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401611a94959493929190613311565b6020604051808303816000875af1925050508015611ad057506040513d601f19601f82011682018060405250810190611acd9190613380565b60015b611b54573d8060008114611b00576040519150601f19603f3d011682016040523d82523d6000602084013e611b05565b606091505b506000815103611b4c57846040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401611b439190613225565b60405180910390fd5b805181602001fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611bdd57846040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401611bd49190613225565b60405180910390fd5b505b505050505050565b60008473ffffffffffffffffffffffffffffffffffffffff163b1115611d93578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401611c489594939291906133ad565b6020604051808303816000875af1925050508015611c8457506040513d601f19601f82011682018060405250810190611c819190613380565b60015b611d08573d8060008114611cb4576040519150601f19603f3d011682016040523d82523d6000602084013e611cb9565b606091505b506000815103611d0057846040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401611cf79190613225565b60405180910390fd5b805181602001fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611d9157846040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401611d889190613225565b60405180910390fd5b505b505050505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611dda82611daf565b9050919050565b611dea81611dcf565b8114611df557600080fd5b50565b600081359050611e0781611de1565b92915050565b6000819050919050565b611e2081611e0d565b8114611e2b57600080fd5b50565b600081359050611e3d81611e17565b92915050565b60008060408385031215611e5a57611e59611da5565b5b6000611e6885828601611df8565b9250506020611e7985828601611e2e565b9150509250929050565b611e8c81611e0d565b82525050565b6000602082019050611ea76000830184611e83565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611ee281611ead565b8114611eed57600080fd5b50565b600081359050611eff81611ed9565b92915050565b600060208284031215611f1b57611f1a611da5565b5b6000611f2984828501611ef0565b91505092915050565b60008115159050919050565b611f4781611f32565b82525050565b6000602082019050611f626000830184611f3e565b92915050565b600060208284031215611f7e57611f7d611da5565b5b6000611f8c84828501611e2e565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611fcf578082015181840152602081019050611fb4565b60008484015250505050565b6000601f19601f8301169050919050565b6000611ff782611f95565b6120018185611fa0565b9350612011818560208601611fb1565b61201a81611fdb565b840191505092915050565b6000602082019050818103600083015261203f8184611fec565b905092915050565b6000806000606084860312156120605761205f611da5565b5b600061206e86828701611df8565b935050602061207f86828701611e2e565b925050604061209086828701611e2e565b9150509250925092565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6120dc82611fdb565b810181811067ffffffffffffffff821117156120fb576120fa6120a4565b5b80604052505050565b600061210e611d9b565b905061211a82826120d3565b919050565b600067ffffffffffffffff82111561213a576121396120a4565b5b61214382611fdb565b9050602081019050919050565b82818337600083830152505050565b600061217261216d8461211f565b612104565b90508281526020810184848401111561218e5761218d61209f565b5b612199848285612150565b509392505050565b600082601f8301126121b6576121b561209a565b5b81356121c684826020860161215f565b91505092915050565b6000806000606084860312156121e8576121e7611da5565b5b60006121f686828701611e2e565b935050602084013567ffffffffffffffff81111561221757612216611daa565b5b612223868287016121a1565b925050604084013567ffffffffffffffff81111561224457612243611daa565b5b612250868287016121a1565b9150509250925092565b600067ffffffffffffffff821115612275576122746120a4565b5b602082029050602081019050919050565b600080fd5b600061229e6122998461225a565b612104565b905080838252602082019050602084028301858111156122c1576122c0612286565b5b835b818110156122ea57806122d68882611e2e565b8452602084019350506020810190506122c3565b5050509392505050565b600082601f8301126123095761230861209a565b5b813561231984826020860161228b565b91505092915050565b600067ffffffffffffffff82111561233d5761233c6120a4565b5b61234682611fdb565b9050602081019050919050565b600061236661236184612322565b612104565b9050828152602081018484840111156123825761238161209f565b5b61238d848285612150565b509392505050565b600082601f8301126123aa576123a961209a565b5b81356123ba848260208601612353565b91505092915050565b600080600080600060a086880312156123df576123de611da5565b5b60006123ed88828901611df8565b95505060206123fe88828901611df8565b945050604086013567ffffffffffffffff81111561241f5761241e611daa565b5b61242b888289016122f4565b935050606086013567ffffffffffffffff81111561244c5761244b611daa565b5b612458888289016122f4565b925050608086013567ffffffffffffffff81111561247957612478611daa565b5b61248588828901612395565b9150509295509295909350565b600067ffffffffffffffff8211156124ad576124ac6120a4565b5b602082029050602081019050919050565b60006124d16124cc84612492565b612104565b905080838252602082019050602084028301858111156124f4576124f3612286565b5b835b8181101561251d57806125098882611df8565b8452602084019350506020810190506124f6565b5050509392505050565b600082601f83011261253c5761253b61209a565b5b813561254c8482602086016124be565b91505092915050565b6000806040838503121561256c5761256b611da5565b5b600083013567ffffffffffffffff81111561258a57612589611daa565b5b61259685828601612527565b925050602083013567ffffffffffffffff8111156125b7576125b6611daa565b5b6125c3858286016122f4565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61260281611e0d565b82525050565b600061261483836125f9565b60208301905092915050565b6000602082019050919050565b6000612638826125cd565b61264281856125d8565b935061264d836125e9565b8060005b8381101561267e5781516126658882612608565b975061267083612620565b925050600181019050612651565b5085935050505092915050565b600060208201905081810360008301526126a5818461262d565b905092915050565b600080600080600060a086880312156126c9576126c8611da5565b5b60006126d788828901611e2e565b95505060206126e888828901611e2e565b945050604086013567ffffffffffffffff81111561270957612708611daa565b5b612715888289016121a1565b935050606086013567ffffffffffffffff81111561273657612735611daa565b5b612742888289016121a1565b925050608086013567ffffffffffffffff81111561276357612762611daa565b5b61276f888289016121a1565b9150509295509295909350565b60006020828403121561279257612791611da5565b5b60006127a084828501611df8565b91505092915050565b6000806000606084860312156127c2576127c1611da5565b5b600084013567ffffffffffffffff8111156127e0576127df611daa565b5b6127ec86828701612527565b935050602084013567ffffffffffffffff81111561280d5761280c611daa565b5b612819868287016122f4565b925050604084013567ffffffffffffffff81111561283a57612839611daa565b5b612846868287016122f4565b9150509250925092565b61285981611f32565b811461286457600080fd5b50565b60008135905061287681612850565b92915050565b6000806040838503121561289357612892611da5565b5b60006128a185828601611df8565b92505060206128b285828601612867565b9150509250929050565b600080604083850312156128d3576128d2611da5565b5b60006128e185828601611e2e565b92505060206128f285828601611e2e565b9150509250929050565b6000806040838503121561291357612912611da5565b5b600061292185828601611e2e565b925050602083013567ffffffffffffffff81111561294257612941611daa565b5b61294e858286016121a1565b9150509250929050565b6000806040838503121561296f5761296e611da5565b5b600061297d85828601611df8565b925050602061298e85828601611df8565b9150509250929050565b600080600080600060a086880312156129b4576129b3611da5565b5b60006129c288828901611df8565b95505060206129d388828901611df8565b94505060406129e488828901611e2e565b93505060606129f588828901611e2e565b925050608086013567ffffffffffffffff811115612a1657612a15611daa565b5b612a2288828901612395565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612a7657607f821691505b602082108103612a8957612a88612a2f565b5b50919050565b7f4f6e6c79206f70657261746f722063616e206d696e74206e657720736f756c73600082015250565b6000612ac5602083611fa0565b9150612ad082612a8f565b602082019050919050565b60006020820190508181036000830152612af481612ab8565b9050919050565b7f546f6b656e4944206e6f7420496e697469616c697a6564000000000000000000600082015250565b6000612b31601783611fa0565b9150612b3c82612afb565b602082019050919050565b60006020820190508181036000830152612b6081612b24565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612ba182611e0d565b9150612bac83611e0d565b9250828201905080821115612bc457612bc3612b67565b5b92915050565b7f4e6f7420456e6f75676820546f6b656e4944206c656674000000000000000000600082015250565b6000612c00601783611fa0565b9150612c0b82612bca565b602082019050919050565b60006020820190508181036000830152612c2f81612bf3565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612c987fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612c5b565b612ca28683612c5b565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612cdf612cda612cd584611e0d565b612cba565b611e0d565b9050919050565b6000819050919050565b612cf983612cc4565b612d0d612d0582612ce6565b848454612c68565b825550505050565b600090565b612d22612d15565b612d2d818484612cf0565b505050565b5b81811015612d5157612d46600082612d1a565b600181019050612d33565b5050565b601f821115612d9657612d6781612c36565b612d7084612c4b565b81016020851015612d7f578190505b612d93612d8b85612c4b565b830182612d32565b50505b505050565b600082821c905092915050565b6000612db960001984600802612d9b565b1980831691505092915050565b6000612dd28383612da8565b9150826002028217905092915050565b612deb82611f95565b67ffffffffffffffff811115612e0457612e036120a4565b5b612e0e8254612a5e565b612e19828285612d55565b600060209050601f831160018114612e4c5760008415612e3a578287015190505b612e448582612dc6565b865550612eac565b601f198416612e5a86612c36565b60005b82811015612e8257848901518255600182019150602085019450602081019050612e5d565b86831015612e9f5784890151612e9b601f891682612da8565b8355505b6001600288020188555050505b505050505050565b7f5472616e73666572206e6f7420737570706f7274656420666f7220736f756c2060008201527f626f756e6420746f6b656e2e0000000000000000000000000000000000000000602082015250565b6000612f10602c83611fa0565b9150612f1b82612eb4565b604082019050919050565b60006020820190508181036000830152612f3f81612f03565b9050919050565b6000604082019050612f5b6000830185611e83565b612f686020830184611e83565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000612fa982611e0d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612fdb57612fda612b67565b5b600182019050919050565b7f546f6b656e494420616c726561647920496e697469616c697a65640000000000600082015250565b600061301c601b83611fa0565b915061302782612fe6565b602082019050919050565b6000602082019050818103600083015261304b8161300f565b9050919050565b7f496e76616c6964204f776e657200000000000000000000000000000000000000600082015250565b6000613088600d83611fa0565b915061309382613052565b602082019050919050565b600060208201905081810360008301526130b78161307b565b9050919050565b7f4e6565642076616c6964206163636f756e742f616d6f756e74206c697374206160008201527f6e6420457175616c206c656e6774680000000000000000000000000000000000602082015250565b600061311a602f83611fa0565b9150613125826130be565b604082019050919050565b600060208201905081810360008301526131498161310d565b9050919050565b7f4e6565642076616c6964206163636f756e742f616d6f756e742f6964206c697360008201527f7420616e6420457175616c206c656e6774680000000000000000000000000000602082015250565b60006131ac603283611fa0565b91506131b782613150565b604082019050919050565b600060208201905081810360008301526131db8161319f565b9050919050565b60006131ed82611e0d565b91506131f883611e0d565b92508282039050818111156132105761320f612b67565b5b92915050565b61321f81611dcf565b82525050565b600060208201905061323a6000830184613216565b92915050565b60006080820190506132556000830187613216565b6132626020830186611e83565b61326f6040830185611e83565b61327c6060830184611e83565b95945050505050565b6000604082019050818103600083015261329f818561262d565b905081810360208301526132b3818461262d565b90509392505050565b600081519050919050565b600082825260208201905092915050565b60006132e3826132bc565b6132ed81856132c7565b93506132fd818560208601611fb1565b61330681611fdb565b840191505092915050565b600060a0820190506133266000830188613216565b6133336020830187613216565b6133406040830186611e83565b61334d6060830185611e83565b818103608083015261335f81846132d8565b90509695505050505050565b60008151905061337a81611ed9565b92915050565b60006020828403121561339657613395611da5565b5b60006133a48482850161336b565b91505092915050565b600060a0820190506133c26000830188613216565b6133cf6020830187613216565b81810360408301526133e1818661262d565b905081810360608301526133f5818561262d565b9050818103608083015261340981846132d8565b9050969550505050505056fea26469706673582212201a799d94165e9433b2479e1aca2ce225811fb750bb6e4e1d73dbf2282f5e668464736f6c63430008140033",
}

// SbtABI is the input ABI used to generate the binding from.
// Deprecated: Use SbtMetaData.ABI instead.
var SbtABI = SbtMetaData.ABI

// SbtBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SbtMetaData.Bin instead.
var SbtBin = SbtMetaData.Bin

// DeploySbt deploys a new Ethereum contract, binding an instance of Sbt to it.
func DeploySbt(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Sbt, error) {
	parsed, err := SbtMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SbtBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Sbt{SbtCaller: SbtCaller{contract: contract}, SbtTransactor: SbtTransactor{contract: contract}, SbtFilterer: SbtFilterer{contract: contract}}, nil
}

// Sbt is an auto generated Go binding around an Ethereum contract.
type Sbt struct {
	SbtCaller     // Read-only binding to the contract
	SbtTransactor // Write-only binding to the contract
	SbtFilterer   // Log filterer for contract events
}

// SbtCaller is an auto generated read-only Go binding around an Ethereum contract.
type SbtCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SbtTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SbtTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SbtFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SbtFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SbtSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SbtSession struct {
	Contract     *Sbt              // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SbtCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SbtCallerSession struct {
	Contract *SbtCaller    // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// SbtTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SbtTransactorSession struct {
	Contract     *SbtTransactor    // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SbtRaw is an auto generated low-level Go binding around an Ethereum contract.
type SbtRaw struct {
	Contract *Sbt // Generic contract binding to access the raw methods on
}

// SbtCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SbtCallerRaw struct {
	Contract *SbtCaller // Generic read-only contract binding to access the raw methods on
}

// SbtTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SbtTransactorRaw struct {
	Contract *SbtTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSbt creates a new instance of Sbt, bound to a specific deployed contract.
func NewSbt(address common.Address, backend bind.ContractBackend) (*Sbt, error) {
	contract, err := bindSbt(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Sbt{SbtCaller: SbtCaller{contract: contract}, SbtTransactor: SbtTransactor{contract: contract}, SbtFilterer: SbtFilterer{contract: contract}}, nil
}

// NewSbtCaller creates a new read-only instance of Sbt, bound to a specific deployed contract.
func NewSbtCaller(address common.Address, caller bind.ContractCaller) (*SbtCaller, error) {
	contract, err := bindSbt(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SbtCaller{contract: contract}, nil
}

// NewSbtTransactor creates a new write-only instance of Sbt, bound to a specific deployed contract.
func NewSbtTransactor(address common.Address, transactor bind.ContractTransactor) (*SbtTransactor, error) {
	contract, err := bindSbt(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SbtTransactor{contract: contract}, nil
}

// NewSbtFilterer creates a new log filterer instance of Sbt, bound to a specific deployed contract.
func NewSbtFilterer(address common.Address, filterer bind.ContractFilterer) (*SbtFilterer, error) {
	contract, err := bindSbt(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SbtFilterer{contract: contract}, nil
}

// bindSbt binds a generic wrapper to an already deployed contract.
func bindSbt(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SbtMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Sbt *SbtRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Sbt.Contract.SbtCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Sbt *SbtRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Sbt.Contract.SbtTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Sbt *SbtRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Sbt.Contract.SbtTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Sbt *SbtCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Sbt.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Sbt *SbtTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Sbt.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Sbt *SbtTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Sbt.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_Sbt *SbtCaller) BalanceOf(opts *bind.CallOpts, account common.Address, id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "balanceOf", account, id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_Sbt *SbtSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _Sbt.Contract.BalanceOf(&_Sbt.CallOpts, account, id)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_Sbt *SbtCallerSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _Sbt.Contract.BalanceOf(&_Sbt.CallOpts, account, id)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_Sbt *SbtCaller) BalanceOfBatch(opts *bind.CallOpts, accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "balanceOfBatch", accounts, ids)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_Sbt *SbtSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _Sbt.Contract.BalanceOfBatch(&_Sbt.CallOpts, accounts, ids)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_Sbt *SbtCallerSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _Sbt.Contract.BalanceOfBatch(&_Sbt.CallOpts, accounts, ids)
}

// Getminted is a free data retrieval call binding the contract method 0x413f818b.
//
// Solidity: function getminted(uint256 tokenid) view returns(uint256)
func (_Sbt *SbtCaller) Getminted(opts *bind.CallOpts, tokenid *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "getminted", tokenid)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Getminted is a free data retrieval call binding the contract method 0x413f818b.
//
// Solidity: function getminted(uint256 tokenid) view returns(uint256)
func (_Sbt *SbtSession) Getminted(tokenid *big.Int) (*big.Int, error) {
	return _Sbt.Contract.Getminted(&_Sbt.CallOpts, tokenid)
}

// Getminted is a free data retrieval call binding the contract method 0x413f818b.
//
// Solidity: function getminted(uint256 tokenid) view returns(uint256)
func (_Sbt *SbtCallerSession) Getminted(tokenid *big.Int) (*big.Int, error) {
	return _Sbt.Contract.Getminted(&_Sbt.CallOpts, tokenid)
}

// Getname is a free data retrieval call binding the contract method 0x0202ace1.
//
// Solidity: function getname(uint256 tokenid) view returns(string)
func (_Sbt *SbtCaller) Getname(opts *bind.CallOpts, tokenid *big.Int) (string, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "getname", tokenid)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Getname is a free data retrieval call binding the contract method 0x0202ace1.
//
// Solidity: function getname(uint256 tokenid) view returns(string)
func (_Sbt *SbtSession) Getname(tokenid *big.Int) (string, error) {
	return _Sbt.Contract.Getname(&_Sbt.CallOpts, tokenid)
}

// Getname is a free data retrieval call binding the contract method 0x0202ace1.
//
// Solidity: function getname(uint256 tokenid) view returns(string)
func (_Sbt *SbtCallerSession) Getname(tokenid *big.Int) (string, error) {
	return _Sbt.Contract.Getname(&_Sbt.CallOpts, tokenid)
}

// Getsymbol is a free data retrieval call binding the contract method 0xcc9b1310.
//
// Solidity: function getsymbol(uint256 tokenid) view returns(string)
func (_Sbt *SbtCaller) Getsymbol(opts *bind.CallOpts, tokenid *big.Int) (string, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "getsymbol", tokenid)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Getsymbol is a free data retrieval call binding the contract method 0xcc9b1310.
//
// Solidity: function getsymbol(uint256 tokenid) view returns(string)
func (_Sbt *SbtSession) Getsymbol(tokenid *big.Int) (string, error) {
	return _Sbt.Contract.Getsymbol(&_Sbt.CallOpts, tokenid)
}

// Getsymbol is a free data retrieval call binding the contract method 0xcc9b1310.
//
// Solidity: function getsymbol(uint256 tokenid) view returns(string)
func (_Sbt *SbtCallerSession) Getsymbol(tokenid *big.Int) (string, error) {
	return _Sbt.Contract.Getsymbol(&_Sbt.CallOpts, tokenid)
}

// Gettotalamount is a free data retrieval call binding the contract method 0x163c63d1.
//
// Solidity: function gettotalamount(uint256 tokenid) view returns(uint256)
func (_Sbt *SbtCaller) Gettotalamount(opts *bind.CallOpts, tokenid *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "gettotalamount", tokenid)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Gettotalamount is a free data retrieval call binding the contract method 0x163c63d1.
//
// Solidity: function gettotalamount(uint256 tokenid) view returns(uint256)
func (_Sbt *SbtSession) Gettotalamount(tokenid *big.Int) (*big.Int, error) {
	return _Sbt.Contract.Gettotalamount(&_Sbt.CallOpts, tokenid)
}

// Gettotalamount is a free data retrieval call binding the contract method 0x163c63d1.
//
// Solidity: function gettotalamount(uint256 tokenid) view returns(uint256)
func (_Sbt *SbtCallerSession) Gettotalamount(tokenid *big.Int) (*big.Int, error) {
	return _Sbt.Contract.Gettotalamount(&_Sbt.CallOpts, tokenid)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address , address ) view returns(bool)
func (_Sbt *SbtCaller) IsApprovedForAll(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (bool, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "isApprovedForAll", arg0, arg1)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address , address ) view returns(bool)
func (_Sbt *SbtSession) IsApprovedForAll(arg0 common.Address, arg1 common.Address) (bool, error) {
	return _Sbt.Contract.IsApprovedForAll(&_Sbt.CallOpts, arg0, arg1)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address , address ) view returns(bool)
func (_Sbt *SbtCallerSession) IsApprovedForAll(arg0 common.Address, arg1 common.Address) (bool, error) {
	return _Sbt.Contract.IsApprovedForAll(&_Sbt.CallOpts, arg0, arg1)
}

// SafeTransferFrom is a free data retrieval call binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address , address , uint256 , uint256 , bytes ) pure returns()
func (_Sbt *SbtCaller) SafeTransferFrom(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) error {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "safeTransferFrom", arg0, arg1, arg2, arg3, arg4)

	if err != nil {
		return err
	}

	return err

}

// SafeTransferFrom is a free data retrieval call binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address , address , uint256 , uint256 , bytes ) pure returns()
func (_Sbt *SbtSession) SafeTransferFrom(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) error {
	return _Sbt.Contract.SafeTransferFrom(&_Sbt.CallOpts, arg0, arg1, arg2, arg3, arg4)
}

// SafeTransferFrom is a free data retrieval call binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address , address , uint256 , uint256 , bytes ) pure returns()
func (_Sbt *SbtCallerSession) SafeTransferFrom(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) error {
	return _Sbt.Contract.SafeTransferFrom(&_Sbt.CallOpts, arg0, arg1, arg2, arg3, arg4)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Sbt *SbtCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Sbt *SbtSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Sbt.Contract.SupportsInterface(&_Sbt.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Sbt *SbtCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Sbt.Contract.SupportsInterface(&_Sbt.CallOpts, interfaceId)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 id) view returns(string)
func (_Sbt *SbtCaller) Uri(opts *bind.CallOpts, id *big.Int) (string, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "uri", id)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 id) view returns(string)
func (_Sbt *SbtSession) Uri(id *big.Int) (string, error) {
	return _Sbt.Contract.Uri(&_Sbt.CallOpts, id)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 id) view returns(string)
func (_Sbt *SbtCallerSession) Uri(id *big.Int) (string, error) {
	return _Sbt.Contract.Uri(&_Sbt.CallOpts, id)
}

// Batchmint is a paid mutator transaction binding the contract method 0x9465ffa9.
//
// Solidity: function batchmint(address[] account, uint256[] id, uint256[] amount) returns()
func (_Sbt *SbtTransactor) Batchmint(opts *bind.TransactOpts, account []common.Address, id []*big.Int, amount []*big.Int) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "batchmint", account, id, amount)
}

// Batchmint is a paid mutator transaction binding the contract method 0x9465ffa9.
//
// Solidity: function batchmint(address[] account, uint256[] id, uint256[] amount) returns()
func (_Sbt *SbtSession) Batchmint(account []common.Address, id []*big.Int, amount []*big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.Batchmint(&_Sbt.TransactOpts, account, id, amount)
}

// Batchmint is a paid mutator transaction binding the contract method 0x9465ffa9.
//
// Solidity: function batchmint(address[] account, uint256[] id, uint256[] amount) returns()
func (_Sbt *SbtTransactorSession) Batchmint(account []common.Address, id []*big.Int, amount []*big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.Batchmint(&_Sbt.TransactOpts, account, id, amount)
}

// Burn is a paid mutator transaction binding the contract method 0xb390c0ab.
//
// Solidity: function burn(uint256 id, uint256 value) returns()
func (_Sbt *SbtTransactor) Burn(opts *bind.TransactOpts, id *big.Int, value *big.Int) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "burn", id, value)
}

// Burn is a paid mutator transaction binding the contract method 0xb390c0ab.
//
// Solidity: function burn(uint256 id, uint256 value) returns()
func (_Sbt *SbtSession) Burn(id *big.Int, value *big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.Burn(&_Sbt.TransactOpts, id, value)
}

// Burn is a paid mutator transaction binding the contract method 0xb390c0ab.
//
// Solidity: function burn(uint256 id, uint256 value) returns()
func (_Sbt *SbtTransactorSession) Burn(id *big.Int, value *big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.Burn(&_Sbt.TransactOpts, id, value)
}

// Mint is a paid mutator transaction binding the contract method 0x156e29f6.
//
// Solidity: function mint(address account, uint256 id, uint256 amount) returns()
func (_Sbt *SbtTransactor) Mint(opts *bind.TransactOpts, account common.Address, id *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "mint", account, id, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x156e29f6.
//
// Solidity: function mint(address account, uint256 id, uint256 amount) returns()
func (_Sbt *SbtSession) Mint(account common.Address, id *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.Mint(&_Sbt.TransactOpts, account, id, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x156e29f6.
//
// Solidity: function mint(address account, uint256 id, uint256 amount) returns()
func (_Sbt *SbtTransactorSession) Mint(account common.Address, id *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.Mint(&_Sbt.TransactOpts, account, id, amount)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address , address , uint256[] , uint256[] , bytes ) returns()
func (_Sbt *SbtTransactor) SafeBatchTransferFrom(opts *bind.TransactOpts, arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "safeBatchTransferFrom", arg0, arg1, arg2, arg3, arg4)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address , address , uint256[] , uint256[] , bytes ) returns()
func (_Sbt *SbtSession) SafeBatchTransferFrom(arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) (*types.Transaction, error) {
	return _Sbt.Contract.SafeBatchTransferFrom(&_Sbt.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address , address , uint256[] , uint256[] , bytes ) returns()
func (_Sbt *SbtTransactorSession) SafeBatchTransferFrom(arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) (*types.Transaction, error) {
	return _Sbt.Contract.SafeBatchTransferFrom(&_Sbt.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address , bool ) returns()
func (_Sbt *SbtTransactor) SetApprovalForAll(opts *bind.TransactOpts, arg0 common.Address, arg1 bool) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "setApprovalForAll", arg0, arg1)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address , bool ) returns()
func (_Sbt *SbtSession) SetApprovalForAll(arg0 common.Address, arg1 bool) (*types.Transaction, error) {
	return _Sbt.Contract.SetApprovalForAll(&_Sbt.TransactOpts, arg0, arg1)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address , bool ) returns()
func (_Sbt *SbtTransactorSession) SetApprovalForAll(arg0 common.Address, arg1 bool) (*types.Transaction, error) {
	return _Sbt.Contract.SetApprovalForAll(&_Sbt.TransactOpts, arg0, arg1)
}

// SettokenIDInfo is a paid mutator transaction binding the contract method 0x5b5c45f3.
//
// Solidity: function settokenIDInfo(uint256 tokenid, uint256 totalamount, string name, string symbol, string url) returns()
func (_Sbt *SbtTransactor) SettokenIDInfo(opts *bind.TransactOpts, tokenid *big.Int, totalamount *big.Int, name string, symbol string, url string) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "settokenIDInfo", tokenid, totalamount, name, symbol, url)
}

// SettokenIDInfo is a paid mutator transaction binding the contract method 0x5b5c45f3.
//
// Solidity: function settokenIDInfo(uint256 tokenid, uint256 totalamount, string name, string symbol, string url) returns()
func (_Sbt *SbtSession) SettokenIDInfo(tokenid *big.Int, totalamount *big.Int, name string, symbol string, url string) (*types.Transaction, error) {
	return _Sbt.Contract.SettokenIDInfo(&_Sbt.TransactOpts, tokenid, totalamount, name, symbol, url)
}

// SettokenIDInfo is a paid mutator transaction binding the contract method 0x5b5c45f3.
//
// Solidity: function settokenIDInfo(uint256 tokenid, uint256 totalamount, string name, string symbol, string url) returns()
func (_Sbt *SbtTransactorSession) SettokenIDInfo(tokenid *big.Int, totalamount *big.Int, name string, symbol string, url string) (*types.Transaction, error) {
	return _Sbt.Contract.SettokenIDInfo(&_Sbt.TransactOpts, tokenid, totalamount, name, symbol, url)
}

// UpdateNameSymbol is a paid mutator transaction binding the contract method 0x1829f456.
//
// Solidity: function updateNameSymbol(uint256 tokenid, string name, string symbol) returns()
func (_Sbt *SbtTransactor) UpdateNameSymbol(opts *bind.TransactOpts, tokenid *big.Int, name string, symbol string) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "updateNameSymbol", tokenid, name, symbol)
}

// UpdateNameSymbol is a paid mutator transaction binding the contract method 0x1829f456.
//
// Solidity: function updateNameSymbol(uint256 tokenid, string name, string symbol) returns()
func (_Sbt *SbtSession) UpdateNameSymbol(tokenid *big.Int, name string, symbol string) (*types.Transaction, error) {
	return _Sbt.Contract.UpdateNameSymbol(&_Sbt.TransactOpts, tokenid, name, symbol)
}

// UpdateNameSymbol is a paid mutator transaction binding the contract method 0x1829f456.
//
// Solidity: function updateNameSymbol(uint256 tokenid, string name, string symbol) returns()
func (_Sbt *SbtTransactorSession) UpdateNameSymbol(tokenid *big.Int, name string, symbol string) (*types.Transaction, error) {
	return _Sbt.Contract.UpdateNameSymbol(&_Sbt.TransactOpts, tokenid, name, symbol)
}

// UpdateOwner is a paid mutator transaction binding the contract method 0x880cdc31.
//
// Solidity: function updateOwner(address newowner) returns()
func (_Sbt *SbtTransactor) UpdateOwner(opts *bind.TransactOpts, newowner common.Address) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "updateOwner", newowner)
}

// UpdateOwner is a paid mutator transaction binding the contract method 0x880cdc31.
//
// Solidity: function updateOwner(address newowner) returns()
func (_Sbt *SbtSession) UpdateOwner(newowner common.Address) (*types.Transaction, error) {
	return _Sbt.Contract.UpdateOwner(&_Sbt.TransactOpts, newowner)
}

// UpdateOwner is a paid mutator transaction binding the contract method 0x880cdc31.
//
// Solidity: function updateOwner(address newowner) returns()
func (_Sbt *SbtTransactorSession) UpdateOwner(newowner common.Address) (*types.Transaction, error) {
	return _Sbt.Contract.UpdateOwner(&_Sbt.TransactOpts, newowner)
}

// UpdateTotalAmount is a paid mutator transaction binding the contract method 0xfa82aa5f.
//
// Solidity: function updateTotalAmount(uint256 tokenid, uint256 totalamount) returns()
func (_Sbt *SbtTransactor) UpdateTotalAmount(opts *bind.TransactOpts, tokenid *big.Int, totalamount *big.Int) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "updateTotalAmount", tokenid, totalamount)
}

// UpdateTotalAmount is a paid mutator transaction binding the contract method 0xfa82aa5f.
//
// Solidity: function updateTotalAmount(uint256 tokenid, uint256 totalamount) returns()
func (_Sbt *SbtSession) UpdateTotalAmount(tokenid *big.Int, totalamount *big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.UpdateTotalAmount(&_Sbt.TransactOpts, tokenid, totalamount)
}

// UpdateTotalAmount is a paid mutator transaction binding the contract method 0xfa82aa5f.
//
// Solidity: function updateTotalAmount(uint256 tokenid, uint256 totalamount) returns()
func (_Sbt *SbtTransactorSession) UpdateTotalAmount(tokenid *big.Int, totalamount *big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.UpdateTotalAmount(&_Sbt.TransactOpts, tokenid, totalamount)
}

// UpdateURL is a paid mutator transaction binding the contract method 0xe144976e.
//
// Solidity: function updateURL(uint256 tokenid, string url) returns()
func (_Sbt *SbtTransactor) UpdateURL(opts *bind.TransactOpts, tokenid *big.Int, url string) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "updateURL", tokenid, url)
}

// UpdateURL is a paid mutator transaction binding the contract method 0xe144976e.
//
// Solidity: function updateURL(uint256 tokenid, string url) returns()
func (_Sbt *SbtSession) UpdateURL(tokenid *big.Int, url string) (*types.Transaction, error) {
	return _Sbt.Contract.UpdateURL(&_Sbt.TransactOpts, tokenid, url)
}

// UpdateURL is a paid mutator transaction binding the contract method 0xe144976e.
//
// Solidity: function updateURL(uint256 tokenid, string url) returns()
func (_Sbt *SbtTransactorSession) UpdateURL(tokenid *big.Int, url string) (*types.Transaction, error) {
	return _Sbt.Contract.UpdateURL(&_Sbt.TransactOpts, tokenid, url)
}

// SbtApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the Sbt contract.
type SbtApprovalForAllIterator struct {
	Event *SbtApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SbtApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SbtApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SbtApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SbtApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SbtApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SbtApprovalForAll represents a ApprovalForAll event raised by the Sbt contract.
type SbtApprovalForAll struct {
	Account  common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_Sbt *SbtFilterer) FilterApprovalForAll(opts *bind.FilterOpts, account []common.Address, operator []common.Address) (*SbtApprovalForAllIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Sbt.contract.FilterLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &SbtApprovalForAllIterator{contract: _Sbt.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_Sbt *SbtFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *SbtApprovalForAll, account []common.Address, operator []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Sbt.contract.WatchLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SbtApprovalForAll)
				if err := _Sbt.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_Sbt *SbtFilterer) ParseApprovalForAll(log types.Log) (*SbtApprovalForAll, error) {
	event := new(SbtApprovalForAll)
	if err := _Sbt.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SbtTransferBatchIterator is returned from FilterTransferBatch and is used to iterate over the raw logs and unpacked data for TransferBatch events raised by the Sbt contract.
type SbtTransferBatchIterator struct {
	Event *SbtTransferBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SbtTransferBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SbtTransferBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SbtTransferBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SbtTransferBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SbtTransferBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SbtTransferBatch represents a TransferBatch event raised by the Sbt contract.
type SbtTransferBatch struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Ids      []*big.Int
	Values   []*big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferBatch is a free log retrieval operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_Sbt *SbtFilterer) FilterTransferBatch(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*SbtTransferBatchIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Sbt.contract.FilterLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &SbtTransferBatchIterator{contract: _Sbt.contract, event: "TransferBatch", logs: logs, sub: sub}, nil
}

// WatchTransferBatch is a free log subscription operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_Sbt *SbtFilterer) WatchTransferBatch(opts *bind.WatchOpts, sink chan<- *SbtTransferBatch, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Sbt.contract.WatchLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SbtTransferBatch)
				if err := _Sbt.contract.UnpackLog(event, "TransferBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferBatch is a log parse operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_Sbt *SbtFilterer) ParseTransferBatch(log types.Log) (*SbtTransferBatch, error) {
	event := new(SbtTransferBatch)
	if err := _Sbt.contract.UnpackLog(event, "TransferBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SbtTransferSingleIterator is returned from FilterTransferSingle and is used to iterate over the raw logs and unpacked data for TransferSingle events raised by the Sbt contract.
type SbtTransferSingleIterator struct {
	Event *SbtTransferSingle // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SbtTransferSingleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SbtTransferSingle)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SbtTransferSingle)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SbtTransferSingleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SbtTransferSingleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SbtTransferSingle represents a TransferSingle event raised by the Sbt contract.
type SbtTransferSingle struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Id       *big.Int
	Value    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferSingle is a free log retrieval operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_Sbt *SbtFilterer) FilterTransferSingle(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*SbtTransferSingleIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Sbt.contract.FilterLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &SbtTransferSingleIterator{contract: _Sbt.contract, event: "TransferSingle", logs: logs, sub: sub}, nil
}

// WatchTransferSingle is a free log subscription operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_Sbt *SbtFilterer) WatchTransferSingle(opts *bind.WatchOpts, sink chan<- *SbtTransferSingle, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Sbt.contract.WatchLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SbtTransferSingle)
				if err := _Sbt.contract.UnpackLog(event, "TransferSingle", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferSingle is a log parse operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_Sbt *SbtFilterer) ParseTransferSingle(log types.Log) (*SbtTransferSingle, error) {
	event := new(SbtTransferSingle)
	if err := _Sbt.contract.UnpackLog(event, "TransferSingle", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SbtURIIterator is returned from FilterURI and is used to iterate over the raw logs and unpacked data for URI events raised by the Sbt contract.
type SbtURIIterator struct {
	Event *SbtURI // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SbtURIIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SbtURI)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SbtURI)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SbtURIIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SbtURIIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SbtURI represents a URI event raised by the Sbt contract.
type SbtURI struct {
	Value string
	Id    *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterURI is a free log retrieval operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_Sbt *SbtFilterer) FilterURI(opts *bind.FilterOpts, id []*big.Int) (*SbtURIIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _Sbt.contract.FilterLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return &SbtURIIterator{contract: _Sbt.contract, event: "URI", logs: logs, sub: sub}, nil
}

// WatchURI is a free log subscription operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_Sbt *SbtFilterer) WatchURI(opts *bind.WatchOpts, sink chan<- *SbtURI, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _Sbt.contract.WatchLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SbtURI)
				if err := _Sbt.contract.UnpackLog(event, "URI", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseURI is a log parse operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_Sbt *SbtFilterer) ParseURI(log types.Log) (*SbtURI, error) {
	event := new(SbtURI)
	if err := _Sbt.contract.UnpackLog(event, "URI", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
