// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package sbt

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// SBTTokenInfo is an auto generated low-level Go binding around an user-defined struct.
type SBTTokenInfo struct {
	Tokenid     *big.Int
	Minted      *big.Int
	Totalamount *big.Int
	Name        string
	Symbol      string
	Url         string
	Allow       *big.Int
}

// SbtMetaData contains all meta data concerning the Sbt contract.
var SbtMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TokenIDs\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"receiver\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenid\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amount\",\"type\":\"uint256[]\"}],\"name\":\"batchmint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"closeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"getminted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"getname\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"getsymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"gettotalamount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"openMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalamount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"settokenIDInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIDInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalamount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"int256\",\"name\":\"allow\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIDs\",\"type\":\"uint256[]\"}],\"name\":\"tokenIDsInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalamount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"int256\",\"name\":\"allow\",\"type\":\"int256\"}],\"internalType\":\"structSBT.TokenInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"updateNameSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newowner\",\"type\":\"address\"}],\"name\":\"updateOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalamount\",\"type\":\"uint256\"}],\"name\":\"updateTotalAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"updateURL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenid\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60806040526040518060200160405280600081525062000025816200006d60201b60201c565b5033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620003e3565b80600290816200007e9190620002fc565b5050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200010457607f821691505b6020821081036200011a5762000119620000bc565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620001847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000145565b62000190868362000145565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620001dd620001d7620001d184620001a8565b620001b2565b620001a8565b9050919050565b6000819050919050565b620001f983620001bc565b620002116200020882620001e4565b84845462000152565b825550505050565b600090565b6200022862000219565b62000235818484620001ee565b505050565b5b818110156200025d57620002516000826200021e565b6001810190506200023b565b5050565b601f821115620002ac57620002768162000120565b620002818462000135565b8101602085101562000291578190505b620002a9620002a08562000135565b8301826200023a565b50505b505050565b600082821c905092915050565b6000620002d160001984600802620002b1565b1980831691505092915050565b6000620002ec8383620002be565b9150826002028217905092915050565b620003078262000082565b67ffffffffffffffff8111156200032357620003226200008d565b5b6200032f8254620000eb565b6200033c82828562000261565b600060209050601f8311600181146200037457600084156200035f578287015190505b6200036b8582620002de565b865550620003db565b601f198416620003848662000120565b60005b82811015620003ae5784890151825560018201915060208501945060208101905062000387565b86831015620003ce5784890151620003ca601f891682620002be565b8355505b6001600288020188555050505b505050505050565b613efe80620003f36000396000f3fe608060405234801561001057600080fd5b506004361061018d5760003560e01c80635b5c45f3116100de578063b390c0ab11610097578063e144976e11610071578063e144976e146104cc578063e985e9c5146104e8578063f242432a14610518578063fa82aa5f146105345761018d565b8063b390c0ab14610464578063c68ac6b014610480578063cc9b13101461049c5761018d565b80635b5c45f3146103b8578063880cdc31146103d45780638da5cb5b146103f05780639465ffa91461040e578063a22cb4651461042a578063a3945ad3146104465761018d565b80631829f4561161014b5780633aa40d3e116101255780633aa40d3e14610306578063413f818b1461033c5780634287084f1461036c5780634e1273f4146103885761018d565b80631829f4561461029e5780632a6e10c8146102ba5780632eb2c2d6146102ea5761018d565b8062fdd58e1461019257806301ffc9a7146101c25780630202ace1146101f25780630e89341c14610222578063156e29f614610252578063163c63d11461026e575b600080fd5b6101ac60048036038101906101a791906125fe565b610550565b6040516101b9919061264d565b60405180910390f35b6101dc60048036038101906101d791906126c0565b6105aa565b6040516101e99190612708565b60405180910390f35b61020c60048036038101906102079190612723565b61068c565b60405161021991906127e0565b60405180910390f35b61023c60048036038101906102379190612723565b610734565b60405161024991906127e0565b60405180910390f35b61026c60048036038101906102679190612802565b6107dc565b005b61028860048036038101906102839190612723565b6109f5565b604051610295919061264d565b60405180910390f35b6102b860048036038101906102b3919061298a565b610a15565b005b6102d460048036038101906102cf9190612a75565b610af2565b6040516102e19190612ca0565b60405180910390f35b61030460048036038101906102ff9190612e26565b610dae565b005b610320600480360381019061031b9190612723565b610de9565b6040516103339796959493929190612f04565b60405180910390f35b61035660048036038101906103519190612723565b610fc3565b604051610363919061264d565b60405180910390f35b61038660048036038101906103819190612723565b610fe3565b005b6103a2600480360381019061039d919061304b565b611092565b6040516103af9190613172565b60405180910390f35b6103d260048036038101906103cd9190613194565b6111a1565b005b6103ee60048036038101906103e99190613263565b611380565b005b6103f86114c3565b604051610405919061329f565b60405180910390f35b610428600480360381019061042391906132ba565b6114e9565b005b610444600480360381019061043f919061338d565b611716565b005b61044e611751565b60405161045b9190613172565b60405180910390f35b61047e600480360381019061047991906133cd565b6117a9565b005b61049a60048036038101906104959190612723565b6117b8565b005b6104b660048036038101906104b19190612723565b611867565b6040516104c391906127e0565b60405180910390f35b6104e660048036038101906104e1919061340d565b61190f565b005b61050260048036038101906104fd9190613469565b6119c7565b60405161050f9190612708565b60405180910390f35b610532600480360381019061052d91906134a9565b611a04565b005b61054e600480360381019061054991906133cd565b611a3f565b005b600080600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061067557507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610685575061068482611b47565b5b9050919050565b60606004600083815260200190815260200160002060030180546106af9061356f565b80601f01602080910402602001604051908101604052809291908181526020018280546106db9061356f565b80156107285780601f106106fd57610100808354040283529160200191610728565b820191906000526020600020905b81548152906001019060200180831161070b57829003601f168201915b50505050509050919050565b60606004600083815260200190815260200160002060050180546107579061356f565b80601f01602080910402602001604051908101604052809291908181526020018280546107839061356f565b80156107d05780601f106107a5576101008083540402835291602001916107d0565b820191906000526020600020905b8154815290600101906020018083116107b357829003601f168201915b50505050509050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461086c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610863906135ec565b60405180910390fd5b8160006004600083815260200190815260200160002060060154146108c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108bd9061367e565b60405180910390fd5b600060046000858152602001908152602001600020600101540361090e5760058390806001815401808255809150506001900390600052602060002001600090919091909150555b60006004600085815260200190815260200160002060020154146109a757600460008481526020019081526020016000206002015482600460008681526020019081526020016000206001015461096591906136cd565b11156109a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099d9061374d565b60405180910390fd5b5b816004600085815260200190815260200160002060010160008282546109cd91906136cd565b925050819055506109ef84848460405180602001604052806000815250611bb1565b50505050565b600060046000838152602001908152602001600020600201549050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610aa5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9c906135ec565b60405180910390fd5b81600460008581526020019081526020016000206003019081610ac89190613919565b5080600460008581526020019081526020016000206004019081610aec9190613919565b50505050565b606060008383905067ffffffffffffffff811115610b1357610b1261285f565b5b604051908082528060200260200182016040528015610b4c57816020015b610b39612519565b815260200190600190039081610b315790505b50905060005b84849050811015610da35760046000868684818110610b7457610b736139eb565b5b9050602002013581526020019081526020016000206040518060e0016040529081600082015481526020016001820154815260200160028201548152602001600382018054610bc29061356f565b80601f0160208091040260200160405190810160405280929190818152602001828054610bee9061356f565b8015610c3b5780601f10610c1057610100808354040283529160200191610c3b565b820191906000526020600020905b815481529060010190602001808311610c1e57829003601f168201915b50505050508152602001600482018054610c549061356f565b80601f0160208091040260200160405190810160405280929190818152602001828054610c809061356f565b8015610ccd5780601f10610ca257610100808354040283529160200191610ccd565b820191906000526020600020905b815481529060010190602001808311610cb057829003601f168201915b50505050508152602001600582018054610ce69061356f565b80601f0160208091040260200160405190810160405280929190818152602001828054610d129061356f565b8015610d5f5780601f10610d3457610100808354040283529160200191610d5f565b820191906000526020600020905b815481529060010190602001808311610d4257829003601f168201915b50505050508152602001600682015481525050828281518110610d8557610d846139eb565b5b60200260200101819052508080610d9b90613a1a565b915050610b52565b508091505092915050565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de090613ad4565b60405180910390fd5b6004602052806000526040600020600091509050806000015490806001015490806002015490806003018054610e1e9061356f565b80601f0160208091040260200160405190810160405280929190818152602001828054610e4a9061356f565b8015610e975780601f10610e6c57610100808354040283529160200191610e97565b820191906000526020600020905b815481529060010190602001808311610e7a57829003601f168201915b505050505090806004018054610eac9061356f565b80601f0160208091040260200160405190810160405280929190818152602001828054610ed89061356f565b8015610f255780601f10610efa57610100808354040283529160200191610f25565b820191906000526020600020905b815481529060010190602001808311610f0857829003601f168201915b505050505090806005018054610f3a9061356f565b80601f0160208091040260200160405190810160405280929190818152602001828054610f669061356f565b8015610fb35780601f10610f8857610100808354040283529160200191610fb3565b820191906000526020600020905b815481529060010190602001808311610f9657829003601f168201915b5050505050908060060154905087565b600060046000838152602001908152602001600020600101549050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611073576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106a906135ec565b60405180910390fd5b6000600460008381526020019081526020016000206006018190555050565b606081518351146110de57815183516040517f5b0599910000000000000000000000000000000000000000000000000000000081526004016110d5929190613af4565b60405180910390fd5b6000835167ffffffffffffffff8111156110fb576110fa61285f565b5b6040519080825280602002602001820160405280156111295781602001602082028036833780820191505090505b50905060005b84518110156111965761116661114e8287611c4a90919063ffffffff16565b6111618387611c5e90919063ffffffff16565b610550565b828281518110611179576111786139eb565b5b6020026020010181815250508061118f90613a1a565b905061112f565b508091505092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611231576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611228906135ec565b60405180910390fd5b600084146112a9576004600086815260200190815260200160002060010154600460008781526020019081526020016000206002015410156112a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129f90613b8f565b60405180910390fd5b5b60006040518060e0016040528087815260200160046000898152602001908152602001600020600101548152602001868152602001858152602001848152602001838152602001600081525090508060046000888152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301908161133e9190613919565b5060808201518160040190816113549190613919565b5060a082015181600501908161136a9190613919565b5060c08201518160060155905050505050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611410576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611407906135ec565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361147f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147690613bfb565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611579576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611570906135ec565b60405180910390fd5b600083511415801561158c575080518351145b6115cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c290613c67565b60405180910390fd5b60018251036116535760005b835181101561164d5761163a8482815181106115f6576115f56139eb565b5b602002602001015184600081518110611612576116116139eb565b5b602002602001015184848151811061162d5761162c6139eb565b5b60200260200101516107dc565b808061164590613a1a565b9150506115d7565b50611711565b8151835114611697576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168e90613c67565b60405180910390fd5b60005b835181101561170f576116fc8482815181106116b9576116b86139eb565b5b60200260200101518483815181106116d4576116d36139eb565b5b60200260200101518484815181106116ef576116ee6139eb565b5b60200260200101516107dc565b808061170790613a1a565b91505061169a565b505b505050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161174890613ad4565b60405180910390fd5b6060600580548060200260200160405190810160405280929190818152602001828054801561179f57602002820191906000526020600020905b81548152602001906001019080831161178b575b5050505050905090565b6117b4338383611c72565b5050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611848576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183f906135ec565b60405180910390fd5b6001600460008381526020019081526020016000206006018190555050565b606060046000838152602001908152602001600020600401805461188a9061356f565b80601f01602080910402602001604051908101604052809291908181526020018280546118b69061356f565b80156119035780601f106118d857610100808354040283529160200191611903565b820191906000526020600020905b8154815290600101906020018083116118e657829003601f168201915b50505050509050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461199f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611996906135ec565b60405180910390fd5b806004600084815260200190815260200160002060050190816119c29190613919565b505050565b60006040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119fb90613ad4565b60405180910390fd5b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3690613ad4565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611acf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ac6906135ec565b60405180910390fd5b6004600083815260200190815260200160002060010154811015611b28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b1f90613cd3565b60405180910390fd5b8060046000848152602001908152602001600020600201819055505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603611c235760006040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401611c1a919061329f565b60405180910390fd5b600080611c308585611d19565b91509150611c42600087848487611d49565b505050505050565b600060208202602084010151905092915050565b600060208202602084010151905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611ce45760006040517f01a83514000000000000000000000000000000000000000000000000000000008152600401611cdb919061329f565b60405180910390fd5b600080611cf18484611d19565b91509150611d12856000848460405180602001604052806000815250611d49565b5050505050565b60608060405191506001825283602083015260408201905060018152826020820152604081016040529250929050565b611d5585858585611dfb565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614611df4576000611d936121a9565b90506001845103611de3576000611db4600086611c5e90919063ffffffff16565b90506000611dcc600086611c5e90919063ffffffff16565b9050611ddc8389898585896121b1565b5050611df2565b611df1818787878787612365565b5b505b5050505050565b8051825114611e4557815181516040517f5b059991000000000000000000000000000000000000000000000000000000008152600401611e3c929190613af4565b60405180910390fd5b6000611e4f6121a9565b905060005b8351811015612064576000611e728286611c5e90919063ffffffff16565b90506000611e898386611c5e90919063ffffffff16565b9050600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614611fb657600080600084815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611f5e57888183856040517f03dee4c5000000000000000000000000000000000000000000000000000000008152600401611f559493929190613cf3565b60405180910390fd5b81810360008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614612051578060008084815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461204991906136cd565b925050819055505b50508061205d90613a1a565b9050611e54565b506001835103612123576000612084600085611c5e90919063ffffffff16565b9050600061209c600085611c5e90919063ffffffff16565b90508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628585604051612114929190613af4565b60405180910390a450506121a2565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051612199929190613d38565b60405180910390a45b5050505050565b600033905090565b60008473ffffffffffffffffffffffffffffffffffffffff163b111561235d578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401612212959493929190613dc4565b6020604051808303816000875af192505050801561224e57506040513d601f19601f8201168201806040525081019061224b9190613e33565b60015b6122d2573d806000811461227e576040519150601f19603f3d011682016040523d82523d6000602084013e612283565b606091505b5060008151036122ca57846040517f57f447ce0000000000000000000000000000000000000000000000000000000081526004016122c1919061329f565b60405180910390fd5b805181602001fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461235b57846040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401612352919061329f565b60405180910390fd5b505b505050505050565b60008473ffffffffffffffffffffffffffffffffffffffff163b1115612511578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b81526004016123c6959493929190613e60565b6020604051808303816000875af192505050801561240257506040513d601f19601f820116820180604052508101906123ff9190613e33565b60015b612486573d8060008114612432576040519150601f19603f3d011682016040523d82523d6000602084013e612437565b606091505b50600081510361247e57846040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401612475919061329f565b60405180910390fd5b805181602001fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461250f57846040517f57f447ce000000000000000000000000000000000000000000000000000000008152600401612506919061329f565b60405180910390fd5b505b505050505050565b6040518060e00160405280600081526020016000815260200160008152602001606081526020016060815260200160608152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006125958261256a565b9050919050565b6125a58161258a565b81146125b057600080fd5b50565b6000813590506125c28161259c565b92915050565b6000819050919050565b6125db816125c8565b81146125e657600080fd5b50565b6000813590506125f8816125d2565b92915050565b6000806040838503121561261557612614612560565b5b6000612623858286016125b3565b9250506020612634858286016125e9565b9150509250929050565b612647816125c8565b82525050565b6000602082019050612662600083018461263e565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61269d81612668565b81146126a857600080fd5b50565b6000813590506126ba81612694565b92915050565b6000602082840312156126d6576126d5612560565b5b60006126e4848285016126ab565b91505092915050565b60008115159050919050565b612702816126ed565b82525050565b600060208201905061271d60008301846126f9565b92915050565b60006020828403121561273957612738612560565b5b6000612747848285016125e9565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561278a57808201518184015260208101905061276f565b60008484015250505050565b6000601f19601f8301169050919050565b60006127b282612750565b6127bc818561275b565b93506127cc81856020860161276c565b6127d581612796565b840191505092915050565b600060208201905081810360008301526127fa81846127a7565b905092915050565b60008060006060848603121561281b5761281a612560565b5b6000612829868287016125b3565b935050602061283a868287016125e9565b925050604061284b868287016125e9565b9150509250925092565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61289782612796565b810181811067ffffffffffffffff821117156128b6576128b561285f565b5b80604052505050565b60006128c9612556565b90506128d5828261288e565b919050565b600067ffffffffffffffff8211156128f5576128f461285f565b5b6128fe82612796565b9050602081019050919050565b82818337600083830152505050565b600061292d612928846128da565b6128bf565b9050828152602081018484840111156129495761294861285a565b5b61295484828561290b565b509392505050565b600082601f83011261297157612970612855565b5b813561298184826020860161291a565b91505092915050565b6000806000606084860312156129a3576129a2612560565b5b60006129b1868287016125e9565b935050602084013567ffffffffffffffff8111156129d2576129d1612565565b5b6129de8682870161295c565b925050604084013567ffffffffffffffff8111156129ff576129fe612565565b5b612a0b8682870161295c565b9150509250925092565b600080fd5b600080fd5b60008083601f840112612a3557612a34612855565b5b8235905067ffffffffffffffff811115612a5257612a51612a15565b5b602083019150836020820283011115612a6e57612a6d612a1a565b5b9250929050565b60008060208385031215612a8c57612a8b612560565b5b600083013567ffffffffffffffff811115612aaa57612aa9612565565b5b612ab685828601612a1f565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612af7816125c8565b82525050565b600082825260208201905092915050565b6000612b1982612750565b612b238185612afd565b9350612b3381856020860161276c565b612b3c81612796565b840191505092915050565b6000819050919050565b612b5a81612b47565b82525050565b600060e083016000830151612b786000860182612aee565b506020830151612b8b6020860182612aee565b506040830151612b9e6040860182612aee565b5060608301518482036060860152612bb68282612b0e565b91505060808301518482036080860152612bd08282612b0e565b91505060a083015184820360a0860152612bea8282612b0e565b91505060c0830151612bff60c0860182612b51565b508091505092915050565b6000612c168383612b60565b905092915050565b6000602082019050919050565b6000612c3682612ac2565b612c408185612acd565b935083602082028501612c5285612ade565b8060005b85811015612c8e5784840389528151612c6f8582612c0a565b9450612c7a83612c1e565b925060208a01995050600181019050612c56565b50829750879550505050505092915050565b60006020820190508181036000830152612cba8184612c2b565b905092915050565b600067ffffffffffffffff821115612cdd57612cdc61285f565b5b602082029050602081019050919050565b6000612d01612cfc84612cc2565b6128bf565b90508083825260208201905060208402830185811115612d2457612d23612a1a565b5b835b81811015612d4d5780612d3988826125e9565b845260208401935050602081019050612d26565b5050509392505050565b600082601f830112612d6c57612d6b612855565b5b8135612d7c848260208601612cee565b91505092915050565b600067ffffffffffffffff821115612da057612d9f61285f565b5b612da982612796565b9050602081019050919050565b6000612dc9612dc484612d85565b6128bf565b905082815260208101848484011115612de557612de461285a565b5b612df084828561290b565b509392505050565b600082601f830112612e0d57612e0c612855565b5b8135612e1d848260208601612db6565b91505092915050565b600080600080600060a08688031215612e4257612e41612560565b5b6000612e50888289016125b3565b9550506020612e61888289016125b3565b945050604086013567ffffffffffffffff811115612e8257612e81612565565b5b612e8e88828901612d57565b935050606086013567ffffffffffffffff811115612eaf57612eae612565565b5b612ebb88828901612d57565b925050608086013567ffffffffffffffff811115612edc57612edb612565565b5b612ee888828901612df8565b9150509295509295909350565b612efe81612b47565b82525050565b600060e082019050612f19600083018a61263e565b612f26602083018961263e565b612f33604083018861263e565b8181036060830152612f4581876127a7565b90508181036080830152612f5981866127a7565b905081810360a0830152612f6d81856127a7565b9050612f7c60c0830184612ef5565b98975050505050505050565b600067ffffffffffffffff821115612fa357612fa261285f565b5b602082029050602081019050919050565b6000612fc7612fc284612f88565b6128bf565b90508083825260208201905060208402830185811115612fea57612fe9612a1a565b5b835b818110156130135780612fff88826125b3565b845260208401935050602081019050612fec565b5050509392505050565b600082601f83011261303257613031612855565b5b8135613042848260208601612fb4565b91505092915050565b6000806040838503121561306257613061612560565b5b600083013567ffffffffffffffff8111156130805761307f612565565b5b61308c8582860161301d565b925050602083013567ffffffffffffffff8111156130ad576130ac612565565b5b6130b985828601612d57565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006130fb8383612aee565b60208301905092915050565b6000602082019050919050565b600061311f826130c3565b61312981856130ce565b9350613134836130df565b8060005b8381101561316557815161314c88826130ef565b975061315783613107565b925050600181019050613138565b5085935050505092915050565b6000602082019050818103600083015261318c8184613114565b905092915050565b600080600080600060a086880312156131b0576131af612560565b5b60006131be888289016125e9565b95505060206131cf888289016125e9565b945050604086013567ffffffffffffffff8111156131f0576131ef612565565b5b6131fc8882890161295c565b935050606086013567ffffffffffffffff81111561321d5761321c612565565b5b6132298882890161295c565b925050608086013567ffffffffffffffff81111561324a57613249612565565b5b6132568882890161295c565b9150509295509295909350565b60006020828403121561327957613278612560565b5b6000613287848285016125b3565b91505092915050565b6132998161258a565b82525050565b60006020820190506132b46000830184613290565b92915050565b6000806000606084860312156132d3576132d2612560565b5b600084013567ffffffffffffffff8111156132f1576132f0612565565b5b6132fd8682870161301d565b935050602084013567ffffffffffffffff81111561331e5761331d612565565b5b61332a86828701612d57565b925050604084013567ffffffffffffffff81111561334b5761334a612565565b5b61335786828701612d57565b9150509250925092565b61336a816126ed565b811461337557600080fd5b50565b60008135905061338781613361565b92915050565b600080604083850312156133a4576133a3612560565b5b60006133b2858286016125b3565b92505060206133c385828601613378565b9150509250929050565b600080604083850312156133e4576133e3612560565b5b60006133f2858286016125e9565b9250506020613403858286016125e9565b9150509250929050565b6000806040838503121561342457613423612560565b5b6000613432858286016125e9565b925050602083013567ffffffffffffffff81111561345357613452612565565b5b61345f8582860161295c565b9150509250929050565b600080604083850312156134805761347f612560565b5b600061348e858286016125b3565b925050602061349f858286016125b3565b9150509250929050565b600080600080600060a086880312156134c5576134c4612560565b5b60006134d3888289016125b3565b95505060206134e4888289016125b3565b94505060406134f5888289016125e9565b9350506060613506888289016125e9565b925050608086013567ffffffffffffffff81111561352757613526612565565b5b61353388828901612df8565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061358757607f821691505b60208210810361359a57613599613540565b5b50919050565b7f4f6e6c79206f70657261746f722063616e206d696e74206e657720736f756c73600082015250565b60006135d660208361275b565b91506135e1826135a0565b602082019050919050565b60006020820190508181036000830152613605816135c9565b9050919050565b7f5468697320746f6b656e6964206576656e7420686173206265656e20636c6f7360008201527f6564000000000000000000000000000000000000000000000000000000000000602082015250565b600061366860228361275b565b91506136738261360c565b604082019050919050565b600060208201905081810360008301526136978161365b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006136d8826125c8565b91506136e3836125c8565b92508282019050808211156136fb576136fa61369e565b5b92915050565b7f4e6f7420456e6f75676820546f6b656e4944206c656674000000000000000000600082015250565b600061373760178361275b565b915061374282613701565b602082019050919050565b600060208201905081810360008301526137668161372a565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026137cf7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613792565b6137d98683613792565b95508019841693508086168417925050509392505050565b6000819050919050565b600061381661381161380c846125c8565b6137f1565b6125c8565b9050919050565b6000819050919050565b613830836137fb565b61384461383c8261381d565b84845461379f565b825550505050565b600090565b61385961384c565b613864818484613827565b505050565b5b818110156138885761387d600082613851565b60018101905061386a565b5050565b601f8211156138cd5761389e8161376d565b6138a784613782565b810160208510156138b6578190505b6138ca6138c285613782565b830182613869565b50505b505050565b600082821c905092915050565b60006138f0600019846008026138d2565b1980831691505092915050565b600061390983836138df565b9150826002028217905092915050565b61392282612750565b67ffffffffffffffff81111561393b5761393a61285f565b5b613945825461356f565b61395082828561388c565b600060209050601f8311600181146139835760008415613971578287015190505b61397b85826138fd565b8655506139e3565b601f1984166139918661376d565b60005b828110156139b957848901518255600182019150602085019450602081019050613994565b868310156139d657848901516139d2601f8916826138df565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000613a25826125c8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613a5757613a5661369e565b5b600182019050919050565b7f5472616e73666572206e6f7420737570706f7274656420666f7220736f756c2060008201527f626f756e6420746f6b656e2e0000000000000000000000000000000000000000602082015250565b6000613abe602c8361275b565b9150613ac982613a62565b604082019050919050565b60006020820190508181036000830152613aed81613ab1565b9050919050565b6000604082019050613b09600083018561263e565b613b16602083018461263e565b9392505050565b7f546f74616c616d6f756e74206d757374206d6f7265207468616e206d696e746560008201527f6420616d6f756e74000000000000000000000000000000000000000000000000602082015250565b6000613b7960288361275b565b9150613b8482613b1d565b604082019050919050565b60006020820190508181036000830152613ba881613b6c565b9050919050565b7f496e76616c6964204f776e657200000000000000000000000000000000000000600082015250565b6000613be5600d8361275b565b9150613bf082613baf565b602082019050919050565b60006020820190508181036000830152613c1481613bd8565b9050919050565b7f556e6d617463686564206c656e67746800000000000000000000000000000000600082015250565b6000613c5160108361275b565b9150613c5c82613c1b565b602082019050919050565b60006020820190508181036000830152613c8081613c44565b9050919050565b7f546f6b656e616d6f756e74206d757374206d6f7265207468616e203000000000600082015250565b6000613cbd601c8361275b565b9150613cc882613c87565b602082019050919050565b60006020820190508181036000830152613cec81613cb0565b9050919050565b6000608082019050613d086000830187613290565b613d15602083018661263e565b613d22604083018561263e565b613d2f606083018461263e565b95945050505050565b60006040820190508181036000830152613d528185613114565b90508181036020830152613d668184613114565b90509392505050565b600081519050919050565b600082825260208201905092915050565b6000613d9682613d6f565b613da08185613d7a565b9350613db081856020860161276c565b613db981612796565b840191505092915050565b600060a082019050613dd96000830188613290565b613de66020830187613290565b613df3604083018661263e565b613e00606083018561263e565b8181036080830152613e128184613d8b565b90509695505050505050565b600081519050613e2d81612694565b92915050565b600060208284031215613e4957613e48612560565b5b6000613e5784828501613e1e565b91505092915050565b600060a082019050613e756000830188613290565b613e826020830187613290565b8181036040830152613e948186613114565b90508181036060830152613ea88185613114565b90508181036080830152613ebc8184613d8b565b9050969550505050505056fea2646970667358221220666b0df02e3522fbf6827146010b1f4ed3670ac0fd1fd21b6afade7e04e1832e64736f6c63430008140033",
}

// SbtABI is the input ABI used to generate the binding from.
// Deprecated: Use SbtMetaData.ABI instead.
var SbtABI = SbtMetaData.ABI

// SbtBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SbtMetaData.Bin instead.
var SbtBin = SbtMetaData.Bin

// DeploySbt deploys a new Ethereum contract, binding an instance of Sbt to it.
func DeploySbt(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Sbt, error) {
	parsed, err := SbtMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SbtBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Sbt{SbtCaller: SbtCaller{contract: contract}, SbtTransactor: SbtTransactor{contract: contract}, SbtFilterer: SbtFilterer{contract: contract}}, nil
}

// Sbt is an auto generated Go binding around an Ethereum contract.
type Sbt struct {
	SbtCaller     // Read-only binding to the contract
	SbtTransactor // Write-only binding to the contract
	SbtFilterer   // Log filterer for contract events
}

// SbtCaller is an auto generated read-only Go binding around an Ethereum contract.
type SbtCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SbtTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SbtTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SbtFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SbtFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SbtSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SbtSession struct {
	Contract     *Sbt              // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SbtCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SbtCallerSession struct {
	Contract *SbtCaller    // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// SbtTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SbtTransactorSession struct {
	Contract     *SbtTransactor    // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SbtRaw is an auto generated low-level Go binding around an Ethereum contract.
type SbtRaw struct {
	Contract *Sbt // Generic contract binding to access the raw methods on
}

// SbtCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SbtCallerRaw struct {
	Contract *SbtCaller // Generic read-only contract binding to access the raw methods on
}

// SbtTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SbtTransactorRaw struct {
	Contract *SbtTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSbt creates a new instance of Sbt, bound to a specific deployed contract.
func NewSbt(address common.Address, backend bind.ContractBackend) (*Sbt, error) {
	contract, err := bindSbt(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Sbt{SbtCaller: SbtCaller{contract: contract}, SbtTransactor: SbtTransactor{contract: contract}, SbtFilterer: SbtFilterer{contract: contract}}, nil
}

// NewSbtCaller creates a new read-only instance of Sbt, bound to a specific deployed contract.
func NewSbtCaller(address common.Address, caller bind.ContractCaller) (*SbtCaller, error) {
	contract, err := bindSbt(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SbtCaller{contract: contract}, nil
}

// NewSbtTransactor creates a new write-only instance of Sbt, bound to a specific deployed contract.
func NewSbtTransactor(address common.Address, transactor bind.ContractTransactor) (*SbtTransactor, error) {
	contract, err := bindSbt(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SbtTransactor{contract: contract}, nil
}

// NewSbtFilterer creates a new log filterer instance of Sbt, bound to a specific deployed contract.
func NewSbtFilterer(address common.Address, filterer bind.ContractFilterer) (*SbtFilterer, error) {
	contract, err := bindSbt(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SbtFilterer{contract: contract}, nil
}

// bindSbt binds a generic wrapper to an already deployed contract.
func bindSbt(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SbtMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Sbt *SbtRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Sbt.Contract.SbtCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Sbt *SbtRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Sbt.Contract.SbtTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Sbt *SbtRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Sbt.Contract.SbtTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Sbt *SbtCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Sbt.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Sbt *SbtTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Sbt.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Sbt *SbtTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Sbt.Contract.contract.Transact(opts, method, params...)
}

// TokenIDs is a free data retrieval call binding the contract method 0xa3945ad3.
//
// Solidity: function TokenIDs() view returns(uint256[])
func (_Sbt *SbtCaller) TokenIDs(opts *bind.CallOpts) ([]*big.Int, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "TokenIDs")

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// TokenIDs is a free data retrieval call binding the contract method 0xa3945ad3.
//
// Solidity: function TokenIDs() view returns(uint256[])
func (_Sbt *SbtSession) TokenIDs() ([]*big.Int, error) {
	return _Sbt.Contract.TokenIDs(&_Sbt.CallOpts)
}

// TokenIDs is a free data retrieval call binding the contract method 0xa3945ad3.
//
// Solidity: function TokenIDs() view returns(uint256[])
func (_Sbt *SbtCallerSession) TokenIDs() ([]*big.Int, error) {
	return _Sbt.Contract.TokenIDs(&_Sbt.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_Sbt *SbtCaller) BalanceOf(opts *bind.CallOpts, account common.Address, id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "balanceOf", account, id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_Sbt *SbtSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _Sbt.Contract.BalanceOf(&_Sbt.CallOpts, account, id)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_Sbt *SbtCallerSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _Sbt.Contract.BalanceOf(&_Sbt.CallOpts, account, id)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_Sbt *SbtCaller) BalanceOfBatch(opts *bind.CallOpts, accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "balanceOfBatch", accounts, ids)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_Sbt *SbtSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _Sbt.Contract.BalanceOfBatch(&_Sbt.CallOpts, accounts, ids)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_Sbt *SbtCallerSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _Sbt.Contract.BalanceOfBatch(&_Sbt.CallOpts, accounts, ids)
}

// Getminted is a free data retrieval call binding the contract method 0x413f818b.
//
// Solidity: function getminted(uint256 tokenid) view returns(uint256)
func (_Sbt *SbtCaller) Getminted(opts *bind.CallOpts, tokenid *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "getminted", tokenid)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Getminted is a free data retrieval call binding the contract method 0x413f818b.
//
// Solidity: function getminted(uint256 tokenid) view returns(uint256)
func (_Sbt *SbtSession) Getminted(tokenid *big.Int) (*big.Int, error) {
	return _Sbt.Contract.Getminted(&_Sbt.CallOpts, tokenid)
}

// Getminted is a free data retrieval call binding the contract method 0x413f818b.
//
// Solidity: function getminted(uint256 tokenid) view returns(uint256)
func (_Sbt *SbtCallerSession) Getminted(tokenid *big.Int) (*big.Int, error) {
	return _Sbt.Contract.Getminted(&_Sbt.CallOpts, tokenid)
}

// Getname is a free data retrieval call binding the contract method 0x0202ace1.
//
// Solidity: function getname(uint256 tokenid) view returns(string)
func (_Sbt *SbtCaller) Getname(opts *bind.CallOpts, tokenid *big.Int) (string, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "getname", tokenid)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Getname is a free data retrieval call binding the contract method 0x0202ace1.
//
// Solidity: function getname(uint256 tokenid) view returns(string)
func (_Sbt *SbtSession) Getname(tokenid *big.Int) (string, error) {
	return _Sbt.Contract.Getname(&_Sbt.CallOpts, tokenid)
}

// Getname is a free data retrieval call binding the contract method 0x0202ace1.
//
// Solidity: function getname(uint256 tokenid) view returns(string)
func (_Sbt *SbtCallerSession) Getname(tokenid *big.Int) (string, error) {
	return _Sbt.Contract.Getname(&_Sbt.CallOpts, tokenid)
}

// Getsymbol is a free data retrieval call binding the contract method 0xcc9b1310.
//
// Solidity: function getsymbol(uint256 tokenid) view returns(string)
func (_Sbt *SbtCaller) Getsymbol(opts *bind.CallOpts, tokenid *big.Int) (string, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "getsymbol", tokenid)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Getsymbol is a free data retrieval call binding the contract method 0xcc9b1310.
//
// Solidity: function getsymbol(uint256 tokenid) view returns(string)
func (_Sbt *SbtSession) Getsymbol(tokenid *big.Int) (string, error) {
	return _Sbt.Contract.Getsymbol(&_Sbt.CallOpts, tokenid)
}

// Getsymbol is a free data retrieval call binding the contract method 0xcc9b1310.
//
// Solidity: function getsymbol(uint256 tokenid) view returns(string)
func (_Sbt *SbtCallerSession) Getsymbol(tokenid *big.Int) (string, error) {
	return _Sbt.Contract.Getsymbol(&_Sbt.CallOpts, tokenid)
}

// Gettotalamount is a free data retrieval call binding the contract method 0x163c63d1.
//
// Solidity: function gettotalamount(uint256 tokenid) view returns(uint256)
func (_Sbt *SbtCaller) Gettotalamount(opts *bind.CallOpts, tokenid *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "gettotalamount", tokenid)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Gettotalamount is a free data retrieval call binding the contract method 0x163c63d1.
//
// Solidity: function gettotalamount(uint256 tokenid) view returns(uint256)
func (_Sbt *SbtSession) Gettotalamount(tokenid *big.Int) (*big.Int, error) {
	return _Sbt.Contract.Gettotalamount(&_Sbt.CallOpts, tokenid)
}

// Gettotalamount is a free data retrieval call binding the contract method 0x163c63d1.
//
// Solidity: function gettotalamount(uint256 tokenid) view returns(uint256)
func (_Sbt *SbtCallerSession) Gettotalamount(tokenid *big.Int) (*big.Int, error) {
	return _Sbt.Contract.Gettotalamount(&_Sbt.CallOpts, tokenid)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address , address ) view returns(bool)
func (_Sbt *SbtCaller) IsApprovedForAll(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (bool, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "isApprovedForAll", arg0, arg1)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address , address ) view returns(bool)
func (_Sbt *SbtSession) IsApprovedForAll(arg0 common.Address, arg1 common.Address) (bool, error) {
	return _Sbt.Contract.IsApprovedForAll(&_Sbt.CallOpts, arg0, arg1)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address , address ) view returns(bool)
func (_Sbt *SbtCallerSession) IsApprovedForAll(arg0 common.Address, arg1 common.Address) (bool, error) {
	return _Sbt.Contract.IsApprovedForAll(&_Sbt.CallOpts, arg0, arg1)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Sbt *SbtCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Sbt *SbtSession) Owner() (common.Address, error) {
	return _Sbt.Contract.Owner(&_Sbt.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Sbt *SbtCallerSession) Owner() (common.Address, error) {
	return _Sbt.Contract.Owner(&_Sbt.CallOpts)
}

// SafeTransferFrom is a free data retrieval call binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address , address , uint256 , uint256 , bytes ) pure returns()
func (_Sbt *SbtCaller) SafeTransferFrom(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) error {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "safeTransferFrom", arg0, arg1, arg2, arg3, arg4)

	if err != nil {
		return err
	}

	return err

}

// SafeTransferFrom is a free data retrieval call binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address , address , uint256 , uint256 , bytes ) pure returns()
func (_Sbt *SbtSession) SafeTransferFrom(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) error {
	return _Sbt.Contract.SafeTransferFrom(&_Sbt.CallOpts, arg0, arg1, arg2, arg3, arg4)
}

// SafeTransferFrom is a free data retrieval call binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address , address , uint256 , uint256 , bytes ) pure returns()
func (_Sbt *SbtCallerSession) SafeTransferFrom(arg0 common.Address, arg1 common.Address, arg2 *big.Int, arg3 *big.Int, arg4 []byte) error {
	return _Sbt.Contract.SafeTransferFrom(&_Sbt.CallOpts, arg0, arg1, arg2, arg3, arg4)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Sbt *SbtCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Sbt *SbtSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Sbt.Contract.SupportsInterface(&_Sbt.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Sbt *SbtCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Sbt.Contract.SupportsInterface(&_Sbt.CallOpts, interfaceId)
}

// TokenIDInfo is a free data retrieval call binding the contract method 0x3aa40d3e.
//
// Solidity: function tokenIDInfo(uint256 ) view returns(uint256 tokenid, uint256 minted, uint256 totalamount, string name, string symbol, string url, int256 allow)
func (_Sbt *SbtCaller) TokenIDInfo(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Tokenid     *big.Int
	Minted      *big.Int
	Totalamount *big.Int
	Name        string
	Symbol      string
	Url         string
	Allow       *big.Int
}, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "tokenIDInfo", arg0)

	outstruct := new(struct {
		Tokenid     *big.Int
		Minted      *big.Int
		Totalamount *big.Int
		Name        string
		Symbol      string
		Url         string
		Allow       *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Tokenid = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Minted = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Totalamount = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Name = *abi.ConvertType(out[3], new(string)).(*string)
	outstruct.Symbol = *abi.ConvertType(out[4], new(string)).(*string)
	outstruct.Url = *abi.ConvertType(out[5], new(string)).(*string)
	outstruct.Allow = *abi.ConvertType(out[6], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// TokenIDInfo is a free data retrieval call binding the contract method 0x3aa40d3e.
//
// Solidity: function tokenIDInfo(uint256 ) view returns(uint256 tokenid, uint256 minted, uint256 totalamount, string name, string symbol, string url, int256 allow)
func (_Sbt *SbtSession) TokenIDInfo(arg0 *big.Int) (struct {
	Tokenid     *big.Int
	Minted      *big.Int
	Totalamount *big.Int
	Name        string
	Symbol      string
	Url         string
	Allow       *big.Int
}, error) {
	return _Sbt.Contract.TokenIDInfo(&_Sbt.CallOpts, arg0)
}

// TokenIDInfo is a free data retrieval call binding the contract method 0x3aa40d3e.
//
// Solidity: function tokenIDInfo(uint256 ) view returns(uint256 tokenid, uint256 minted, uint256 totalamount, string name, string symbol, string url, int256 allow)
func (_Sbt *SbtCallerSession) TokenIDInfo(arg0 *big.Int) (struct {
	Tokenid     *big.Int
	Minted      *big.Int
	Totalamount *big.Int
	Name        string
	Symbol      string
	Url         string
	Allow       *big.Int
}, error) {
	return _Sbt.Contract.TokenIDInfo(&_Sbt.CallOpts, arg0)
}

// TokenIDsInfo is a free data retrieval call binding the contract method 0x2a6e10c8.
//
// Solidity: function tokenIDsInfo(uint256[] _tokenIDs) view returns((uint256,uint256,uint256,string,string,string,int256)[])
func (_Sbt *SbtCaller) TokenIDsInfo(opts *bind.CallOpts, _tokenIDs []*big.Int) ([]SBTTokenInfo, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "tokenIDsInfo", _tokenIDs)

	if err != nil {
		return *new([]SBTTokenInfo), err
	}

	out0 := *abi.ConvertType(out[0], new([]SBTTokenInfo)).(*[]SBTTokenInfo)

	return out0, err

}

// TokenIDsInfo is a free data retrieval call binding the contract method 0x2a6e10c8.
//
// Solidity: function tokenIDsInfo(uint256[] _tokenIDs) view returns((uint256,uint256,uint256,string,string,string,int256)[])
func (_Sbt *SbtSession) TokenIDsInfo(_tokenIDs []*big.Int) ([]SBTTokenInfo, error) {
	return _Sbt.Contract.TokenIDsInfo(&_Sbt.CallOpts, _tokenIDs)
}

// TokenIDsInfo is a free data retrieval call binding the contract method 0x2a6e10c8.
//
// Solidity: function tokenIDsInfo(uint256[] _tokenIDs) view returns((uint256,uint256,uint256,string,string,string,int256)[])
func (_Sbt *SbtCallerSession) TokenIDsInfo(_tokenIDs []*big.Int) ([]SBTTokenInfo, error) {
	return _Sbt.Contract.TokenIDsInfo(&_Sbt.CallOpts, _tokenIDs)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 tokenid) view returns(string)
func (_Sbt *SbtCaller) Uri(opts *bind.CallOpts, tokenid *big.Int) (string, error) {
	var out []interface{}
	err := _Sbt.contract.Call(opts, &out, "uri", tokenid)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 tokenid) view returns(string)
func (_Sbt *SbtSession) Uri(tokenid *big.Int) (string, error) {
	return _Sbt.Contract.Uri(&_Sbt.CallOpts, tokenid)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 tokenid) view returns(string)
func (_Sbt *SbtCallerSession) Uri(tokenid *big.Int) (string, error) {
	return _Sbt.Contract.Uri(&_Sbt.CallOpts, tokenid)
}

// Batchmint is a paid mutator transaction binding the contract method 0x9465ffa9.
//
// Solidity: function batchmint(address[] receiver, uint256[] tokenid, uint256[] amount) returns()
func (_Sbt *SbtTransactor) Batchmint(opts *bind.TransactOpts, receiver []common.Address, tokenid []*big.Int, amount []*big.Int) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "batchmint", receiver, tokenid, amount)
}

// Batchmint is a paid mutator transaction binding the contract method 0x9465ffa9.
//
// Solidity: function batchmint(address[] receiver, uint256[] tokenid, uint256[] amount) returns()
func (_Sbt *SbtSession) Batchmint(receiver []common.Address, tokenid []*big.Int, amount []*big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.Batchmint(&_Sbt.TransactOpts, receiver, tokenid, amount)
}

// Batchmint is a paid mutator transaction binding the contract method 0x9465ffa9.
//
// Solidity: function batchmint(address[] receiver, uint256[] tokenid, uint256[] amount) returns()
func (_Sbt *SbtTransactorSession) Batchmint(receiver []common.Address, tokenid []*big.Int, amount []*big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.Batchmint(&_Sbt.TransactOpts, receiver, tokenid, amount)
}

// Burn is a paid mutator transaction binding the contract method 0xb390c0ab.
//
// Solidity: function burn(uint256 tokenid, uint256 amount) returns()
func (_Sbt *SbtTransactor) Burn(opts *bind.TransactOpts, tokenid *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "burn", tokenid, amount)
}

// Burn is a paid mutator transaction binding the contract method 0xb390c0ab.
//
// Solidity: function burn(uint256 tokenid, uint256 amount) returns()
func (_Sbt *SbtSession) Burn(tokenid *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.Burn(&_Sbt.TransactOpts, tokenid, amount)
}

// Burn is a paid mutator transaction binding the contract method 0xb390c0ab.
//
// Solidity: function burn(uint256 tokenid, uint256 amount) returns()
func (_Sbt *SbtTransactorSession) Burn(tokenid *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.Burn(&_Sbt.TransactOpts, tokenid, amount)
}

// CloseMint is a paid mutator transaction binding the contract method 0xc68ac6b0.
//
// Solidity: function closeMint(uint256 tokenid) returns()
func (_Sbt *SbtTransactor) CloseMint(opts *bind.TransactOpts, tokenid *big.Int) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "closeMint", tokenid)
}

// CloseMint is a paid mutator transaction binding the contract method 0xc68ac6b0.
//
// Solidity: function closeMint(uint256 tokenid) returns()
func (_Sbt *SbtSession) CloseMint(tokenid *big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.CloseMint(&_Sbt.TransactOpts, tokenid)
}

// CloseMint is a paid mutator transaction binding the contract method 0xc68ac6b0.
//
// Solidity: function closeMint(uint256 tokenid) returns()
func (_Sbt *SbtTransactorSession) CloseMint(tokenid *big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.CloseMint(&_Sbt.TransactOpts, tokenid)
}

// Mint is a paid mutator transaction binding the contract method 0x156e29f6.
//
// Solidity: function mint(address receiver, uint256 tokenid, uint256 amount) returns()
func (_Sbt *SbtTransactor) Mint(opts *bind.TransactOpts, receiver common.Address, tokenid *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "mint", receiver, tokenid, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x156e29f6.
//
// Solidity: function mint(address receiver, uint256 tokenid, uint256 amount) returns()
func (_Sbt *SbtSession) Mint(receiver common.Address, tokenid *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.Mint(&_Sbt.TransactOpts, receiver, tokenid, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x156e29f6.
//
// Solidity: function mint(address receiver, uint256 tokenid, uint256 amount) returns()
func (_Sbt *SbtTransactorSession) Mint(receiver common.Address, tokenid *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.Mint(&_Sbt.TransactOpts, receiver, tokenid, amount)
}

// OpenMint is a paid mutator transaction binding the contract method 0x4287084f.
//
// Solidity: function openMint(uint256 tokenid) returns()
func (_Sbt *SbtTransactor) OpenMint(opts *bind.TransactOpts, tokenid *big.Int) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "openMint", tokenid)
}

// OpenMint is a paid mutator transaction binding the contract method 0x4287084f.
//
// Solidity: function openMint(uint256 tokenid) returns()
func (_Sbt *SbtSession) OpenMint(tokenid *big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.OpenMint(&_Sbt.TransactOpts, tokenid)
}

// OpenMint is a paid mutator transaction binding the contract method 0x4287084f.
//
// Solidity: function openMint(uint256 tokenid) returns()
func (_Sbt *SbtTransactorSession) OpenMint(tokenid *big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.OpenMint(&_Sbt.TransactOpts, tokenid)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address , address , uint256[] , uint256[] , bytes ) returns()
func (_Sbt *SbtTransactor) SafeBatchTransferFrom(opts *bind.TransactOpts, arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "safeBatchTransferFrom", arg0, arg1, arg2, arg3, arg4)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address , address , uint256[] , uint256[] , bytes ) returns()
func (_Sbt *SbtSession) SafeBatchTransferFrom(arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) (*types.Transaction, error) {
	return _Sbt.Contract.SafeBatchTransferFrom(&_Sbt.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address , address , uint256[] , uint256[] , bytes ) returns()
func (_Sbt *SbtTransactorSession) SafeBatchTransferFrom(arg0 common.Address, arg1 common.Address, arg2 []*big.Int, arg3 []*big.Int, arg4 []byte) (*types.Transaction, error) {
	return _Sbt.Contract.SafeBatchTransferFrom(&_Sbt.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address , bool ) returns()
func (_Sbt *SbtTransactor) SetApprovalForAll(opts *bind.TransactOpts, arg0 common.Address, arg1 bool) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "setApprovalForAll", arg0, arg1)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address , bool ) returns()
func (_Sbt *SbtSession) SetApprovalForAll(arg0 common.Address, arg1 bool) (*types.Transaction, error) {
	return _Sbt.Contract.SetApprovalForAll(&_Sbt.TransactOpts, arg0, arg1)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address , bool ) returns()
func (_Sbt *SbtTransactorSession) SetApprovalForAll(arg0 common.Address, arg1 bool) (*types.Transaction, error) {
	return _Sbt.Contract.SetApprovalForAll(&_Sbt.TransactOpts, arg0, arg1)
}

// SettokenIDInfo is a paid mutator transaction binding the contract method 0x5b5c45f3.
//
// Solidity: function settokenIDInfo(uint256 tokenid, uint256 totalamount, string name, string symbol, string url) returns()
func (_Sbt *SbtTransactor) SettokenIDInfo(opts *bind.TransactOpts, tokenid *big.Int, totalamount *big.Int, name string, symbol string, url string) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "settokenIDInfo", tokenid, totalamount, name, symbol, url)
}

// SettokenIDInfo is a paid mutator transaction binding the contract method 0x5b5c45f3.
//
// Solidity: function settokenIDInfo(uint256 tokenid, uint256 totalamount, string name, string symbol, string url) returns()
func (_Sbt *SbtSession) SettokenIDInfo(tokenid *big.Int, totalamount *big.Int, name string, symbol string, url string) (*types.Transaction, error) {
	return _Sbt.Contract.SettokenIDInfo(&_Sbt.TransactOpts, tokenid, totalamount, name, symbol, url)
}

// SettokenIDInfo is a paid mutator transaction binding the contract method 0x5b5c45f3.
//
// Solidity: function settokenIDInfo(uint256 tokenid, uint256 totalamount, string name, string symbol, string url) returns()
func (_Sbt *SbtTransactorSession) SettokenIDInfo(tokenid *big.Int, totalamount *big.Int, name string, symbol string, url string) (*types.Transaction, error) {
	return _Sbt.Contract.SettokenIDInfo(&_Sbt.TransactOpts, tokenid, totalamount, name, symbol, url)
}

// UpdateNameSymbol is a paid mutator transaction binding the contract method 0x1829f456.
//
// Solidity: function updateNameSymbol(uint256 tokenid, string name, string symbol) returns()
func (_Sbt *SbtTransactor) UpdateNameSymbol(opts *bind.TransactOpts, tokenid *big.Int, name string, symbol string) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "updateNameSymbol", tokenid, name, symbol)
}

// UpdateNameSymbol is a paid mutator transaction binding the contract method 0x1829f456.
//
// Solidity: function updateNameSymbol(uint256 tokenid, string name, string symbol) returns()
func (_Sbt *SbtSession) UpdateNameSymbol(tokenid *big.Int, name string, symbol string) (*types.Transaction, error) {
	return _Sbt.Contract.UpdateNameSymbol(&_Sbt.TransactOpts, tokenid, name, symbol)
}

// UpdateNameSymbol is a paid mutator transaction binding the contract method 0x1829f456.
//
// Solidity: function updateNameSymbol(uint256 tokenid, string name, string symbol) returns()
func (_Sbt *SbtTransactorSession) UpdateNameSymbol(tokenid *big.Int, name string, symbol string) (*types.Transaction, error) {
	return _Sbt.Contract.UpdateNameSymbol(&_Sbt.TransactOpts, tokenid, name, symbol)
}

// UpdateOwner is a paid mutator transaction binding the contract method 0x880cdc31.
//
// Solidity: function updateOwner(address newowner) returns()
func (_Sbt *SbtTransactor) UpdateOwner(opts *bind.TransactOpts, newowner common.Address) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "updateOwner", newowner)
}

// UpdateOwner is a paid mutator transaction binding the contract method 0x880cdc31.
//
// Solidity: function updateOwner(address newowner) returns()
func (_Sbt *SbtSession) UpdateOwner(newowner common.Address) (*types.Transaction, error) {
	return _Sbt.Contract.UpdateOwner(&_Sbt.TransactOpts, newowner)
}

// UpdateOwner is a paid mutator transaction binding the contract method 0x880cdc31.
//
// Solidity: function updateOwner(address newowner) returns()
func (_Sbt *SbtTransactorSession) UpdateOwner(newowner common.Address) (*types.Transaction, error) {
	return _Sbt.Contract.UpdateOwner(&_Sbt.TransactOpts, newowner)
}

// UpdateTotalAmount is a paid mutator transaction binding the contract method 0xfa82aa5f.
//
// Solidity: function updateTotalAmount(uint256 tokenid, uint256 totalamount) returns()
func (_Sbt *SbtTransactor) UpdateTotalAmount(opts *bind.TransactOpts, tokenid *big.Int, totalamount *big.Int) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "updateTotalAmount", tokenid, totalamount)
}

// UpdateTotalAmount is a paid mutator transaction binding the contract method 0xfa82aa5f.
//
// Solidity: function updateTotalAmount(uint256 tokenid, uint256 totalamount) returns()
func (_Sbt *SbtSession) UpdateTotalAmount(tokenid *big.Int, totalamount *big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.UpdateTotalAmount(&_Sbt.TransactOpts, tokenid, totalamount)
}

// UpdateTotalAmount is a paid mutator transaction binding the contract method 0xfa82aa5f.
//
// Solidity: function updateTotalAmount(uint256 tokenid, uint256 totalamount) returns()
func (_Sbt *SbtTransactorSession) UpdateTotalAmount(tokenid *big.Int, totalamount *big.Int) (*types.Transaction, error) {
	return _Sbt.Contract.UpdateTotalAmount(&_Sbt.TransactOpts, tokenid, totalamount)
}

// UpdateURL is a paid mutator transaction binding the contract method 0xe144976e.
//
// Solidity: function updateURL(uint256 tokenid, string url) returns()
func (_Sbt *SbtTransactor) UpdateURL(opts *bind.TransactOpts, tokenid *big.Int, url string) (*types.Transaction, error) {
	return _Sbt.contract.Transact(opts, "updateURL", tokenid, url)
}

// UpdateURL is a paid mutator transaction binding the contract method 0xe144976e.
//
// Solidity: function updateURL(uint256 tokenid, string url) returns()
func (_Sbt *SbtSession) UpdateURL(tokenid *big.Int, url string) (*types.Transaction, error) {
	return _Sbt.Contract.UpdateURL(&_Sbt.TransactOpts, tokenid, url)
}

// UpdateURL is a paid mutator transaction binding the contract method 0xe144976e.
//
// Solidity: function updateURL(uint256 tokenid, string url) returns()
func (_Sbt *SbtTransactorSession) UpdateURL(tokenid *big.Int, url string) (*types.Transaction, error) {
	return _Sbt.Contract.UpdateURL(&_Sbt.TransactOpts, tokenid, url)
}

// SbtApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the Sbt contract.
type SbtApprovalForAllIterator struct {
	Event *SbtApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SbtApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SbtApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SbtApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SbtApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SbtApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SbtApprovalForAll represents a ApprovalForAll event raised by the Sbt contract.
type SbtApprovalForAll struct {
	Account  common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_Sbt *SbtFilterer) FilterApprovalForAll(opts *bind.FilterOpts, account []common.Address, operator []common.Address) (*SbtApprovalForAllIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Sbt.contract.FilterLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &SbtApprovalForAllIterator{contract: _Sbt.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_Sbt *SbtFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *SbtApprovalForAll, account []common.Address, operator []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Sbt.contract.WatchLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SbtApprovalForAll)
				if err := _Sbt.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_Sbt *SbtFilterer) ParseApprovalForAll(log types.Log) (*SbtApprovalForAll, error) {
	event := new(SbtApprovalForAll)
	if err := _Sbt.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SbtTransferBatchIterator is returned from FilterTransferBatch and is used to iterate over the raw logs and unpacked data for TransferBatch events raised by the Sbt contract.
type SbtTransferBatchIterator struct {
	Event *SbtTransferBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SbtTransferBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SbtTransferBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SbtTransferBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SbtTransferBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SbtTransferBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SbtTransferBatch represents a TransferBatch event raised by the Sbt contract.
type SbtTransferBatch struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Ids      []*big.Int
	Values   []*big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferBatch is a free log retrieval operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_Sbt *SbtFilterer) FilterTransferBatch(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*SbtTransferBatchIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Sbt.contract.FilterLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &SbtTransferBatchIterator{contract: _Sbt.contract, event: "TransferBatch", logs: logs, sub: sub}, nil
}

// WatchTransferBatch is a free log subscription operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_Sbt *SbtFilterer) WatchTransferBatch(opts *bind.WatchOpts, sink chan<- *SbtTransferBatch, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Sbt.contract.WatchLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SbtTransferBatch)
				if err := _Sbt.contract.UnpackLog(event, "TransferBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferBatch is a log parse operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_Sbt *SbtFilterer) ParseTransferBatch(log types.Log) (*SbtTransferBatch, error) {
	event := new(SbtTransferBatch)
	if err := _Sbt.contract.UnpackLog(event, "TransferBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SbtTransferSingleIterator is returned from FilterTransferSingle and is used to iterate over the raw logs and unpacked data for TransferSingle events raised by the Sbt contract.
type SbtTransferSingleIterator struct {
	Event *SbtTransferSingle // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SbtTransferSingleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SbtTransferSingle)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SbtTransferSingle)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SbtTransferSingleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SbtTransferSingleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SbtTransferSingle represents a TransferSingle event raised by the Sbt contract.
type SbtTransferSingle struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Id       *big.Int
	Value    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferSingle is a free log retrieval operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_Sbt *SbtFilterer) FilterTransferSingle(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*SbtTransferSingleIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Sbt.contract.FilterLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &SbtTransferSingleIterator{contract: _Sbt.contract, event: "TransferSingle", logs: logs, sub: sub}, nil
}

// WatchTransferSingle is a free log subscription operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_Sbt *SbtFilterer) WatchTransferSingle(opts *bind.WatchOpts, sink chan<- *SbtTransferSingle, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Sbt.contract.WatchLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SbtTransferSingle)
				if err := _Sbt.contract.UnpackLog(event, "TransferSingle", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferSingle is a log parse operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_Sbt *SbtFilterer) ParseTransferSingle(log types.Log) (*SbtTransferSingle, error) {
	event := new(SbtTransferSingle)
	if err := _Sbt.contract.UnpackLog(event, "TransferSingle", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SbtURIIterator is returned from FilterURI and is used to iterate over the raw logs and unpacked data for URI events raised by the Sbt contract.
type SbtURIIterator struct {
	Event *SbtURI // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SbtURIIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SbtURI)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SbtURI)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SbtURIIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SbtURIIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SbtURI represents a URI event raised by the Sbt contract.
type SbtURI struct {
	Value string
	Id    *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterURI is a free log retrieval operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_Sbt *SbtFilterer) FilterURI(opts *bind.FilterOpts, id []*big.Int) (*SbtURIIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _Sbt.contract.FilterLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return &SbtURIIterator{contract: _Sbt.contract, event: "URI", logs: logs, sub: sub}, nil
}

// WatchURI is a free log subscription operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_Sbt *SbtFilterer) WatchURI(opts *bind.WatchOpts, sink chan<- *SbtURI, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _Sbt.contract.WatchLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SbtURI)
				if err := _Sbt.contract.UnpackLog(event, "URI", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseURI is a log parse operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_Sbt *SbtFilterer) ParseURI(log types.Log) (*SbtURI, error) {
	event := new(SbtURI)
	if err := _Sbt.contract.UnpackLog(event, "URI", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
